{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"coding-guidelines/","text":"Intro These are our coding guidelines. Git Please provide new code to our most recent development branch and not directly to the main branch. Indentation We use 4 spaces, not tabs. Names Use camelCase for function and method names Use camelCase for property names and local variables Use whole words in names when possible Strings Use \"double quotes\" for strings Style Open curly braces always go on the same line as whatever necessitates them Parenthesized constructs should have no surrounding whitespace. A single space follows commas, colons, and semicolons in those constructs. For example: for ( let i = 0 , n = str . length ; i < 10 ; i ++ ) { if ( x < 10 ) { foo (); } } function f ( x : number , y : string ) : void { } Source: https://github.com/microsoft/vscode/wiki/Coding-Guidelines","title":"Coding guidelines"},{"location":"coding-guidelines/#intro","text":"These are our coding guidelines.","title":"Intro"},{"location":"coding-guidelines/#git","text":"Please provide new code to our most recent development branch and not directly to the main branch.","title":"Git"},{"location":"coding-guidelines/#indentation","text":"We use 4 spaces, not tabs.","title":"Indentation"},{"location":"coding-guidelines/#names","text":"Use camelCase for function and method names Use camelCase for property names and local variables Use whole words in names when possible","title":"Names"},{"location":"coding-guidelines/#strings","text":"Use \"double quotes\" for strings","title":"Strings"},{"location":"coding-guidelines/#style","text":"Open curly braces always go on the same line as whatever necessitates them Parenthesized constructs should have no surrounding whitespace. A single space follows commas, colons, and semicolons in those constructs. For example: for ( let i = 0 , n = str . length ; i < 10 ; i ++ ) { if ( x < 10 ) { foo (); } } function f ( x : number , y : string ) : void { } Source: https://github.com/microsoft/vscode/wiki/Coding-Guidelines","title":"Style"},{"location":"display-pinouts/","text":"Display Pinouts (Nokia 5110, OLED 0,96\" / 1,3\", ePaper)","title":"Display pinouts"},{"location":"display-pinouts/#display-pinouts-nokia-5110-oled-096-13-epaper","text":"","title":"Display Pinouts (Nokia 5110, OLED 0,96\" / 1,3\", ePaper)"},{"location":"faq-frequently-asked-questions/","text":"FAQ H\u00e4ufig gestellte Fragen Die Wechselrichter senden nur bei Tag, wenn auch eine Stromproduktion durch die PV Module stattfindet (DC Spannung >16V an einem MPPT-Eingang). Es ist ratsam, einen Elko gr\u00f6\u00dfer 10\u00b5F an die Stromversorgung des nRF24L01+ Moduls zu l\u00f6ten. Beim Wemos D1 mini ESP8266 Modul sollte bei Problemen der IRQ Pin statt an D3 an D1 / D2 angel\u00f6tet werden und dies auch in der System Config eingetragen werden. Bei Problemen am besten ein fertiges .bin aus den GitHub Actions verwenden. Die Sendeleistung nicht gleich auf HIGH oder gar MAX stellen. LOW oder MIN ist in den meisten F\u00e4llen die bessere Wahl, da es einen geringeren Einbruch der Versorgungspannung beim Senden bewirkt. Binaries f\u00fcr AhoyDTU gibt es unter: https://github.com/lumapu/ahoy/actions/workflows/compile_esp8266.yml oder https://github.com/lumapu/ahoy/actions/workflows/compile_development.yml Man muss f\u00fcr die o.g. Binaries bei GitHub eingeloggt sein. Die Anmeldung ist kostenlos. Das erste Flashen kann z.B. mit dem esp flasher erfolgen: https://www.espressif.com/sites/default/files/tools/flash_download_tool_3.9.3.zip Danach kann f\u00fcr Updates die .bin Datei einfach per OTA hochgeladen werden. Falls bei Jemandem der ESP nach dem Flashen nicht mehr startet, im Support melden. Es scheint bei neueren Versionen des esp flasher Tools bei manchen Leuten probleme zu geben (konnte ich bei mir nicht feststellen). Der Haken bei DoNotChgBin muss weg gemacht werden falls er da ist. Wenn gar Nichts geht, ein Erase Flash durchf\u00fchren und von vorne beginnen. AhoyDTU und OpenDTU brauchen eine korrekte NTP Zeit um den Wechselrichter abzufragen. Man sollte also als erstes sein WLAN eintragen und zum Internet connecten. Man sollte auch etwas bei der max. Panel Power eintragen damit die Irradiation % richtig berechnet werden k\u00f6nnen. Not available hei\u00dft der Wechselrichter antwortet seit min. 5 Minuten nicht auf die \u00fcblichen Anfragen durch die AhoyDTU / OpenDTU. Not producing hei\u00dft der Wechselrichter hat keine aktuellen Werte zur Leistung \u00fcbermittelt (d.h. die AC-Leistung <3W). Die Autodiscover Funktion in HomeAssistant wird nur getriggert, wenn auch MQTT Nachrichten gesendet werden, also der Wechselrichter auch Daten sendet. behoben / veraltet ~~* Beim ESP32 Wroom32 (38pol.) ist die empfohlene GPIO-Belegung diese hier und im Setup unter Sytem Config, Pinout (Wemos) folgenderma\u00dfen einzutragen:~~ * ~~CS=D1 (GPIO5)~~ * ~~CE=D2 (GPIO4)~~ * ~~IRQ=D0 (GPIO16 - no IRQ!)~~ ~~* Die Warnmeldung \"no IRQ\" zu GPIO16 gilt nur f\u00fcr den kleinen Bruder ESP8266 (Wemos) und funktioniert beim ESP32 einwandfrei.~~ ~~* Es kann bis zu 30 Minuten dauern, bis der Wechselrichter die erste Antwort auf Anfragen zur\u00fccksendet, also nicht gleich nach zwei / drei Minuten Sendeversuchen aufgeben.~~ OpenDTU Binaries f\u00fcr OpenDTU kann man hier laden: https://github.com/tbnobody/OpenDTU/actions/workflows/build.yml Bei OpenDTU: die opendtu-generic.bin, die bootloader_dio_40m.bin kommt nach 0x1000, die partitions.bin nach 0x8000, die boot_app0.bin nach 0xe000 und das eigentliche Programm dann nach 0x10000. Beim Update wird nur noch das eigentliche Programm geflasht. Allgemeines Herzlich wilkommen zu den aktuellen Faqs, die aktuell noch in der Entwicklung sind und einen kleinen \u00dcberblick \u00fcber das Projekt geben sollen Vielleicht k\u00f6nnt Ihr Bitte mal so die letzten Beitr\u00e4ge durchgehen und einiges als FAQs mit aufnehmen in der Hoffnung, dass es nicht t\u00e4glich neu gefragt wird ? Das k\u00f6nnte vielleicht auch jemand machen, der aktuell nicht mit entwickelt, aber sich gut mit github auskennt ? Vielleicht auch 1 Dokument f\u00fcr alle Sourcen zusammen - denn einiges w\u00e4re ja Allgemeing\u00fcltig ? Bitte im entsprechenden Forums Beitrag Hilfe anbieten bzw. weitere Entwicklung hierzu diskutieren. Welche Modelle werden unterst\u00fctzt Tabelle der Hersteller & Modelle Alles Wechselrichter die mit nRF24L01+ Modulen per 2.4GHz und ESB (Enhanced Shock Burst) von Nordic Semiconductors erreicht werden kann. Aktuell unterst\u00fctzte Modelle: - ESP8266 - Arduino Nano (schon lange nicht mehr aktualisiert) - Raspberry Pi Welche Ger\u00e4te / Funktionen werden nicht unterst\u00fctzt Werden Hoymiles HMT und HMS auch unterst\u00fctzt ? Nein HMT und HMS verwenden ein anderes Funkmodul und k\u00f6nnen daher (vorerst) auch nicht unterst\u00fctzt werden. Ob die beiden Modelle auch die selben Kommandos verwenden ist bisher unbekannt. Wird DTU-Pro-S auch unterst\u00fctzt ? Die DTU-Pro S ist f\u00fcr die o.g. Hoymiles HMT & HMS Modelle gebaut und verwendet ebenfalls ein anderes Funkmodul. Sie wird also ebenfalls auf absehbare Zeit nicht unterst\u00fctzt. Welche Kommandos werden von der DTU unterst\u00fctzt Statusabfrage detaillierte Statusabfrage der aktuellen Werte allgemeine Hardware / Software Informationen Alarmmeldungen alle Meldungen seit der letzten Nacht neue Meldungen Kontrollkommandos Start des Wechselrichters (Boot) Stop des Wechselrichters (Shutdown) Restart des Wechselrichters (Reboot) Power Limit (PowerLimit) Power Factor (PowerFactor) Parameter setzen Netz Profil (GridProfile) Welche Entfernung unterst\u00fctzen die nRF24L01+ Funkmodule Es sind scheint unterschiedliche Reichweiten, je nach Gegebenheit, zu geben. Ich denke ein erster Richtwert w\u00e4ren Sichtkontakt bis zu 10m Leichte W\u00e4nde wie Holz, Ziegel etc. bis zu 3m Alles weiteren W\u00e4nde eventuell nur 1m Der Abstand zwischen einem HM-600 war nur knapp 2 m, und durch die Holzdecke + Schindeln. Modbus via TCP oder RS485 Wird Modbus f\u00fcr Z\u00e4hler auch unterst\u00fctzt ? Was sind SunSpec und Victron SunSpec ist das, was z.B. SMA und Fronius sprechen um die WR zu regeln, du bekommst Werte vom WR und eine Steuerung wie z.B. Victron kann entsprechend nach Batteriestand und Hausverbrauch die Leistung reduzieren, so dass du Nulleinspeisung fahren kannst basiert auf Modbus, hat aber noch einige Register zur Identifikation zus\u00e4tzlich Was ist DRM DRM ist ein Hardwareport, der f\u00fcr Australien entwickelt ist, da musst mit Widerst\u00e4nden und Schaltern gegen + und - Schalten, bisher keine vern\u00fcnftigen Schaltungen gefunden, SunSpec ist nur m\u00f6glich \u00fcber RS485 wenn nicht Zero-Export aktiv ist, da der RS485 Port dann in den Slavemode geht und sonst mit dem Z\u00e4hler/Messger\u00e4t als Master arbeitet DRM Control Box DRM Modes Was ist AntiReflux Welche Modbus Register unterst\u00fctzt die DTU-Pro In der Dokumentation zum ModBus Protokoll [1] wird folgende Liste von Registern angegeben, h\u00e4ngt das eventuell miteinander zusammen ? 4.3.2 Microinverter Data Register List The following registers provide a microinverter data register list, which can be read-only with the function code 0x03 Table Microinverter Data Register List | Registers | Name | Decimal | Units | Remark | | --------- | ---------------- | ------- | ----- | ------------------------------------------------------------ | | 0x1000 | Data Type | / | / | Default, 0x3C | | 0x1001 | Microinverter SN | / | / | 12-digit decimal number Big-Endian For example, 116151200012 | | 0x1002 | Microinverter SN | / | / | 12-digit decimal number Big-Endian For example, 116151200012 | | 0x1003 | Microinverter SN | / | / | 12-digit decimal number Big-Endian For example, 116151200012 | | 0x1004 | Microinverter SN | / | / | 12-digit decimal number Big-Endian For example, 116151200012 | | 0x1005 | Microinverter SN | / | / | 12-digit decimal number Big-Endian For example, 116151200012 | | 0x1006 | Microinverter SN | / | / | 12-digit decimal number Big-Endian For example, 116151200012 | | 0x1007 | Port Number | / | / | | | 0x1008 | PV Voltage | 1 | V | | | 0x1009 | PV Voltage | 1 | V | | | 0x100A | PV Current | 1/2 | A | 1 for MI Series, 2 for HM Series | | 0x100B | PV Current | 1/2 | A | 1 for MI Series, 2 for HM Series | | 0x100C | Grid Voltage | 1 | V | | | 0x100D | Grid Voltage | 1 | V | | | 0x100E | Grid frequency | 2 | Hz | | | 0x100F | Grid frequency | 2 | Hz | | | 0x1010 | PV Power | 1 | W | | | 0x1011 | PV Power | 1 | W | | | 0x1012 | Today Production | / | Wh | | | 0x1013 | Today Production | / | Wh | | | 0x1014 | Total Production | / | Wh | | | 0x1015 | Total Production | / | Wh | | | 0x1016 | Total Production | / | Wh | | | 0x1017 | Total Production | / | Wh | | | 0x1018 | Temperature | 1 | \u00b0C | Microinverter internal temperature | | 0x1019 | Temperature | 1 | \u00b0C | Microinverter internal temperature | | 0x101A | Operating Status | / | / | | | 0x101B | Operating Status | / | / | | | 0x101C | Alarm Code | / | / | | | 0x101D | Alarm Code | / | / | | | 0x101E | Alarm Count | / | / | | | 0x101F | Alarm Count | / | / | | | 0x1020 | Link Status | / | / | Communication status with DTU | | 0x1021 | / | / | / | Fixed, 0x07 | | 0x1022 | Reserved | / | / | | | 0x1023 | Reserved | / | / | | | 0x1024 | Reserved | / | / | | | 0x1025 | Reserved | / | / | | | 0x1026 | Reserved | / | / | | | 0x1027 | Reserved | / | / | | | 0x1028 | Data Type | / | / | Default, 0x3C | | 0x1029 | | / | / | | Die Daten k\u00f6nnen offenbar mit dem entsprechenden 0x03 Kommando angefordert werden und aus der entsprechenden 0x03 Antwort entnommen werden: 4.2.3 Read Device Data Tables Read Device Data * Command sending format | Name | Length | Value | Remark | | ---------------- | ------ | ----- | ------------- | | Address | 1 | | RS485 Address | | Function Code | 1 | 0x03 | | | Register Address | 2 | | Big-Endian | | Register Count | 2 | | Big-Endian | | CRC | 2 | | CRC16 | * Command response format (if success) | Name | Length | Value | Remark | | --------------- | ------ | ----- | ------------- | | Address | 1 | | RS485 Address | | Function Code | 1 | 0x03 | | | Data Length | 2 | | | | Data 1 | 2 | | Big-Endian | | Data 2 | 2 | | Big-Endian | | ...... | | | | | CRC | 2 | | CRC16 | * Command response format (if failed) | Name | Length | Value | Remark | | --------------- | ------ | ----- | ------------- | | Address | 1 | | RS485 Address | | Function Code | 1 | 0x83 | | | Wrong Data Code | 1 | 0x01 | | | CRC | 2 | | CRC16 | [1] https://www.mikrocontroller.net/attachment/552319/Technical-Note-Modbus-implementation-using-3Gen-DTU-Pro-V1.2.pdf Was ist MQTT Das Protokoll ( Message Queuing Telemetry Transport ) ist ein offenes Netzwerkprotokoll f\u00fcr Machine-to-Machine-Kommunikation (M2M), das die \u00dcbertragung von Telemetriedaten in Form von Nachrichten zwischen Ger\u00e4ten erm\u00f6glicht, trotz hoher Verz\u00f6gerungen oder beschr\u00e4nkter Netzwerke. Es erm\u00f6glich dem Wechselrichter Inforamtionen an einen Dienst zu senden, die dort abgegriffen werden k\u00f6nnen. Welche MQTT Broker / Home Automation Systeme verwendet ihr Home Assistant Openhab InfluxDB Hardware Welche Hardware brauche ich f\u00fcr die verschiedenen Software Projekte Reicht ein ESP8266 mit 1MB oder muss es unbedingt ein ESP8266 mit 4MB sein ? ESP8266 mit 4MB Flash ist empfohlen Raspberry Pi ESP32 mit OpentDTU Arduino Nano (aktuell nicht gepflegt, daher u.a. kein Active PowerLimit) Welche Hardware gibt es und welche Software l\u00e4uft darauf Hardware Software (Pfad) Arduino nano Ahoy DTU tools/nano ESP8266 Ahoy DTU tools/esp8266 ESP8266 Ahoy DTU tools/HoyDtuSim ESP8266 Ahoy DTU tools/NRF24_SendRcv ESP32 Open DTU tbnobody/OpenDTU Raspberry Pi Ahoy DTU tools/rpi Welches nRF24L01+ Modul verwendet ihr ? Mu\u00df es ein nrf24L01+ sein oder funktioniert auch ein nrf24L01 (ohne Plus) ? nrf24L01+ DollaTek 2Pcs NRF24L01 + PA + LNA Funk-Transceiver-Modul 2.4G Nach den bisherigen Erfahrungen mu\u00df es ein + Modell sein. Mit der NRF24 Bibliothek kann man das Modell mit printDetails() ausgeben lassen. Ich will mir eines bestellen, wo gibt es eine sichere Quelle ? Die Module die aktuell bei AZDelivery (Amazon) und Makershop (ebay) angeboten werden scheinen i.d.R. zu funktionieren. Welchen Mikroprozessor empfehlt ihr ? ESP32 (OpenDTU) oder ESP8266 (Ahoy-DTU) sind beide zu empfehlen, da sie bereits eine WLAN / WiFi Antenne eingebaut haben. Der Unterschied liegt ein wenig am Preis und welche Software man darauf laufen lassen m\u00f6chte. Wer bereits einen Raspberry Pi in Betrieb hat, der nahe genug an den Wechselrichtern ist, kann auch diesen direkt nutzen. Auf dem Raspberry Pi sind \u00c4nderungen am Code nicht immer mit einem Software-Update (Flashen) verbunden. Historisch wurde auch der Arduino nano f\u00fcr erste Scans beim Reverse-Engineering verwendet. Wie ist das Ger\u00e4t mit Spannung zu versorgen Stabile Stromversorgung ... Am besten nimmt man ein Netzteil mit mindestens 1A Ausgangsstrom und einem Micro USB Kabel. Am besten nimmt man originale Handyladeger\u00e4te z.B. von Samsung oder auch vom Raspberry. Je besser die Qualit\u00e4t desto stabiler die Spannung und der Strom --> je stabiler der DTU. Es wird empfohlen einen 10/100uF Elko zwischen +5V und GND des NRF24 Moduls zu l\u00f6ten um den entsprechend hohen Strombedarf des Moduls beim Senden besser zu unterst\u00fctzen. Manchmal wird auch empfohlen einen 10/100nF Tantalkondensator dazu parallel zu schalten um die Spannung zu gl\u00e4tten. Software / Installation Die Software f\u00fcr den ESP32 (OpenDTU) ist ein bi\u00dfchen \u00fcbersichtlicher aufgebaut und wird von Thomas B. (@noby) vorbildlich gewartet. Welche Software gibt es und mit welcher Hardware l\u00e4uft sie Ahoy auf ESP8266 l\u00e4uft bei mir mehrfach \"im Produktiv-Einsatz\" seit Wochen. Damit f\u00fcttere ich die InfluxDB. Software for ESP32 to talk to Hoymiles Inverters https://github.com/tbnobody/OpenDTU/ Software for ESP8266, Raspberr https://github.com/grindylow/ahoy https://github.com/DanielR92/ahoy/tree/main/tools/rpi Software (Pfad) Hardware Ahoy DTU tools/nano Arduino nano Ahoy DTU tools/esp8266 ESP8266 Ahoy DTU tools/HoyDtuSim ESP8266 Ahoy DTU tools/NRF24_SendRcv ESP8266 Open DTU tbnobody/OpenDTU ESP32 Ahoy DTU tools/rpi Raspberry Pi BIN Files f\u00fcr Ahoy-DTU Wo und wie kommt man direkt ohne Entwicklungsumgebung an die .bin ? Wo liegen die verschiedenen Versionen der .bin\u00b4s ? Den aktuellen Build bekommnt man f\u00fcr den ESP8266 unter: https://nightly.link/lumapu/ahoy/workflows/compile_esp8266/main/esp8266.zip Dort im Bereich Actions findet man den Download, man muss man sich allerdings bei Github anmelden. Ein Release wird aktuell noch nicht gebaut und die BIN Files sind auch im Master Branch mit Vorsicht zu genie\u00dfen. Man sollte ggf. die aktuellsten Commits / Merge Requests kontrollieren bzw. die Issues lesen. Platform IO installieren Wie definiere ich die Serielle Schnittstelle f\u00fcr den ESP7266/ESP32 unter Linux Mit upload_port = /dev/ttyUSB0 in der platformio.ini unter [env:d1_mini] und/oder [env:node_mcu_v2] Kommt der Fehler could not open port mu\u00df man noch die Berechtigung anpassen, der Benutzer muss in der dialout Gruppe sein unter Linux. sudo adduser <mein_nutzer> dialout Eventuell muss man sich sogar noch einmal abmelden und wieder anmelden, damit er die Berechtigungen aktualisiert. unter Mac OS unter Windows Treiber installieren COM1: Wie kann ich den ESP8266 konfigurieren Der ESP8266 er\u00f6ffnet einen eigenen AP (wie zum Beispiel die Fritz!Box) Mit diesem muss man sich verbinden wie mit jedem anderen WLAN, dann kann man auf die Einstellungen zugreifen und seine eigenen Zugangsdateien f\u00fcrs Wlan eingeben. http://192.168.178.XXX/setup Wo finde ich den original Source Code von Hoymiles https://gitee.com/iotloves/hoymiles-DTU-PRO/ andycao1860-hoymiles-DTU-PRO.zip and 1 more file https://we.tl/t-tn7OWR4VdR Welche EXPERIMENTELLEN Software Funktionen sind bisher noch nicht im Standard enthalten (Pull Request / Merge) SD Card Support https://github.com/grindylow/ahoy/compare/main...stefan123t:ahoy:sd_card Power Limit via mqtt https://github.com/grindylow/ahoy/pull/109 ESP8266 Async WebServer https://github.com/grindylow/ahoy/pull/107 Welche Software Funktionen sind geplant State Machine List State Machine Resources EMBED WITH ELLIOT: PRACTICAL STATE MACHINES https://hackaday.com/2015/09/04/embed-with-elliot-practical-state-machines/ Multithreading in C und Arduino http://stefanfrings.de/multithreading_arduino/index.html Using State Machines In Your Designs http://aqdi.com/articles/using-state-machines-in-your-designs-3/ C and C++ Finite State Machine Framework http://block-net.de/Programmierung/cpp/fsm/fsm.html SMC The State Machine Compiler http://smc.sourceforge.net/ Generate production ready source code from UML state diagrams \u2013 and activity diagrams! https://www.sinelabore.de/doku.php Qfsm - A graphical tool for designing finite state machines http://qfsm.sourceforge.net/ Professioneller Arduino Code: Variablen, State-Machine und Klassen https://www.youtube.com/watch?v=MERB1lqqyl8 STATE YOUR INTENTIONS MORE CLEARLY WITH STATE MACHINES https://hackaday.com/2018/04/06/state-your-intentions-more-clearly-with-state-machines/ https://www.youtube.com/watch?v=v8KXa5uRavg Artikel \u00fcber Finite State Machines https://www.mikrocontroller.net/topic/248837 Konfiguration Eintragen der Seriennummer Die Seriennummern des/der Wechselrichter findet man auf der R\u00fcckseite des WRs bzw. der Module. Man sollte sich die Seriennummer notieren oder abfotografieren, da man manchmal nach Installation der Module nicht mehr an diese Information kommt. S/N eintragen, muss das \"ULL\" stehen bleiben (im Source) ? The datasheet specifies the over-the-air packet format: \"Most Significant Byte (MSB) to the left\" (cf [datasheet figure 11][3]) Address := Byte_4, Byte_3, Byte_2, Byte_1, Byte_0 (\"LSByte must be unique\") so 0x1946107301 results in 19 46 10 73 01 \"on the air\". Old-style NRF Libraries take uint64_t addresses. In this case, the correct address to pass to the library would be (uint64_t)0x1946107301ULL . Beispiel direkt im Souce als Kommentar z.B. Format: #define DTU_RADIO_ID ((uint64_t)0x1234567801ULL) #define WR1_RADIO_ID ((uint64_t)0x1946107301ULL) // 0x1946107300ULL = WR1 #define WR2_RADIO_ID ((uint64_t)0x3944107301ULL) // 0x3944107301ULL = WR2 Wieviele Wechselrichter unterst\u00fctzt die Software Ich habe mehr als 3 hoymiles HM-..., wird das auch Unterst\u00fctzt ? (muss im Source ge\u00e4ndert werden - ich weiss - aber neue Nutzer eher nicht) Warum antwortet der Wechselrichter nicht Antwortet der HM-.... auch ohne angeschlossene PV Module bzw. Nachts ? Nein, f\u00fcr Nachts muss zum testen ein Netzteil f\u00fcr Gleichspannung angeschlossen werden. Der Wechselrichter l\u00e4\u00dft sich nur bei einer Spannung von > 30V \u00fcber das Funkmodul erreichen.","title":"FAQ H\u00e4ufig gestellte Fragen"},{"location":"faq-frequently-asked-questions/#faq-haufig-gestellte-fragen","text":"Die Wechselrichter senden nur bei Tag, wenn auch eine Stromproduktion durch die PV Module stattfindet (DC Spannung >16V an einem MPPT-Eingang). Es ist ratsam, einen Elko gr\u00f6\u00dfer 10\u00b5F an die Stromversorgung des nRF24L01+ Moduls zu l\u00f6ten. Beim Wemos D1 mini ESP8266 Modul sollte bei Problemen der IRQ Pin statt an D3 an D1 / D2 angel\u00f6tet werden und dies auch in der System Config eingetragen werden. Bei Problemen am besten ein fertiges .bin aus den GitHub Actions verwenden. Die Sendeleistung nicht gleich auf HIGH oder gar MAX stellen. LOW oder MIN ist in den meisten F\u00e4llen die bessere Wahl, da es einen geringeren Einbruch der Versorgungspannung beim Senden bewirkt. Binaries f\u00fcr AhoyDTU gibt es unter: https://github.com/lumapu/ahoy/actions/workflows/compile_esp8266.yml oder https://github.com/lumapu/ahoy/actions/workflows/compile_development.yml Man muss f\u00fcr die o.g. Binaries bei GitHub eingeloggt sein. Die Anmeldung ist kostenlos. Das erste Flashen kann z.B. mit dem esp flasher erfolgen: https://www.espressif.com/sites/default/files/tools/flash_download_tool_3.9.3.zip Danach kann f\u00fcr Updates die .bin Datei einfach per OTA hochgeladen werden. Falls bei Jemandem der ESP nach dem Flashen nicht mehr startet, im Support melden. Es scheint bei neueren Versionen des esp flasher Tools bei manchen Leuten probleme zu geben (konnte ich bei mir nicht feststellen). Der Haken bei DoNotChgBin muss weg gemacht werden falls er da ist. Wenn gar Nichts geht, ein Erase Flash durchf\u00fchren und von vorne beginnen. AhoyDTU und OpenDTU brauchen eine korrekte NTP Zeit um den Wechselrichter abzufragen. Man sollte also als erstes sein WLAN eintragen und zum Internet connecten. Man sollte auch etwas bei der max. Panel Power eintragen damit die Irradiation % richtig berechnet werden k\u00f6nnen. Not available hei\u00dft der Wechselrichter antwortet seit min. 5 Minuten nicht auf die \u00fcblichen Anfragen durch die AhoyDTU / OpenDTU. Not producing hei\u00dft der Wechselrichter hat keine aktuellen Werte zur Leistung \u00fcbermittelt (d.h. die AC-Leistung <3W). Die Autodiscover Funktion in HomeAssistant wird nur getriggert, wenn auch MQTT Nachrichten gesendet werden, also der Wechselrichter auch Daten sendet. behoben / veraltet ~~* Beim ESP32 Wroom32 (38pol.) ist die empfohlene GPIO-Belegung diese hier und im Setup unter Sytem Config, Pinout (Wemos) folgenderma\u00dfen einzutragen:~~ * ~~CS=D1 (GPIO5)~~ * ~~CE=D2 (GPIO4)~~ * ~~IRQ=D0 (GPIO16 - no IRQ!)~~ ~~* Die Warnmeldung \"no IRQ\" zu GPIO16 gilt nur f\u00fcr den kleinen Bruder ESP8266 (Wemos) und funktioniert beim ESP32 einwandfrei.~~ ~~* Es kann bis zu 30 Minuten dauern, bis der Wechselrichter die erste Antwort auf Anfragen zur\u00fccksendet, also nicht gleich nach zwei / drei Minuten Sendeversuchen aufgeben.~~ OpenDTU Binaries f\u00fcr OpenDTU kann man hier laden: https://github.com/tbnobody/OpenDTU/actions/workflows/build.yml Bei OpenDTU: die opendtu-generic.bin, die bootloader_dio_40m.bin kommt nach 0x1000, die partitions.bin nach 0x8000, die boot_app0.bin nach 0xe000 und das eigentliche Programm dann nach 0x10000. Beim Update wird nur noch das eigentliche Programm geflasht.","title":"FAQ H\u00e4ufig gestellte Fragen"},{"location":"faq-frequently-asked-questions/#allgemeines","text":"Herzlich wilkommen zu den aktuellen Faqs, die aktuell noch in der Entwicklung sind und einen kleinen \u00dcberblick \u00fcber das Projekt geben sollen Vielleicht k\u00f6nnt Ihr Bitte mal so die letzten Beitr\u00e4ge durchgehen und einiges als FAQs mit aufnehmen in der Hoffnung, dass es nicht t\u00e4glich neu gefragt wird ? Das k\u00f6nnte vielleicht auch jemand machen, der aktuell nicht mit entwickelt, aber sich gut mit github auskennt ? Vielleicht auch 1 Dokument f\u00fcr alle Sourcen zusammen - denn einiges w\u00e4re ja Allgemeing\u00fcltig ? Bitte im entsprechenden Forums Beitrag Hilfe anbieten bzw. weitere Entwicklung hierzu diskutieren.","title":"Allgemeines"},{"location":"faq-frequently-asked-questions/#welche-modelle-werden-unterstutzt","text":"Tabelle der Hersteller & Modelle Alles Wechselrichter die mit nRF24L01+ Modulen per 2.4GHz und ESB (Enhanced Shock Burst) von Nordic Semiconductors erreicht werden kann. Aktuell unterst\u00fctzte Modelle: - ESP8266 - Arduino Nano (schon lange nicht mehr aktualisiert) - Raspberry Pi","title":"Welche Modelle werden unterst\u00fctzt"},{"location":"faq-frequently-asked-questions/#welche-gerate-funktionen-werden-nicht-unterstutzt","text":"Werden Hoymiles HMT und HMS auch unterst\u00fctzt ? Nein HMT und HMS verwenden ein anderes Funkmodul und k\u00f6nnen daher (vorerst) auch nicht unterst\u00fctzt werden. Ob die beiden Modelle auch die selben Kommandos verwenden ist bisher unbekannt. Wird DTU-Pro-S auch unterst\u00fctzt ? Die DTU-Pro S ist f\u00fcr die o.g. Hoymiles HMT & HMS Modelle gebaut und verwendet ebenfalls ein anderes Funkmodul. Sie wird also ebenfalls auf absehbare Zeit nicht unterst\u00fctzt.","title":"Welche Ger\u00e4te / Funktionen werden nicht unterst\u00fctzt"},{"location":"faq-frequently-asked-questions/#welche-kommandos-werden-von-der-dtu-unterstutzt","text":"Statusabfrage detaillierte Statusabfrage der aktuellen Werte allgemeine Hardware / Software Informationen Alarmmeldungen alle Meldungen seit der letzten Nacht neue Meldungen Kontrollkommandos Start des Wechselrichters (Boot) Stop des Wechselrichters (Shutdown) Restart des Wechselrichters (Reboot) Power Limit (PowerLimit) Power Factor (PowerFactor) Parameter setzen Netz Profil (GridProfile)","title":"Welche Kommandos werden von der DTU unterst\u00fctzt"},{"location":"faq-frequently-asked-questions/#welche-entfernung-unterstutzen-die-nrf24l01-funkmodule","text":"Es sind scheint unterschiedliche Reichweiten, je nach Gegebenheit, zu geben. Ich denke ein erster Richtwert w\u00e4ren Sichtkontakt bis zu 10m Leichte W\u00e4nde wie Holz, Ziegel etc. bis zu 3m Alles weiteren W\u00e4nde eventuell nur 1m Der Abstand zwischen einem HM-600 war nur knapp 2 m, und durch die Holzdecke + Schindeln.","title":"Welche Entfernung unterst\u00fctzen die nRF24L01+ Funkmodule"},{"location":"faq-frequently-asked-questions/#modbus-via-tcp-oder-rs485","text":"Wird Modbus f\u00fcr Z\u00e4hler auch unterst\u00fctzt ?","title":"Modbus via TCP oder RS485"},{"location":"faq-frequently-asked-questions/#was-sind-sunspec-und-victron","text":"SunSpec ist das, was z.B. SMA und Fronius sprechen um die WR zu regeln, du bekommst Werte vom WR und eine Steuerung wie z.B. Victron kann entsprechend nach Batteriestand und Hausverbrauch die Leistung reduzieren, so dass du Nulleinspeisung fahren kannst basiert auf Modbus, hat aber noch einige Register zur Identifikation zus\u00e4tzlich","title":"Was sind SunSpec und Victron"},{"location":"faq-frequently-asked-questions/#was-ist-drm","text":"DRM ist ein Hardwareport, der f\u00fcr Australien entwickelt ist, da musst mit Widerst\u00e4nden und Schaltern gegen + und - Schalten, bisher keine vern\u00fcnftigen Schaltungen gefunden, SunSpec ist nur m\u00f6glich \u00fcber RS485 wenn nicht Zero-Export aktiv ist, da der RS485 Port dann in den Slavemode geht und sonst mit dem Z\u00e4hler/Messger\u00e4t als Master arbeitet DRM Control Box DRM Modes","title":"Was ist DRM"},{"location":"faq-frequently-asked-questions/#was-ist-antireflux","text":"","title":"Was ist AntiReflux"},{"location":"faq-frequently-asked-questions/#welche-modbus-register-unterstutzt-die-dtu-pro","text":"In der Dokumentation zum ModBus Protokoll [1] wird folgende Liste von Registern angegeben, h\u00e4ngt das eventuell miteinander zusammen ? 4.3.2 Microinverter Data Register List The following registers provide a microinverter data register list, which can be read-only with the function code 0x03 Table Microinverter Data Register List | Registers | Name | Decimal | Units | Remark | | --------- | ---------------- | ------- | ----- | ------------------------------------------------------------ | | 0x1000 | Data Type | / | / | Default, 0x3C | | 0x1001 | Microinverter SN | / | / | 12-digit decimal number Big-Endian For example, 116151200012 | | 0x1002 | Microinverter SN | / | / | 12-digit decimal number Big-Endian For example, 116151200012 | | 0x1003 | Microinverter SN | / | / | 12-digit decimal number Big-Endian For example, 116151200012 | | 0x1004 | Microinverter SN | / | / | 12-digit decimal number Big-Endian For example, 116151200012 | | 0x1005 | Microinverter SN | / | / | 12-digit decimal number Big-Endian For example, 116151200012 | | 0x1006 | Microinverter SN | / | / | 12-digit decimal number Big-Endian For example, 116151200012 | | 0x1007 | Port Number | / | / | | | 0x1008 | PV Voltage | 1 | V | | | 0x1009 | PV Voltage | 1 | V | | | 0x100A | PV Current | 1/2 | A | 1 for MI Series, 2 for HM Series | | 0x100B | PV Current | 1/2 | A | 1 for MI Series, 2 for HM Series | | 0x100C | Grid Voltage | 1 | V | | | 0x100D | Grid Voltage | 1 | V | | | 0x100E | Grid frequency | 2 | Hz | | | 0x100F | Grid frequency | 2 | Hz | | | 0x1010 | PV Power | 1 | W | | | 0x1011 | PV Power | 1 | W | | | 0x1012 | Today Production | / | Wh | | | 0x1013 | Today Production | / | Wh | | | 0x1014 | Total Production | / | Wh | | | 0x1015 | Total Production | / | Wh | | | 0x1016 | Total Production | / | Wh | | | 0x1017 | Total Production | / | Wh | | | 0x1018 | Temperature | 1 | \u00b0C | Microinverter internal temperature | | 0x1019 | Temperature | 1 | \u00b0C | Microinverter internal temperature | | 0x101A | Operating Status | / | / | | | 0x101B | Operating Status | / | / | | | 0x101C | Alarm Code | / | / | | | 0x101D | Alarm Code | / | / | | | 0x101E | Alarm Count | / | / | | | 0x101F | Alarm Count | / | / | | | 0x1020 | Link Status | / | / | Communication status with DTU | | 0x1021 | / | / | / | Fixed, 0x07 | | 0x1022 | Reserved | / | / | | | 0x1023 | Reserved | / | / | | | 0x1024 | Reserved | / | / | | | 0x1025 | Reserved | / | / | | | 0x1026 | Reserved | / | / | | | 0x1027 | Reserved | / | / | | | 0x1028 | Data Type | / | / | Default, 0x3C | | 0x1029 | | / | / | | Die Daten k\u00f6nnen offenbar mit dem entsprechenden 0x03 Kommando angefordert werden und aus der entsprechenden 0x03 Antwort entnommen werden: 4.2.3 Read Device Data Tables Read Device Data * Command sending format | Name | Length | Value | Remark | | ---------------- | ------ | ----- | ------------- | | Address | 1 | | RS485 Address | | Function Code | 1 | 0x03 | | | Register Address | 2 | | Big-Endian | | Register Count | 2 | | Big-Endian | | CRC | 2 | | CRC16 | * Command response format (if success) | Name | Length | Value | Remark | | --------------- | ------ | ----- | ------------- | | Address | 1 | | RS485 Address | | Function Code | 1 | 0x03 | | | Data Length | 2 | | | | Data 1 | 2 | | Big-Endian | | Data 2 | 2 | | Big-Endian | | ...... | | | | | CRC | 2 | | CRC16 | * Command response format (if failed) | Name | Length | Value | Remark | | --------------- | ------ | ----- | ------------- | | Address | 1 | | RS485 Address | | Function Code | 1 | 0x83 | | | Wrong Data Code | 1 | 0x01 | | | CRC | 2 | | CRC16 | [1] https://www.mikrocontroller.net/attachment/552319/Technical-Note-Modbus-implementation-using-3Gen-DTU-Pro-V1.2.pdf","title":"Welche Modbus Register unterst\u00fctzt die DTU-Pro"},{"location":"faq-frequently-asked-questions/#was-ist-mqtt","text":"Das Protokoll ( Message Queuing Telemetry Transport ) ist ein offenes Netzwerkprotokoll f\u00fcr Machine-to-Machine-Kommunikation (M2M), das die \u00dcbertragung von Telemetriedaten in Form von Nachrichten zwischen Ger\u00e4ten erm\u00f6glicht, trotz hoher Verz\u00f6gerungen oder beschr\u00e4nkter Netzwerke. Es erm\u00f6glich dem Wechselrichter Inforamtionen an einen Dienst zu senden, die dort abgegriffen werden k\u00f6nnen.","title":"Was ist MQTT"},{"location":"faq-frequently-asked-questions/#welche-mqtt-broker-home-automation-systeme-verwendet-ihr","text":"Home Assistant Openhab InfluxDB","title":"Welche MQTT Broker / Home Automation Systeme verwendet ihr"},{"location":"faq-frequently-asked-questions/#hardware","text":"","title":"Hardware"},{"location":"faq-frequently-asked-questions/#welche-hardware-brauche-ich-fur-die-verschiedenen-software-projekte","text":"Reicht ein ESP8266 mit 1MB oder muss es unbedingt ein ESP8266 mit 4MB sein ? ESP8266 mit 4MB Flash ist empfohlen Raspberry Pi ESP32 mit OpentDTU Arduino Nano (aktuell nicht gepflegt, daher u.a. kein Active PowerLimit)","title":"Welche Hardware brauche ich f\u00fcr die verschiedenen Software Projekte"},{"location":"faq-frequently-asked-questions/#welche-hardware-gibt-es-und-welche-software-lauft-darauf","text":"Hardware Software (Pfad) Arduino nano Ahoy DTU tools/nano ESP8266 Ahoy DTU tools/esp8266 ESP8266 Ahoy DTU tools/HoyDtuSim ESP8266 Ahoy DTU tools/NRF24_SendRcv ESP32 Open DTU tbnobody/OpenDTU Raspberry Pi Ahoy DTU tools/rpi","title":"Welche Hardware gibt es und welche Software l\u00e4uft darauf"},{"location":"faq-frequently-asked-questions/#welches-nrf24l01-modul-verwendet-ihr","text":"Mu\u00df es ein nrf24L01+ sein oder funktioniert auch ein nrf24L01 (ohne Plus) ? nrf24L01+ DollaTek 2Pcs NRF24L01 + PA + LNA Funk-Transceiver-Modul 2.4G Nach den bisherigen Erfahrungen mu\u00df es ein + Modell sein. Mit der NRF24 Bibliothek kann man das Modell mit printDetails() ausgeben lassen. Ich will mir eines bestellen, wo gibt es eine sichere Quelle ? Die Module die aktuell bei AZDelivery (Amazon) und Makershop (ebay) angeboten werden scheinen i.d.R. zu funktionieren.","title":"Welches nRF24L01+ Modul verwendet ihr ?"},{"location":"faq-frequently-asked-questions/#welchen-mikroprozessor-empfehlt-ihr","text":"ESP32 (OpenDTU) oder ESP8266 (Ahoy-DTU) sind beide zu empfehlen, da sie bereits eine WLAN / WiFi Antenne eingebaut haben. Der Unterschied liegt ein wenig am Preis und welche Software man darauf laufen lassen m\u00f6chte. Wer bereits einen Raspberry Pi in Betrieb hat, der nahe genug an den Wechselrichtern ist, kann auch diesen direkt nutzen. Auf dem Raspberry Pi sind \u00c4nderungen am Code nicht immer mit einem Software-Update (Flashen) verbunden. Historisch wurde auch der Arduino nano f\u00fcr erste Scans beim Reverse-Engineering verwendet.","title":"Welchen Mikroprozessor empfehlt ihr ?"},{"location":"faq-frequently-asked-questions/#wie-ist-das-gerat-mit-spannung-zu-versorgen","text":"Stabile Stromversorgung ... Am besten nimmt man ein Netzteil mit mindestens 1A Ausgangsstrom und einem Micro USB Kabel. Am besten nimmt man originale Handyladeger\u00e4te z.B. von Samsung oder auch vom Raspberry. Je besser die Qualit\u00e4t desto stabiler die Spannung und der Strom --> je stabiler der DTU. Es wird empfohlen einen 10/100uF Elko zwischen +5V und GND des NRF24 Moduls zu l\u00f6ten um den entsprechend hohen Strombedarf des Moduls beim Senden besser zu unterst\u00fctzen. Manchmal wird auch empfohlen einen 10/100nF Tantalkondensator dazu parallel zu schalten um die Spannung zu gl\u00e4tten.","title":"Wie ist das Ger\u00e4t mit Spannung zu versorgen"},{"location":"faq-frequently-asked-questions/#software-installation","text":"Die Software f\u00fcr den ESP32 (OpenDTU) ist ein bi\u00dfchen \u00fcbersichtlicher aufgebaut und wird von Thomas B. (@noby) vorbildlich gewartet.","title":"Software / Installation"},{"location":"faq-frequently-asked-questions/#welche-software-gibt-es-und-mit-welcher-hardware-lauft-sie","text":"Ahoy auf ESP8266 l\u00e4uft bei mir mehrfach \"im Produktiv-Einsatz\" seit Wochen. Damit f\u00fcttere ich die InfluxDB. Software for ESP32 to talk to Hoymiles Inverters https://github.com/tbnobody/OpenDTU/ Software for ESP8266, Raspberr https://github.com/grindylow/ahoy https://github.com/DanielR92/ahoy/tree/main/tools/rpi Software (Pfad) Hardware Ahoy DTU tools/nano Arduino nano Ahoy DTU tools/esp8266 ESP8266 Ahoy DTU tools/HoyDtuSim ESP8266 Ahoy DTU tools/NRF24_SendRcv ESP8266 Open DTU tbnobody/OpenDTU ESP32 Ahoy DTU tools/rpi Raspberry Pi","title":"Welche Software gibt es und mit welcher Hardware l\u00e4uft sie"},{"location":"faq-frequently-asked-questions/#bin-files-fur-ahoy-dtu","text":"Wo und wie kommt man direkt ohne Entwicklungsumgebung an die .bin ? Wo liegen die verschiedenen Versionen der .bin\u00b4s ? Den aktuellen Build bekommnt man f\u00fcr den ESP8266 unter: https://nightly.link/lumapu/ahoy/workflows/compile_esp8266/main/esp8266.zip Dort im Bereich Actions findet man den Download, man muss man sich allerdings bei Github anmelden. Ein Release wird aktuell noch nicht gebaut und die BIN Files sind auch im Master Branch mit Vorsicht zu genie\u00dfen. Man sollte ggf. die aktuellsten Commits / Merge Requests kontrollieren bzw. die Issues lesen.","title":"BIN Files f\u00fcr Ahoy-DTU"},{"location":"faq-frequently-asked-questions/#platform-io-installieren","text":"","title":"Platform IO installieren"},{"location":"faq-frequently-asked-questions/#wie-definiere-ich-die-serielle-schnittstelle-fur-den-esp7266esp32","text":"unter Linux Mit upload_port = /dev/ttyUSB0 in der platformio.ini unter [env:d1_mini] und/oder [env:node_mcu_v2] Kommt der Fehler could not open port mu\u00df man noch die Berechtigung anpassen, der Benutzer muss in der dialout Gruppe sein unter Linux. sudo adduser <mein_nutzer> dialout Eventuell muss man sich sogar noch einmal abmelden und wieder anmelden, damit er die Berechtigungen aktualisiert. unter Mac OS unter Windows Treiber installieren COM1:","title":"Wie definiere ich die Serielle Schnittstelle f\u00fcr den ESP7266/ESP32"},{"location":"faq-frequently-asked-questions/#wie-kann-ich-den-esp8266-konfigurieren","text":"Der ESP8266 er\u00f6ffnet einen eigenen AP (wie zum Beispiel die Fritz!Box) Mit diesem muss man sich verbinden wie mit jedem anderen WLAN, dann kann man auf die Einstellungen zugreifen und seine eigenen Zugangsdateien f\u00fcrs Wlan eingeben. http://192.168.178.XXX/setup","title":"Wie kann ich den ESP8266 konfigurieren"},{"location":"faq-frequently-asked-questions/#wo-finde-ich-den-original-source-code-von-hoymiles","text":"https://gitee.com/iotloves/hoymiles-DTU-PRO/ andycao1860-hoymiles-DTU-PRO.zip and 1 more file https://we.tl/t-tn7OWR4VdR","title":"Wo finde ich den original Source Code von Hoymiles"},{"location":"faq-frequently-asked-questions/#welche-experimentellen-software-funktionen-sind-bisher-noch-nicht-im-standard-enthalten-pull-request-merge","text":"SD Card Support https://github.com/grindylow/ahoy/compare/main...stefan123t:ahoy:sd_card Power Limit via mqtt https://github.com/grindylow/ahoy/pull/109 ESP8266 Async WebServer https://github.com/grindylow/ahoy/pull/107","title":"Welche EXPERIMENTELLEN Software Funktionen sind bisher noch nicht im Standard enthalten (Pull Request / Merge)"},{"location":"faq-frequently-asked-questions/#welche-software-funktionen-sind-geplant","text":"State Machine List State Machine Resources EMBED WITH ELLIOT: PRACTICAL STATE MACHINES https://hackaday.com/2015/09/04/embed-with-elliot-practical-state-machines/ Multithreading in C und Arduino http://stefanfrings.de/multithreading_arduino/index.html Using State Machines In Your Designs http://aqdi.com/articles/using-state-machines-in-your-designs-3/ C and C++ Finite State Machine Framework http://block-net.de/Programmierung/cpp/fsm/fsm.html SMC The State Machine Compiler http://smc.sourceforge.net/ Generate production ready source code from UML state diagrams \u2013 and activity diagrams! https://www.sinelabore.de/doku.php Qfsm - A graphical tool for designing finite state machines http://qfsm.sourceforge.net/ Professioneller Arduino Code: Variablen, State-Machine und Klassen https://www.youtube.com/watch?v=MERB1lqqyl8 STATE YOUR INTENTIONS MORE CLEARLY WITH STATE MACHINES https://hackaday.com/2018/04/06/state-your-intentions-more-clearly-with-state-machines/ https://www.youtube.com/watch?v=v8KXa5uRavg Artikel \u00fcber Finite State Machines https://www.mikrocontroller.net/topic/248837","title":"Welche Software Funktionen sind geplant"},{"location":"faq-frequently-asked-questions/#konfiguration","text":"","title":"Konfiguration"},{"location":"faq-frequently-asked-questions/#eintragen-der-seriennummer","text":"Die Seriennummern des/der Wechselrichter findet man auf der R\u00fcckseite des WRs bzw. der Module. Man sollte sich die Seriennummer notieren oder abfotografieren, da man manchmal nach Installation der Module nicht mehr an diese Information kommt.","title":"Eintragen der Seriennummer"},{"location":"faq-frequently-asked-questions/#sn-eintragen-muss-das-ull-stehen-bleiben-im-source","text":"The datasheet specifies the over-the-air packet format: \"Most Significant Byte (MSB) to the left\" (cf [datasheet figure 11][3]) Address := Byte_4, Byte_3, Byte_2, Byte_1, Byte_0 (\"LSByte must be unique\") so 0x1946107301 results in 19 46 10 73 01 \"on the air\". Old-style NRF Libraries take uint64_t addresses. In this case, the correct address to pass to the library would be (uint64_t)0x1946107301ULL . Beispiel direkt im Souce als Kommentar z.B. Format: #define DTU_RADIO_ID ((uint64_t)0x1234567801ULL) #define WR1_RADIO_ID ((uint64_t)0x1946107301ULL) // 0x1946107300ULL = WR1 #define WR2_RADIO_ID ((uint64_t)0x3944107301ULL) // 0x3944107301ULL = WR2","title":"S/N eintragen, muss das \"ULL\" stehen bleiben (im Source) ?"},{"location":"faq-frequently-asked-questions/#wieviele-wechselrichter-unterstutzt-die-software","text":"Ich habe mehr als 3 hoymiles HM-..., wird das auch Unterst\u00fctzt ? (muss im Source ge\u00e4ndert werden - ich weiss - aber neue Nutzer eher nicht)","title":"Wieviele Wechselrichter unterst\u00fctzt die Software"},{"location":"faq-frequently-asked-questions/#warum-antwortet-der-wechselrichter-nicht","text":"Antwortet der HM-.... auch ohne angeschlossene PV Module bzw. Nachts ? Nein, f\u00fcr Nachts muss zum testen ein Netzteil f\u00fcr Gleichspannung angeschlossen werden. Der Wechselrichter l\u00e4\u00dft sich nur bei einer Spannung von > 30V \u00fcber das Funkmodul erreichen.","title":"Warum antwortet der Wechselrichter nicht"},{"location":"getting-started-ESP8266/","text":"Getting Started with an ESP8266 Wire Connections +-----------+ +-----------+ | ESP8266 |--colour--| nRF24L01+ | | | | | | GND |---black--|[GND] | | +3.3V |----red---| VCC | | D4 |---grey---| CE | | D8 |--purple--| CSN | | D5 |---blue---| SCK | | D7 |---green--| MOSI | | D6 |---brown--| MISO | | D3 |--yellow--| IRQ | +-----------+ +-----------+ Fritzing diagrams & schematics * AhoyMiles_bb.png * AhoyMiles_schem.png * AhoyMiles.fzz Libraries to be installed in Arduino IDE: * RF24 * TimeLib Verify & Compile * Connect to WiFi Network ESP AHOY * Use password esp_8266 * Connect to Network settings Setup * WiFi * Enter SSID mynetwork * Enter Password mypassword * Device Host Name * Enter Device Name esp-ahoy * General * Hoymiles Address (e.g. 114173123456) * Choose inverter type * Set individual inverter name * [x] Reboot device after successful save Save","title":"Getting Started with an ESP8266"},{"location":"getting-started-ESP8266/#getting-started-with-an-esp8266","text":"Wire Connections +-----------+ +-----------+ | ESP8266 |--colour--| nRF24L01+ | | | | | | GND |---black--|[GND] | | +3.3V |----red---| VCC | | D4 |---grey---| CE | | D8 |--purple--| CSN | | D5 |---blue---| SCK | | D7 |---green--| MOSI | | D6 |---brown--| MISO | | D3 |--yellow--| IRQ | +-----------+ +-----------+ Fritzing diagrams & schematics * AhoyMiles_bb.png * AhoyMiles_schem.png * AhoyMiles.fzz Libraries to be installed in Arduino IDE: * RF24 * TimeLib Verify & Compile * Connect to WiFi Network ESP AHOY * Use password esp_8266 * Connect to Network settings Setup * WiFi * Enter SSID mynetwork * Enter Password mypassword * Device Host Name * Enter Device Name esp-ahoy * General * Hoymiles Address (e.g. 114173123456) * Choose inverter type * Set individual inverter name * [x] Reboot device after successful save Save","title":"Getting Started with an ESP8266"},{"location":"getting-started-ahoy/","text":"Getting Started with Ahoy Overview On this page, you'll find detailed instructions on how to wire the module of a Wemos D1 mini or ESP32 to the radio module, as well as how to flash it with the latest firmware. This information will enable you to communicate with compatible inverters. You find the full User_Manual here Compatiblity The following inverters are currently supported out of the box: Hoymiles Inverters Status Serie Model comment \u2714\ufe0f MI 300, 600, 1000/1200/\u26a0\ufe0f 1500 4-Channel is not tested yet \u2714\ufe0f HM 300, 350, 400, 600, 700, 800, 1000?, 1200, 1500 \u2714\ufe0f HMS 350, 500, 800, 1000, 1600, 1800, 2000 \u2714\ufe0f HMT 1600, 1800, 2250 \u26a0\ufe0f TSUN TSOL-M350 , TSOL-M400 , TSOL-M800/TSOL-M800(DE) others may work as well (need to be verified). Solenso Inverters: SOL-H350 Things needed If you're interested in building your own AhoyDTU, you'll need a few things to get started. While we've provided a list of recommended boards below, keep in mind that the maker community is constantly developing new and innovative options that we may not have covered in this readme.. For optimal performance, we recommend using a Wemos D1 mini or ESP32 along with a NRF24L01+ breakout board as a bare minimum. However, if you have experience working with other ESP boards, any board with at least 4MBytes of ROM may be suitable, depending on your skills. Just be sure that the NRF24L01+ module you choose includes the \"+\" in its name, as we rely on the 250kbps features that are only provided by the plus-variant. Parts Price D1 ESP8266 Mini WLAN Board Microcontroller 4,40 Euro NRF24L01+ SMD Modul 2,4 GHz Wi-Fi Funkmodul 3,45 Euro 100\u00b5F / 10V Capacitor Kondensator 0,15 Euro Jumper Wire Steckbr\u00fccken Steckbrett weiblich-weiblich 2,49 Euro Total costs 10,34 Euro If you're interested in using our sister project OpenDTU or you want to future-proof your setup, we recommend investing in an ESP32 board that features two CPU cores. As Radio you can also use a NRF24L01+ module with an external antenna. While this option may cost a bit more, it will provide superior performance and ensure compatibility with upcoming developments. Parts Price ESP32 Dev Board NodeMCU WROOM32 WiFi 7,90 Euro NRF24L01+ PA LNA SMA mit Antenne Long 4,50 Euro 100\u00b5F / 10V Capacitor Kondensator 0,15 Euro Jumper Wire Steckbr\u00fccken Steckbrett weiblich-weiblich 2,49 Euro Total costs 14,89 Euro There are fake NRF24L01+ Modules out there Watch out, there are some fake NRF24L01+ Modules out there that seem to use rebranded NRF24L01 Chips (without the +). An example can be found in Issue #230 . You are welcome to add more examples of faked chips. We will add that information here. Some users reported better connection or longer range through more walls when using the \"E01-ML01DP5\" EBYTE 2,4 GHz Wireless Modul nRF24L01 + PA + LNA RF Modul, SMA-K Antenna connector, which has an eye-catching HF cover. But beware: It comes without the antenna! In any case you should stabilize the Vcc power by a capacitor and don't exceed the Amplifier Power Level \"LOW\". Users reporting good connection over 10m through walls / ceilings with Amplifier Power Level \"MIN\". It is not always the bigger the better... Power levels \"HIGH\" and \"MAX\" are meant to wirings where the nRF24 is supplied by an extra 3.3 Volt regulator. The bultin regulator on ESP boards has only low reserves in case WiFi and nRF are sending simultaneously. If you operate additional interfaces like a display, the reserve is again reduced. Wiring things up The NRF24L01+ radio module is connected to the standard SPI pins: SCLK (Signal Clock), MISO (Master In Slave Out) and MOSI (Master Out Slave In) These pins need to be configured in the config.h. Additional, there are 3 pins, which can be set individual: CS (Chip Select), CE (Chip Enable) and IRQ (Interrupt) These pins can be changed from the /setup URL. ESP8266 wiring example on WEMOS D1 This is an example wiring using a Wemos D1 mini. Schematic Symbolic view ESP8266 wiring example on 30pin Lolin NodeMCU v3 This is an example wiring using a NodeMCU V3. Schematic Symbolic view ESP32 wiring example Example wiring for a 38pin ESP32 module Schematic Symbolic view ESP32 GPIO settings CS, CE, IRQ must be set according to how they are wired up. For the diagram above, set the 3 individual GPIOs under the /setup URL as follows: CS D1 (GPIO5) CE D2 (GPIO4) IRQ D0 (GPIO16 - no IRQ!) IMPORTANT: From development version 108/release 0.6.0 onwards, also MISO, MOSI, and SCLK are configurable. On new installations, their defaults are correct for most ESP32 boards. These pins cannot be configured for ESP82xx boards, as this chip cannot move them elsewhere. If you are upgrading an existing install though, you might see that these pins are set to '0' in the web GUI. Communication with the NRF module wont work. For upgrading an existing installations, set MISO=19, MOSI=23, SCLK=18 in the settings. This is the correct default for most ESP32 boards. On ESP82xx, simply saving the settings without changes should suffice. Save and reboot. Flash the Firmware on your Ahoy DTU Hardware Once your Hardware is ready to run, you need to flash the Ahoy DTU Firmware to your Board. You can either build your own using your own configuration or use one of our pre-compiled generic builds. Flash from your browser (easy) The easiest step for you is to flash online. A browser MS Edge or Google Chrome is required. Here you go Compiling your own Version This information suits you if you want to configure and build your own firmware. This code comes to you as a PlatformIO project and can be compiled using the PlatformIO Addon. Visual Studio Code, AtomIDE and other IDE's support the PlatformIO Addon. If you do not want to compile your own build, you can use one of our ready-to-flash binaries. Optional Configuration before compilation number of supported inverters (set to 3 by default) config.h DTU radio id config.h (default = 1234567801) unformatted list in webbrowser /livedata config.h , LIVEDATA_VISUALIZED Alternativly, instead of modifying config.h , config_override_example.h can be copied to config_override.h and customized. config_override.h is excluded from version control and stays local. Using a ready-to-flash binary using nodemcu-pyflasher This information suits you if you just want to use an easy way. download the flash-tool nodemcu-pyflasher download latest release bin-file from ahoy_ open flash-tool and connect the target device to your computer. Set the correct serial port and select the correct *.bin file click on \"Flash NodeMCU\" flash the ESP with the compiled firmware using the UART pins or repower the ESP the ESP will start as access point (AP) if there is no network config stored in its eeprom connect to the AP (password: esp_8266 ), you will be forwarded to the setup page configure your WiFi settings, save, repower check your router or serial console for the IP address of the module. You can try ping the configured device name as well. Once your Ahoy DTU is running, you can use the Over The Air (OTA) capabilities to update your firmware. ! ATTENTION: If you update from a very low version to the newest, please make sure to wipe all flash data! Flashing on Linux with esptool.py (ESP32) install esptool.py if you haven't already. download and extract the latest release bin-file from ahoy_ cd ahoy_v<XXX> && cp *esp32.bin esp32.bin Perhaps you need to replace /dev/ttyUSB0 to match your acual device in the following command. Execute it afterwards: esptool.py --port /dev/ttyUSB0 --chip esp32 --before default_reset --after hard_reset write_flash --flash_mode dout --flash_freq 40m --flash_size detect 0x1000 bootloader.bin 0x8000 partitions.bin 0x10000 esp32.bin Unplug and replug your device. Open a serial monitor (e.g. Putty) @ 115200 Baud. You should see some messages regarding wifi. Connect to your Ahoy DTU When everything is wired up and the firmware is flashed, it is time to connect to your Ahoy DTU. Your Ahoy DTU is very verbose using the Serial Console When connected to your computer, you can open a Serial Console to obtain additional information. This might be useful in case of any troubles that might occur as well as to simply obtain information about the converted values which were read out of the inverter(s). Connect to the Ahoy DTU Webinterface using your Browser After you have sucessfully flashed and powered your Ahoy DTU, you can access it via your Browser. If your Ahoy DTU was able to log into the configured WiFi Network, it will try to obtain an IP-Address from your local DHCP Server (in most cases thats your Router). In case it could not connect to your configured Network, it will provide its own WiFi Network that you can connect to for furter configuration. The WiFi SSID (the WiFi Name) and Passwort is configured in the config.h and defaults to the SSID \" AHOY-DTU \" with the Passwort \" esp_8266 \". The Ahoy DTU will keep that Network open for a certain amount of time (also configurable in the config.h and defaults to 60secs). If nothing connects to it and that time runs up, it will retry to connect to the configured network an so on. If connected to your local Network, you just have to find out the used IP Address or try the default name http://ahoy-dtu/ . In most cases your Router will give you a hint. If you connect to the WiFi the Ahoy DTU opens in case it could not connect to any other Network, the IP-Address of your Ahoy DTU is http://192.168.4.1/ . Just open the IP-Address in your browser. The webinterface has the following abilities: OTA Update (Over The Air Update) Configuration (Wifi, inverter(s), NTP Server, Pinout, MQTT, Amplifier Power Level, Debug) visual display of the connected inverters / modules some statistics about communication (debug) HTTP based Pages To take control of your Ahoy DTU, you can directly call one of the following sub-pages (e.g. http://ahoy-dtu/setup or http://192.168.4.1/setup ). page use output default availability /uptime displays the uptime uf your Ahoy DTU 0 Days, 01:37:34; now: 2022-08-21 11:13:53 yes /reboot reboots the Ahoy DTU yes /erase erases the EEPROM yes /factory resets to the factory defaults configured in config.h yes /setup opens the setup page yes /save yes /cmdstat show stat from the home page yes /visualization displays the information from your converter yes /livedata displays the live data yes /metrics gets live-data for prometheus prometheus metrics from the livedata no - enable via config_override.h /api gets configuration and live-data in JSON format json output from the configuration or livedata yes MQTT command to set the DTU without webinterface Read here Used Libraries Name version License ESP8266WiFi 1.0 LGPL-2.1 DNSServer 1.1.1 LGPL-2.1 SPI 1.0 LGPL-2.1 Hash 1.0 LGPL-2.1 EEPROM 1.0 LGPL-2.1 ESP Async WebServer 1.2.3 LGPL-3.0 ESPAsyncTCP 1.2.2 LGPL-3.0 Time 1.6.1 LGPL-2.1 RF24 1.4.7 GPL-2.0 espMqttClient 1.4.4 MIT ArduinoJson 6.21.3 MIT ToDo See this post","title":"Getting Started with Ahoy"},{"location":"getting-started-ahoy/#getting-started-with-ahoy","text":"","title":"Getting Started with Ahoy"},{"location":"getting-started-ahoy/#overview","text":"On this page, you'll find detailed instructions on how to wire the module of a Wemos D1 mini or ESP32 to the radio module, as well as how to flash it with the latest firmware. This information will enable you to communicate with compatible inverters. You find the full User_Manual here","title":"Overview"},{"location":"getting-started-ahoy/#compatiblity","text":"The following inverters are currently supported out of the box: Hoymiles Inverters Status Serie Model comment \u2714\ufe0f MI 300, 600, 1000/1200/\u26a0\ufe0f 1500 4-Channel is not tested yet \u2714\ufe0f HM 300, 350, 400, 600, 700, 800, 1000?, 1200, 1500 \u2714\ufe0f HMS 350, 500, 800, 1000, 1600, 1800, 2000 \u2714\ufe0f HMT 1600, 1800, 2250 \u26a0\ufe0f TSUN TSOL-M350 , TSOL-M400 , TSOL-M800/TSOL-M800(DE) others may work as well (need to be verified). Solenso Inverters: SOL-H350","title":"Compatiblity"},{"location":"getting-started-ahoy/#things-needed","text":"If you're interested in building your own AhoyDTU, you'll need a few things to get started. While we've provided a list of recommended boards below, keep in mind that the maker community is constantly developing new and innovative options that we may not have covered in this readme.. For optimal performance, we recommend using a Wemos D1 mini or ESP32 along with a NRF24L01+ breakout board as a bare minimum. However, if you have experience working with other ESP boards, any board with at least 4MBytes of ROM may be suitable, depending on your skills. Just be sure that the NRF24L01+ module you choose includes the \"+\" in its name, as we rely on the 250kbps features that are only provided by the plus-variant. Parts Price D1 ESP8266 Mini WLAN Board Microcontroller 4,40 Euro NRF24L01+ SMD Modul 2,4 GHz Wi-Fi Funkmodul 3,45 Euro 100\u00b5F / 10V Capacitor Kondensator 0,15 Euro Jumper Wire Steckbr\u00fccken Steckbrett weiblich-weiblich 2,49 Euro Total costs 10,34 Euro If you're interested in using our sister project OpenDTU or you want to future-proof your setup, we recommend investing in an ESP32 board that features two CPU cores. As Radio you can also use a NRF24L01+ module with an external antenna. While this option may cost a bit more, it will provide superior performance and ensure compatibility with upcoming developments. Parts Price ESP32 Dev Board NodeMCU WROOM32 WiFi 7,90 Euro NRF24L01+ PA LNA SMA mit Antenne Long 4,50 Euro 100\u00b5F / 10V Capacitor Kondensator 0,15 Euro Jumper Wire Steckbr\u00fccken Steckbrett weiblich-weiblich 2,49 Euro Total costs 14,89 Euro","title":"Things needed"},{"location":"getting-started-ahoy/#there-are-fake-nrf24l01-modules-out-there","text":"Watch out, there are some fake NRF24L01+ Modules out there that seem to use rebranded NRF24L01 Chips (without the +). An example can be found in Issue #230 . You are welcome to add more examples of faked chips. We will add that information here. Some users reported better connection or longer range through more walls when using the \"E01-ML01DP5\" EBYTE 2,4 GHz Wireless Modul nRF24L01 + PA + LNA RF Modul, SMA-K Antenna connector, which has an eye-catching HF cover. But beware: It comes without the antenna! In any case you should stabilize the Vcc power by a capacitor and don't exceed the Amplifier Power Level \"LOW\". Users reporting good connection over 10m through walls / ceilings with Amplifier Power Level \"MIN\". It is not always the bigger the better... Power levels \"HIGH\" and \"MAX\" are meant to wirings where the nRF24 is supplied by an extra 3.3 Volt regulator. The bultin regulator on ESP boards has only low reserves in case WiFi and nRF are sending simultaneously. If you operate additional interfaces like a display, the reserve is again reduced.","title":"There are fake NRF24L01+ Modules out there"},{"location":"getting-started-ahoy/#wiring-things-up","text":"The NRF24L01+ radio module is connected to the standard SPI pins: SCLK (Signal Clock), MISO (Master In Slave Out) and MOSI (Master Out Slave In) These pins need to be configured in the config.h. Additional, there are 3 pins, which can be set individual: CS (Chip Select), CE (Chip Enable) and IRQ (Interrupt) These pins can be changed from the /setup URL.","title":"Wiring things up"},{"location":"getting-started-ahoy/#esp8266-wiring-example-on-wemos-d1","text":"This is an example wiring using a Wemos D1 mini.","title":"ESP8266 wiring example on WEMOS D1"},{"location":"getting-started-ahoy/#schematic","text":"","title":"Schematic"},{"location":"getting-started-ahoy/#symbolic-view","text":"","title":"Symbolic view"},{"location":"getting-started-ahoy/#esp8266-wiring-example-on-30pin-lolin-nodemcu-v3","text":"This is an example wiring using a NodeMCU V3.","title":"ESP8266 wiring example on 30pin Lolin NodeMCU v3"},{"location":"getting-started-ahoy/#schematic_1","text":"","title":"Schematic"},{"location":"getting-started-ahoy/#symbolic-view_1","text":"","title":"Symbolic view"},{"location":"getting-started-ahoy/#esp32-wiring-example","text":"Example wiring for a 38pin ESP32 module","title":"ESP32 wiring example"},{"location":"getting-started-ahoy/#schematic_2","text":"","title":"Schematic"},{"location":"getting-started-ahoy/#symbolic-view_2","text":"","title":"Symbolic view"},{"location":"getting-started-ahoy/#esp32-gpio-settings","text":"CS, CE, IRQ must be set according to how they are wired up. For the diagram above, set the 3 individual GPIOs under the /setup URL as follows: CS D1 (GPIO5) CE D2 (GPIO4) IRQ D0 (GPIO16 - no IRQ!) IMPORTANT: From development version 108/release 0.6.0 onwards, also MISO, MOSI, and SCLK are configurable. On new installations, their defaults are correct for most ESP32 boards. These pins cannot be configured for ESP82xx boards, as this chip cannot move them elsewhere. If you are upgrading an existing install though, you might see that these pins are set to '0' in the web GUI. Communication with the NRF module wont work. For upgrading an existing installations, set MISO=19, MOSI=23, SCLK=18 in the settings. This is the correct default for most ESP32 boards. On ESP82xx, simply saving the settings without changes should suffice. Save and reboot.","title":"ESP32 GPIO settings"},{"location":"getting-started-ahoy/#flash-the-firmware-on-your-ahoy-dtu-hardware","text":"Once your Hardware is ready to run, you need to flash the Ahoy DTU Firmware to your Board. You can either build your own using your own configuration or use one of our pre-compiled generic builds.","title":"Flash the Firmware on your Ahoy DTU Hardware"},{"location":"getting-started-ahoy/#flash-from-your-browser-easy","text":"The easiest step for you is to flash online. A browser MS Edge or Google Chrome is required. Here you go","title":"Flash from your browser (easy)"},{"location":"getting-started-ahoy/#compiling-your-own-version","text":"This information suits you if you want to configure and build your own firmware. This code comes to you as a PlatformIO project and can be compiled using the PlatformIO Addon. Visual Studio Code, AtomIDE and other IDE's support the PlatformIO Addon. If you do not want to compile your own build, you can use one of our ready-to-flash binaries.","title":"Compiling your own Version"},{"location":"getting-started-ahoy/#optional-configuration-before-compilation","text":"number of supported inverters (set to 3 by default) config.h DTU radio id config.h (default = 1234567801) unformatted list in webbrowser /livedata config.h , LIVEDATA_VISUALIZED Alternativly, instead of modifying config.h , config_override_example.h can be copied to config_override.h and customized. config_override.h is excluded from version control and stays local.","title":"Optional Configuration before compilation"},{"location":"getting-started-ahoy/#using-a-ready-to-flash-binary-using-nodemcu-pyflasher","text":"This information suits you if you just want to use an easy way. download the flash-tool nodemcu-pyflasher download latest release bin-file from ahoy_ open flash-tool and connect the target device to your computer. Set the correct serial port and select the correct *.bin file click on \"Flash NodeMCU\" flash the ESP with the compiled firmware using the UART pins or repower the ESP the ESP will start as access point (AP) if there is no network config stored in its eeprom connect to the AP (password: esp_8266 ), you will be forwarded to the setup page configure your WiFi settings, save, repower check your router or serial console for the IP address of the module. You can try ping the configured device name as well. Once your Ahoy DTU is running, you can use the Over The Air (OTA) capabilities to update your firmware. ! ATTENTION: If you update from a very low version to the newest, please make sure to wipe all flash data!","title":"Using a ready-to-flash binary using nodemcu-pyflasher"},{"location":"getting-started-ahoy/#flashing-on-linux-with-esptoolpy-esp32","text":"install esptool.py if you haven't already. download and extract the latest release bin-file from ahoy_ cd ahoy_v<XXX> && cp *esp32.bin esp32.bin Perhaps you need to replace /dev/ttyUSB0 to match your acual device in the following command. Execute it afterwards: esptool.py --port /dev/ttyUSB0 --chip esp32 --before default_reset --after hard_reset write_flash --flash_mode dout --flash_freq 40m --flash_size detect 0x1000 bootloader.bin 0x8000 partitions.bin 0x10000 esp32.bin Unplug and replug your device. Open a serial monitor (e.g. Putty) @ 115200 Baud. You should see some messages regarding wifi.","title":"Flashing on Linux with esptool.py (ESP32)"},{"location":"getting-started-ahoy/#connect-to-your-ahoy-dtu","text":"When everything is wired up and the firmware is flashed, it is time to connect to your Ahoy DTU.","title":"Connect to your Ahoy DTU"},{"location":"getting-started-ahoy/#your-ahoy-dtu-is-very-verbose-using-the-serial-console","text":"When connected to your computer, you can open a Serial Console to obtain additional information. This might be useful in case of any troubles that might occur as well as to simply obtain information about the converted values which were read out of the inverter(s).","title":"Your Ahoy DTU is very verbose using the Serial Console"},{"location":"getting-started-ahoy/#connect-to-the-ahoy-dtu-webinterface-using-your-browser","text":"After you have sucessfully flashed and powered your Ahoy DTU, you can access it via your Browser. If your Ahoy DTU was able to log into the configured WiFi Network, it will try to obtain an IP-Address from your local DHCP Server (in most cases thats your Router). In case it could not connect to your configured Network, it will provide its own WiFi Network that you can connect to for furter configuration. The WiFi SSID (the WiFi Name) and Passwort is configured in the config.h and defaults to the SSID \" AHOY-DTU \" with the Passwort \" esp_8266 \". The Ahoy DTU will keep that Network open for a certain amount of time (also configurable in the config.h and defaults to 60secs). If nothing connects to it and that time runs up, it will retry to connect to the configured network an so on. If connected to your local Network, you just have to find out the used IP Address or try the default name http://ahoy-dtu/ . In most cases your Router will give you a hint. If you connect to the WiFi the Ahoy DTU opens in case it could not connect to any other Network, the IP-Address of your Ahoy DTU is http://192.168.4.1/ . Just open the IP-Address in your browser. The webinterface has the following abilities: OTA Update (Over The Air Update) Configuration (Wifi, inverter(s), NTP Server, Pinout, MQTT, Amplifier Power Level, Debug) visual display of the connected inverters / modules some statistics about communication (debug)","title":"Connect to the Ahoy DTU Webinterface using your Browser"},{"location":"getting-started-ahoy/#http-based-pages","text":"To take control of your Ahoy DTU, you can directly call one of the following sub-pages (e.g. http://ahoy-dtu/setup or http://192.168.4.1/setup ). page use output default availability /uptime displays the uptime uf your Ahoy DTU 0 Days, 01:37:34; now: 2022-08-21 11:13:53 yes /reboot reboots the Ahoy DTU yes /erase erases the EEPROM yes /factory resets to the factory defaults configured in config.h yes /setup opens the setup page yes /save yes /cmdstat show stat from the home page yes /visualization displays the information from your converter yes /livedata displays the live data yes /metrics gets live-data for prometheus prometheus metrics from the livedata no - enable via config_override.h /api gets configuration and live-data in JSON format json output from the configuration or livedata yes","title":"HTTP based Pages"},{"location":"getting-started-ahoy/#mqtt-command-to-set-the-dtu-without-webinterface","text":"Read here","title":"MQTT command to set the DTU without webinterface"},{"location":"getting-started-ahoy/#used-libraries","text":"Name version License ESP8266WiFi 1.0 LGPL-2.1 DNSServer 1.1.1 LGPL-2.1 SPI 1.0 LGPL-2.1 Hash 1.0 LGPL-2.1 EEPROM 1.0 LGPL-2.1 ESP Async WebServer 1.2.3 LGPL-3.0 ESPAsyncTCP 1.2.2 LGPL-3.0 Time 1.6.1 LGPL-2.1 RF24 1.4.7 GPL-2.0 espMqttClient 1.4.4 MIT ArduinoJson 6.21.3 MIT","title":"Used Libraries"},{"location":"getting-started-ahoy/#todo","text":"See this post","title":"ToDo"},{"location":"hardware-serial-numbers/","text":"Hardware Serial Numbers Wie ist die Serien-Nummer der Inverter aufgebaut? erste beiden Ziffern: 10 = Gen 2 (MI) und 11 = Gen 3(HM/HMS), 13 = HMT dritte Ziffer: 2 = 1in1, 4 = 2in1 und 6 = 4in1, 8 = 6in1 Modell. vierte Ziffer: 1 = HM, 2 = HMT und \"Special MI\u00b4s\", 4 = HMS die f\u00fcnfte Ziffer ist die Jahreszahl, 1 = 2015, 2=2016, 3=2017, 4=2018, 5=2019, 6=2020, 7=2021, 8=2022, 9=2023, 2024 geht es wohl wieder bei 0 oder 1 los, da ja die Serien von vor 10 Jahren nicht mehr zu der Zeit Produziert werden. die sechste und siebte Ziffer ist die Kalenderwoche in der der WR vom Band lief. Seriennummern Hier eine auf die ersten vier Stellen gek\u00fcrzte Liste aus der u.a. Tabelle Wie man sehen kann sind die Seriennummern nicht ganz eindeutig. Aber es sollte von der Zahl der Anschl\u00fcsse bzw. MPPT die im Wechselrichter verbaut sind eigentlich hinkommen, so da\u00df alle mit der selben Seriennummer zumindest einen \u00e4hnlichen inneren Aufbau haben sollten. Lediglich die maximale Leistung der Kan\u00e4le scheint sie noch zu unterscheiden. Hoymiles-SerialNumbers.xlsx [5.] Name Seriennummer Maximale Leistung MI-100 1011 100 W MI-250 1020 250 W MI-300 1021 Gen2 300 W (1x380Wpp) MI-350 1021 Gen2 350 W (1x440Wpp) MI-400 1021 Gen2 400 W (1x500Wpp) MI-? 1022 Gen3 MI-500 1040 500 W MI-600 1041 Gen2 600 W (2x380Wpp) MI-700 1041 Gen2 700 W (2x440Wpp) MI-800 1041 Gen2 800 W (2x500Wpp) TSOL-M800 1041 800 W MI-600 1042 Gen3 600 W (2x380Wpp) MI-700 1042 Gen3 700 W (2x440Wpp) MI-800 1042 Gen3 800 W (2x500Wpp) MI-1000 1060 1000 W MI-1200 1061 1200 W MI-1500 1061 1500 W MI-? 1062 HM-300 1121 Gen3 300VA (1x380Wpp) HM-350 1121 Gen3 350VA (1x440Wpp) HM-400 1121 Gen3 400VA (1x500Wpp) HM-600 1141 Gen3 600VA (2x380Wpp) HM-700 1141 Gen3 700VA (2x440Wpp) HM-800 1141 Gen3 800VA (2x500Wpp) HM-1000 1161 Gen3 1000VA (4x310Wpp) HM-1200 1161 Gen3 1200VA (4x380Wpp) HM-1500 1161 Gen3 1500VA (4x470Wpp) HM-1500 1165 Gen3 DTU-G100 10D2 DTU-W100 10D3 DTU-Lite-S 10D3 DTU-Lite 10D6 DTU-Pro 10F7 DTU-Pro 10F8 DTU-Pro 10FA DTU-Pro 10FB","title":"Hardware Serial Numbers"},{"location":"hardware-serial-numbers/#hardware-serial-numbers","text":"","title":"Hardware Serial Numbers"},{"location":"hardware-serial-numbers/#wie-ist-die-serien-nummer-der-inverter-aufgebaut","text":"erste beiden Ziffern: 10 = Gen 2 (MI) und 11 = Gen 3(HM/HMS), 13 = HMT dritte Ziffer: 2 = 1in1, 4 = 2in1 und 6 = 4in1, 8 = 6in1 Modell. vierte Ziffer: 1 = HM, 2 = HMT und \"Special MI\u00b4s\", 4 = HMS die f\u00fcnfte Ziffer ist die Jahreszahl, 1 = 2015, 2=2016, 3=2017, 4=2018, 5=2019, 6=2020, 7=2021, 8=2022, 9=2023, 2024 geht es wohl wieder bei 0 oder 1 los, da ja die Serien von vor 10 Jahren nicht mehr zu der Zeit Produziert werden. die sechste und siebte Ziffer ist die Kalenderwoche in der der WR vom Band lief.","title":"Wie ist die Serien-Nummer der Inverter aufgebaut?"},{"location":"hardware-serial-numbers/#seriennummern","text":"Hier eine auf die ersten vier Stellen gek\u00fcrzte Liste aus der u.a. Tabelle Wie man sehen kann sind die Seriennummern nicht ganz eindeutig. Aber es sollte von der Zahl der Anschl\u00fcsse bzw. MPPT die im Wechselrichter verbaut sind eigentlich hinkommen, so da\u00df alle mit der selben Seriennummer zumindest einen \u00e4hnlichen inneren Aufbau haben sollten. Lediglich die maximale Leistung der Kan\u00e4le scheint sie noch zu unterscheiden. Hoymiles-SerialNumbers.xlsx [5.] Name Seriennummer Maximale Leistung MI-100 1011 100 W MI-250 1020 250 W MI-300 1021 Gen2 300 W (1x380Wpp) MI-350 1021 Gen2 350 W (1x440Wpp) MI-400 1021 Gen2 400 W (1x500Wpp) MI-? 1022 Gen3 MI-500 1040 500 W MI-600 1041 Gen2 600 W (2x380Wpp) MI-700 1041 Gen2 700 W (2x440Wpp) MI-800 1041 Gen2 800 W (2x500Wpp) TSOL-M800 1041 800 W MI-600 1042 Gen3 600 W (2x380Wpp) MI-700 1042 Gen3 700 W (2x440Wpp) MI-800 1042 Gen3 800 W (2x500Wpp) MI-1000 1060 1000 W MI-1200 1061 1200 W MI-1500 1061 1500 W MI-? 1062 HM-300 1121 Gen3 300VA (1x380Wpp) HM-350 1121 Gen3 350VA (1x440Wpp) HM-400 1121 Gen3 400VA (1x500Wpp) HM-600 1141 Gen3 600VA (2x380Wpp) HM-700 1141 Gen3 700VA (2x440Wpp) HM-800 1141 Gen3 800VA (2x500Wpp) HM-1000 1161 Gen3 1000VA (4x310Wpp) HM-1200 1161 Gen3 1200VA (4x380Wpp) HM-1500 1161 Gen3 1500VA (4x470Wpp) HM-1500 1165 Gen3 DTU-G100 10D2 DTU-W100 10D3 DTU-Lite-S 10D3 DTU-Lite 10D6 DTU-Pro 10F7 DTU-Pro 10F8 DTU-Pro 10FA DTU-Pro 10FB","title":"Seriennummern"},{"location":"hoymiles-format-description/","text":"Hoymiles Format Description Ziel dieses Projekts Ahoy! A Hoymiles DTU Projekt Anstelle der DTU wollen wir direkt von einem Arduino/RaspberryPi o.\u00e4. die aktuellen Betriebsdaten der Wechselrichter auslesen. Ohne Umweg \u00fcber die \"S-Miles Cloud\". Das Projekt basiert auf den Diskussionen und Erkenntnissen im Mikrocontroller Forum Wechselrichter Hoymiles HM-xxxx 2,4 GhZ Nordic Protokoll? [1.]. About this Document This description aims to document the data format that Hoymiles micro inverters use to communicate their current operating state. The original Hoymiles setup requires connectivity to \"the cloud\", see this section below . With the information documented here, it is possible to interact with a set of Hoymiles micro inverters in a purely \"offline\" way, i.e. without requiring internet access or any connectivity to a \"cloud\". The only required hardware is a Nordic \"NRF24L01+\" wireless module. The ahoy project at AHOY Communications Project [6.] collects software for various platforms, including Arduino and RaspberryPi. Note: Some of the sections in this document are (still) in German. Translations may be provided if and when necessary. Origin, Contributors The information in this document was gathered in a large community effort which started out with this post that started the community effort [1.] on the German mikrocontroller.net [2.] forum. As of April 2022, this effort is still ongoing. Not all details have been documented yet, and not all secrets have been uncovered. Multiple members of the community have already successfully retrieved (and continue to successfully retrieve) data from their Hoymiles micro inverters. Here's a list of some of the early contributors: sorbit: created the original mikrocontroller.net thread Martin (Gast): DTU and RF analysis Hubi: protocol analysis Marcel: initial analysis and much logging and interpretation Pascal A. (pasarn): various datagram fields, crc8 Frank H. (fh_): discovered time_t Thomas B. (tbnobody): protocol analysis, logging Arnaldo G. (arnaldo_g): data capturing Oliver F (of22): protocol analysis, logging Martin G. (petersilie): protocol analysis, logging, RaspberryPi Systemaufbau Ein Setup wie von Hoymiles vorgesehen, sieht wie folgt aus: Eine \"DTU\" kommuniziert mit vielen Wechselrichtern. Die Kommunikation geht immer von der DTU aus: DTU stellt Anfrage und erwartet eine Antwort vom WR. Daf\u00fcr muss die DTU die Adressen (=Seriennummern) aller WR kennen. Diese werden der DTU im Rahmen eines Einrichtungsprozesses beigebracht. ABBILDUNG 1: System\u00fcbersicht ```ditaa {cmd=true args=[\"-E\"]} Nordic \"Enh. Shockburst\" 2.4 GHz \\|/ <-----------------> \\|/ | | +-------+ +-----------+ | DTU | | MI-600 | +-------+ +-----------+-+ | MI-1500 | +-----------+-+ | MI-... | +-----------+ : : ABBILDUNG 1: System\u00fcbersicht ``` Enhanced ShockBurst (ESB) ESB features automatic packet transaction handling for easy implementation of a reliable bidirectional data link. A transaction is a packet exchange between two transceivers, with one transceiver acting as the Primary Receiver (PRX) and the other transceiver acting as the Primary Transmitter (PTX). ABBILDUNG 2: Innerer Aufbau \"DTU\" ditaa {cmd=true args=[\"-E\"]} Nordic WLAN \"Enh. Shockburst\" 2.4 GHz \\|/ \\|/ | | +---------+ +-----------+ | ESP8266 | | NRF24LE1E | +---------+ +-----------+ ^ ^ | | | +----------+ | +-----> | GD32F303 | <-----+ (B) +----------+ (C) ABBILDUNG 2: Innerer Aufbau \"DTU\" Oberseite: GigaDevices GD32F303, Espressif ESP-12F Unterseite: Nordic Semiconductors nRF12LE1E ABBILDUNG 3: Detailansicht GD32F303 - NRF24LE1E ```ditaa {cmd=true args=[\"-E\"]} Nordic \"Enh. Shockburst\" NRF24LE1E 2.4 GHz +------------------+ \\|/ +----------+ | | | | | GD32F303 | <----->| \u00b5C | NRF24L01+ |-------+ +----------+ (C) | | | +------+-----------+ ABBILDUNG 3: Detailansicht GD32F303 - NRF24LE1E #### Detail Oberseite: GigaDevices GD32F303, Winbond 25012 ![DTU-lite-S MCU GigaDevice GD32F303 RET6 CK8FTY JC2108](schematic/dtu_gd32.jpg) #### Detail Unterseite: Nordic Semiconductors nRF12LE1E, 2401C ![DTU-lite-S BLE transceiver Nordic Semiconductors NRF24LE1E2114KB MCU](schematic/dtu_nrf24.jpg) #### Diagramm: Nordic Kommunikations Schema ![DTU-lite-S Kommunikations Schema](schematic/Comm_Schema.png) #### Detail Unterseite: RX/TX zwischen GD32F303 und nRF12LE1E, Testpunkte f\u00fcr SWD Port und USB Schnittstelle ![DTU-lite-S RX/TX](schematic/rx_tx.jpg) #### Diagramm: Test Setup mit Logic Analyser, HackRF und zwei NRf24 Sniffern ![DTU-lite-S Test Setup](schematic/test_setup.png) ## Adressierung Die Seriennummern der DTU und der WR werden wie folgt als Adressen f\u00fcr die Kommunikation verwendet: **Interne Kommunikation**: Die meisten Datenpakete enthalten Quell- und Zieladresse der jeweiligen Gespr\u00e4chspartner. Hier werden 4-Byte-Adressen verwendet, die direkt aus den letzten 8 Stellen der Seriennummer des Wechselrichters bzw. der DTU gewonnen werden: Beispiel: Seriennummer `....72818832` Innerhalb der Pakete auf (C) wird daraus die 4-Byte-Adresse `0x72, 0x81, 0x88, 0x32` gebildet. Das ist die BCD-Darstellung der letzen 8 Dezimalziffern. **NRF24-Kommunikation**: Die zugeh\u00f6rige Shockburst Zieladresse ist \u00e4hnlich, aber die Byte-Reihenfolge wird umgedreht, und es wird ein `0x01`-Byte am Ende erg\u00e4nzt (Shockburst ist auf 5-Byte-Adressen eingestellt). Um eine Nachricht an das Ger\u00e4t mit o.g. Seriennummer zu senden lautet die Shockburst-Zieladresse also (`0x32, 0x88, 0x81, 0x72, 0x01`). **NRF24 addressing scheme**: Over the air, the inverters communicate using the [Nordic \"Enhanced Shockburst\" Protocol][3] configured for 5-byte addresses. The inverter serial number is converted into a \"Shockburst\" address as follows: - encode the final 8 digits of the serial number in BCD format: `0x72, 0x81, 0x88, 0x32` - reverse the order of the bytes: `0x32, 0x88, 0x81, 0x72` - append a byte containing 0x01: `0x32, 0x88, 0x81, 0x72, 0x01` In this example, the resulting \"Shockburst\" address is: 0x3288817201. **Additional example**, this time for inverter with serial number `99973104619`: The datasheet specifies the over-the-air packet format: \"Most Significant Byte (MSB) to the left\" (cf [datasheet figure 11][3]) `Address := Byte_4, Byte_3, Byte_2, Byte_1, Byte_0` (\"LSByte must be unique\") so `0x1946107301` results in `19 46 10 73 01` \"on the wire\" Old-style NRF Libraries take `uint64_t` addresses. In this case, the correct address to pass to the library would be `(uint64_t)0x1946107301ULL`. The [\"Optimized high speed nRF24L01+ driver\"]](https://nrf24.github.io) [4.] actually wants `uint8_t*`, which maybe makes more sense. But apparently it still wants the bytes in order LSB to MSB (even though the chip will then put them out in MSB-to-LSB order. So in this case, the correct sequence of bytes to pass to the library would be `\\x01\\x73\\x10\\x46\\x19`. Figure 4 below is an annotated example of an \"Enhanced Shockburst\" packet as seen on the air. ### ABBILDUNG 4: Enhanced Shockburst On-Air Data Format ```dita {cmd=true args=[\"-E\"]} +----------+--------------------+--------------------+---------------------+------------+ | preamble | dst 5-byte-address | PCF (9-bit) | payload (>=1 bytes) | 2-byte-CRC | +----------+--------------------+--------------------+---------------------+------------+ | | | e.g. 0x0d8: | | | | 0x55 | addr[4]...addr[0] | 0b011011 00 0 | | | | or | MSB ... LSB | len=27 PID nACK | | | | 0xAA | | | | | | | | e.g. 0x0da | | | | | | 0b011011 01 0 | | | | | | len027 PID nACK | | | +----------+--------------------+--------------------+---------------------+------------+ PCF: Packet control field PID: Packet IDentification (to detect/avoid duplicates), cycles through 0...3 FIGURE 4: Enhanced Shockburst On-Air Data Format Nachrichten Initial protocol analysis focused on the data exchanged on link (C) in figure (3). Not all the frames observed on this link will result in an actual RF transmission, and some translation/mangling/processing happens inside the NRF24LE1E, in particular replacement of serial numbers recalculation of CRCs These packets (which are all framed in 0x7e...0x7f bytes) are described in section Encapsulated Packets below. More recent efforts focus mainly on the actual \"Enhanced Shockburst\" packets that are transmitted over the air. These packets are described in section Enhanced Shockburst Payloads , and the information contained in this section is more up to date. Encapsulated Packets These are packets as observed on Link (C) in figure (3). Nachricht: DTU an WR: \"Init\" (?) Nachricht: DTU an WR: \"Init\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- 7E 07 00 00 00 00 00 00 00 00 00 07 7F ^^ ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^ Bedeutung SOF MID WR ser# WR ser# ? CRC8 EOF ? {signal: [ {name:'Clock', wave: 'p...........' }, {name:'Data', wave: 'x345.6.78.9x', data: '7E 07 00000000 00000000 00 07 7F' }, {name:'Bedeutung', wave: 'x345.6.78.9x', data: 'SOF MID WRser# WRser# ? CRC8? EOF' }, {name:'Request', wave: '01.........0' } ], head:{ text:'Nachricht: DTU an WR: \"Init\" (?)', tick:0, every:2 }, foot:{ text:'Nachricht 07', tock:9 }, } Nachricht: DTU an WR: \"Init 2\" (?) Nachricht: DTU an WR: \"Init 2\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- 7E 07 72 81 88 32 72 81 88 32 00 07 7F ^^ ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^ Bedeutung SOF MID DTU ser# DTU ser# ? CRC8 EOF Einheit BCD (letzte 8) BCD (letzte 8) ? ? Beispiel 72818832 72818832 ? {signal: [ {name:'Clock', wave: 'p...........' }, {name:'Data', wave: 'x345.6.78.9x', data: '7E 07 72818832 72818832 00 07 7F' }, {name:'Bedeutung', wave: 'x345.6.78.9x', data: 'SOF MID WRser# WRser# ? CRC8? EOF' }, {name:'Einheit', wave: 'x..5.6.78.x.', data: 'BCD(last8) BCD(last8) ? ?' }, {name:'Beispiel', wave: 'x..5.6.x...x', data: '72818832 72818832' }, {name:'Request', wave: '01.........0' } ], head:{ text:'Nachricht: DTU an WR: \"Init 2\" (?)', tick:0, every:2 }, foot:{ text:'Nachricht 07', tock:9 }, } Nachricht 0x80: DTU an WR: \"Zeit setzen\" (?) Nachricht 0x80: DTU an WR: \"Zeit setzen\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- |<-------------CRC16 'modbus' f\u00fcr CRC_M----------------->| 7E 15 72 22 02 00 72 22 02 00 80 0B 00 62 09 04 9b 00 00 00 00 00 00 00 00 F2 68 F0 7F ^^ ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^^^^^^^^^^ ^^^^^ ^^ ^^ Bedeutung SOF MID WR ser# WR ser# CMD ? TIME (UTC) CRC_M CRC8 EOF Einheit BCD (letzte 8) BCD (letzte 8) ? [s] HI LO Beispiel 72220200 72220200 ? 2022-02-13 13:16:11 {signal: [ {name:'Clock', wave: 'p.......................' }, {name:'', wave: '', data: '' , node: '........a.......b......x' }, {name:'Data', wave: 'x345.6.7892.34567.89x', data: '7E 15 72220200 72220200 80 0B 00 6209049B 0000 0000 0000 0000 F268 F0 7F'}, {name:'Bedeutung', wave: 'x345.6.7892.xxxx7.89x', data: 'SOF MID WRser# WRser# CMD ? ? TIME(UTC) CRC_M CRC8 EOF' }, {name:'Einheit', wave: 'x..5.6.x892.xxxx7.x9x', data: 'BCD(last8) BCD(last8) ? ? [s] HILO' }, {name:'Beispiel', wave: 'x..5.6.x..2.x.......x', data: '72818832 72818832 2022-02-13' }, {name:'Beispiel', wave: 'x.........2.x.......x', data: '13:16:11' }, {name:'Request', wave: '01..................0' } ], edge: [ 'a<->b CRC16 modbus f\u00fcr CRC_M' ], head:{ text:'Nachricht 0x80: DTU an WR: \"Zeit setzen\" (?)', tick:0, every:2 }, foot:{ text:'Nachricht 07', tock:9 }, } Nachricht 0x81: DTU an WR: \"Anfrage DC-Daten\" (?) Nachricht 0x81: DTU an WR: \"Anfrage DC-Daten\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- GD->NRF 7E 15 70 51 43 68 70 51 43 68 81 xx 7F ...... (NOCH NICHT VERIFIZIERT / GESEHEN) ^^^^^^^^^^^ ^^ ^^ ^^ | (wird von CMD CRC8 EOF | NRF ersetzt) | (wird von NRF v v neu berechnet) on-air 15 70 51 43 68 70 53 54 53 81 BA (payload) ^^^^^^^^^^^ ^^^^^^^^^^^ WR ser # DTU ser # {signal: [ {name:'Clock', wave: 'p..........' }, {name:'', wave: '', data: '' }, {name:'Data', wave: 'x345.6.7892.........x', data: '7E 15 70514368 70514368 81 xx 7F ...(NOCH_NICHT_VERIFIZIERT_/_GESEHEN)', node: '......a.c..' }, {name:'', wave: '', data: ''}, {name:'on-air (payload)', wave: 'x.45.6.78x.', data: '15 70514368 70535453 81 BA', node: '......b.d..' }, {name:'Bedeutung', wave: 'x..5.6.789x', data: 'WRser# DTUser# CMD CRC8 EOF' }, {name:'Request', wave: '01........0' } ], edge: [ 'a~>b (wird von NRF ersetzt)', 'c~>d (wird von NRF neu berechnet)' ], head:{ text:'Nachricht 0x81: DTU an WR: \"Anfrage DC-Daten\" (?)', tick:0, every:2 }, foot:{ text:'Nachricht 07', tock:9 }, } Nachricht 0x82: DTU an WR: \"Anfrage AC-Daten\" (?) Nachricht 0x82: DTU an WR: \"Anfrage AC-Daten\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- GD->NRF 7E 15 70 51 43 68 70 51 43 68 82 xx 7F ...... (NOCH NICHT VERIFIZIERT / GESEHEN) ^^^^^^^^^^^ ^^ ^^ ^^ | (wird von CMD CRC8 EOF | NRF ersetzt) | (wird von NRF v v neu berechnet) on-air 15 70 51 43 68 70 53 54 53 82 B9 (payload) ^^^^^^^^^^^ ^^^^^^^^^^^ WR ser # DTU ser # {signal: [ {name:'Clock', wave: 'p..........' }, {name:'', wave: '', data: '' }, {name:'Data', wave: 'x345.6.7892.........x', data: '7E 15 70514368 70514368 81 xx 7F ...(NOCH_NICHT_VERIFIZIERT_/_GESEHEN)', node: '......a.c..' }, {name:'', wave: '', data: ''}, {name:'on-air (payload)', wave: 'x.45.6.78x.', data: '15 70514368 70535453 81 BA', node: '......b.d..' }, {name:'Bedeutung', wave: 'x..5.6.789x', data: 'WRser# DTUser# CMD CRC8 EOF' }, {name:'Request', wave: '01........0' } ], edge: [ 'a~>b (wird von NRF ersetzt)', 'c~>d (wird von NRF neu berechnet)' ], head:{ text:'Nachricht 0x81: DTU an WR: \"Anfrage DC-Daten\" (?)', tick:0, every:2 }, foot:{ text:'Nachricht 07', tock:9 }, } Nachricht 0x83: DTU an WR: \"Anfrage DC-Daten\" (?) Nachricht 0x83: DTU an WR: \"Anfrage DC-Daten\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- GD->NRF 7E 15 70 51 43 68 70 51 43 68 83 xx 7F ...... (NOCH NICHT VERIFIZIERT / GESEHEN) ^^^^^^^^^^^ ^^ ^^ ^^ | (wird von CMD CRC8 EOF | NRF ersetzt) | (wird von NRF v v neu berechnet) on-air 15 70 51 43 68 70 53 54 53 83 B8 (payload) ^^^^^^^^^^^ ^^^^^^^^^^^ WR ser # DTU ser # Nachricht 0x85: DTU an WR: \"???\" (?) Nachricht 0x85: DTU an WR: \"???\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- GD->NRF 7E 15 70 51 43 68 70 51 43 68 85 xx 7F ...... (NOCH NICHT VERIFIZIERT / GESEHEN) ^^^^^^^^^^^ ^^ ^^ ^^ | (wird von CMD CRC8 EOF | NRF ersetzt) | (wird von NRF v v neu berechnet) on-air 15 70 51 43 68 70 53 54 53 85 BE (payload) ^^^^^^^^^^^ ^^^^^^^^^^^ WR ser # DTU ser # Nachricht 0xFF: DTU an WR: \"???\" (?) Nachricht 0xFF: DTU an WR: \"???\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- GD->NRF 7E 15 70 51 43 68 70 51 43 68 FF xx 7F ...... (NOCH NICHT VERIFIZIERT / GESEHEN) ^^^^^^^^^^^ ^^ ^^ ^^ | (wird von CMD CRC8 EOF | NRF ersetzt) | (wird von NRF v v neu berechnet) on-air 15 70 51 43 68 70 53 54 53 FF C4 (payload) ^^^^^^^^^^^ ^^^^^^^^^^^ WR ser # DTU ser # Nachricht 0x01: WR an DTU: \"Aktuelle DC Daten\" (?) Nachricht 0x01: WR an DTU: \"Aktuelle DC Daten\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- 7E 95 72 22 02 00 72 22 02 00 01 00 01 01 4c 03 bd 0c 46 00 b5 00 03 00 05 00 00 BD 7F ^^ ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^ ^^ Bedeutung SOF MID WR ser# WR ser# CMD ? PV1.u PV1.i PV1.p PV2.u PV2.i PV2.p ? CRC8 EOF Einheit BCD (letzte 8) BCD (letzte 8) ? [0.1V] [0.01A] [.1W] [0.1V] [0.01A] [.1W] ? Beispiel 72220200 72220200 ? 33.2V 9.57A 317.2W 18.1V 0.03A 0.5W ? Nachricht 0x02: WR an DTU: \"Aktuelle AC Daten\" (?) Nachricht 0x02: WR an DTU: \"Aktuelle AC Daten\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- 7E 95 72 22 02 00 72 22 02 00 02 28 23 00 00 24 44 00 3C 00 00 09 0F 13 88 0B D5 83 7F ^^ ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^^^^ ^^^^^ ^^^^^ ^^ ^^ Bedeutung SOF MID WR ser# WR ser# CMD ? ? ? AC.u AC.f AC.p CRC8 EOF Einheit BCD (letzte 8) BCD (letzte 8) ? [0.1V] [0.01Hz] [0.1W] Beispiel 72220200 72220200 ? 9284 60 231.9V 50.00Hz 302.9W Nachricht 0x83: WR an DTU (?): \"???\" (nach CMD w\u00e4re das eher auch eine Antwort vom WR?) Nachricht 0x83: WR an DTU (?): \"???\" (nach CMD w\u00e4re das eher auch eine Antwort vom WR?) ---------------------------------------------------------------------------------------------------------------------------------------------- 7E 95 72 22 02 00 72 22 02 00 83 00 03 00 83 03 E8 00 B2 00 0A FD 26 1E 7F ^^ ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^ ^^ Bedeutung SOF MID WR ser# WR ser# CMD ? ? ? ? ? ? CRC8 EOF Einheit BCD (letzte 8) BCD (letzte 8) ? Beispiel 72220200 72220200 ? 131 1000 178 10 Hinweise Die \"on-air (payload)\" Bytes geben nur die Nutzlast der gesendeten Shockburst-Pakete an. Intern enthalten diese Pakete auch die Zieladresse, die L\u00e4nge, eine CRC. Enhanced Shockburst Payloads These are the packets that are exchanged between inverters and DTU via the Nordic \"Enhanced Shockburst\" protocol. Each payload is preceded by a preamble, and terminated by a 16-bit CRC, as described in the Nordic NRF24LE01+ datasheet [3.]. See also figure 4 above. CMD 0x80: DTU -> WR: \"Set time/date\" (?) CMD 0x80: DTU -> WR: \"Set time/date\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- |<-------------CRC16 'modbus' f\u00fcr CRC_M----------------->| 15 72220200 72220200 80 0B 00 62 09 04 9b 00 00 00 00 00 00 00 00 F2 68 F0 ^^ ^^^^^^^^ ^^^^^^^^ ^^ ^^^^^ ^^^^^^^^^^^ ^^^^^ ^^^^^ ^^ Name MID DTU_SER# DTU_SER# CMD uk1 TIME (local) SEQ? CRC_M CRC8 Units see \"addressing\" ? [s-since-epoch] HI LO Example 72220200 72220200 ? 2022-02-13 13:16:11 This message will cause the inverter to transmit a CMD=0x01, CMD=0x02, and, occasionally, also a CMD=0x83 message to the DTU with serial number DTU_SER#. Values of \"0xb0, 0x00\" and \"0x11, 0x00\" have been observed for \"UK1\". Their meaning is unknown. \"SEQ\" was observed to contain increasing numbers when sent by a Hoymiles DTU. In particular, each issued \"command\" (e.g. \"switch inverter on\", \"switch inverter off\") appears to increase this value. A constant value of 0x0000 or 0x0005 appears to work just fine. Repeatedly sending the same TIME information (instead of correctly increasing time) has been shown [1. a)] to result in identical behaviour, the inverter still replies as described above. CMD 0x01: WR -> DTU: \"Current DC data\" (?) (shown for an HM-700 and HM-400) CMD 0x01: WR -> DTU: \"Current DC data\" (?) (shown for an HM-700 and HM-400) ---------------------------------------------------------------------------------------------------------------------------------------------- HM-700 (2-channel): 95 72 22 02 00 72 22 02 00 01 00 01 01 4c 03 bd 0c 46 00 b5 00 03 00 05 00 00 BD 7F ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^ ^^ NameMID WR ser# WR ser# CMD ? PV1.u PV1.i PV1.p PV2.u PV2.i PV2.p ? CRC8 EOF Units BCD (letzte 8) BCD (letzte 8) ? [0.1V] [0.01A] [.1W] [0.1V] [0.01A] [.1W] ? Example 72220200 72220200 ? 33.2V 9.57A 317.2W 18.1V 0.03A 0.5W ? HM-400 (1-channel): byte 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 95 73 10 xx yy 73 10 xx yy 01 00 01 01 9A 00 46 01 21 00 00 FA E6 00 84 09 0C F5 DD BD 7F ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^^^^^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^ ^^ NameMID WR ser# WR ser# CMD ? PV1.u PV1.i PV1.p DC? P total? DC? P day V AC CRC8 EOF Units BCD (letzte 8) BCD (letzte 8) ? [0.1V] [0.01A] [.1W] [0.001kWh] [1Wh] [0.1V] ? Example 7310xxyy 7310xxyy ? 41.0V 0.70A 28.9W 64.23kWh 132Wh 231.6V ? legend PVx.u: DC voltage of panel x PVx.i: DC current of panel x PVx.p: DC power of panel x WR ser#: inverter serial, e.g. 11217310xxyy (HM-400) => 7310xxyy P tot: DC (or AC)? power total (monthly/yearly?) P day: DC (or AC)? power daily V AC: AC voltage The exact meaning of the contents of this message varies depending on inverter type. So far, the following variants have been observed: HM-300/350/400 (single channel): HM-600/700/800 (2-channel): HM-1000/1200/1500 (4-channel): TODO TODO TODO 73109025 73109025 01 00 01 014F 0003 000B 0000 40AE 03AC 08E6 7C ^^^^ ^^^^ ^^^^ ^^^^ ^^^^ 335 3 11 940 2278 33.5V 0.03A 1.1W 940W 22.78kW 95 71603546 71603546 01 00 01 015D 004D 00B3 010C 0270 0001 3419 64 B327 B327 1 ^^^^ ^^^^ ^^^^ ^^^^ ^^^^ 349 77 179 1 13337 34.9V 0.77A 1.79W 1 133.37kW Nachricht 0x02: WR an DTU: \"Aktuelle AC Daten\" (?) Nachricht 0x02: WR an DTU: \"Aktuelle AC Daten\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- 7E 95 72 22 02 00 72 22 02 00 02 28 23 00 00 24 44 00 3C 00 00 09 0F 13 88 0B D5 83 ^^ ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^^^^ ^^^^^ ^^^^^ ^^ Bedeutung SOF MID WR ser# WR ser# CMD ? ? ? AC.u AC.f AC.p CRC8 Einheit BCD (letzte 8) BCD (letzte 8) ? [0.1V] [0.01Hz] [0.1W] Beispiel 72220200 72220200 ? 9284 60 231.9V 50.00Hz 302.9W - The exact meaning of the contents of this message varies depending on inverter type. So far, the following variants have been observed: - until now, message never observed using a HM-400 CMD 0x82: WR -> DTU: \"???\" (?) (shown for an HM-400) CMD 0x82: WR -> DTU: \"???\" (?) (shown for an HM-400) ---------------------------------------------------------------------------------------------------------------------------------------------- HM-400 (1-channel): byte 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 95 73 10 xx yy 73 10 xx yy 82 13 8A 01 1C 00 00 00 0C 03 E8 00 65 00 06 3C 1D 36 9E 8D 1 ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^ ^^ NameMID WR ser# WR ser# CMD Freq P AC ? I AC ? Temp ? ? ? CRC8? EOF? Units BCD (letzte 8) BCD (letzte 8) [0.01Hz] [0.1W] ? [0.01A] ? [0.1\u00b0C] ? ? ? Example 7310xxyy 7310xxyy 50,02Hz 28,40W ? 0,120A ? 10,10\u00b0C ? ? ? legend Freq: frequency of inverter P AC: AC power of inverter I AC: AC current of inverter Temp: temperature of inverter WR ser#: inverter serial, e.g. 11217310xxyy (HM-400) => 7310xxyy Nachricht 0x83: WR an DTU (?): \"???\" (nach CMD w\u00e4re das eher auch eine Antwort vom WR?) Nachricht 0x83: WR an DTU (?): \"???\" (nach CMD w\u00e4re das eher auch eine Antwort vom WR?) ---------------------------------------------------------------------------------------------------------------------------------------------- 95 72 22 02 00 72 22 02 00 83 00 03 00 83 03 E8 00 B2 00 0A FD 26 1E ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^ Bedeutung MID WR ser# WR ser# CMD ? ? ? ? ? ? CRC8 Einheit BCD (letzte 8) BCD (letzte 8) ? Beispiel 72220200 72220200 ? 131 1000 178 10 Legend MID : Message-ID. Antworten haben Bit 7 gesetzt, z.B. Frage 0x15 -> Antwort 0x95 . z.B. Frage 0x07 -> Antwort 0x87 . F\u00fcr Kommunikation GD <-> NRF CMD : Befehl an den WR hat Bit 7 gesetzt 0x80 \"Zeit setzen\" 0x81 \"Anfrage DC-Daten\", erwartete Antwort: 0x01 0x82 \"Anfrage AC-Daten\", erwartete Antwort: 0x02 0x83 \"?\" 0x85 \"?\" 0xFF \"?\" Antworten vom WR haben Bit 7 gel\u00f6scht: 0x01 \"Aktuelle DC-Daten\" 0x02 \"Aktuelle AC-Daten\" SOF : Start-of-Frame 0x7E EOF : End-of-Frame 0x7F CRC8 : CRC8 mit poly=1 init=0 xor=0, f\u00fcr alle Bytes zwischen SOF und CRC8. Beispiel in Python: ```code >>> import crcmod >>> f = crcmod.mkCrcFun(0x101, initCrc=0, xorOut=0) >>> payload = bytes((0x95,0x72,0x22,0x02,0x00,0x72,0x22,0x02,0x00,0x83,0x00,0x03,0x00,0x83,0x03,0xE8,0x00,0xB2,0x00,0x0A,0xFD,0x26)) >>> hex(f(payload)) '0x1e' ``` CRC_M : CRC16 wie f\u00fcr \"Modbus\"-Protokoll, High-Byte gefolgt von Low-Byte Beispiel in Python: >>> import crcmod >>> f = crcmod.predefined.mkPredefinedCrcFun('modbus') >>> payload = bytes((0x0B,0x00,0x62,0x2F,0x45,0x96,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00)) >>> hex(f(payload)) '0x3bd6' TIME : Aktuelle (DTU-)Zeit als Unix time_t (Sekunden seit 1970-01-01) Glossary WR : Wechselrichter (inverter) DTU : Data Terminal Unit (?). Die Hoymiles-Bezeichnung f\u00fcr den Kommunikations-Master. BCD : Binary Coded Decimal Notizen 0x014c = 332 0x03bd = 957 0x0c64 = 3172 0x6209049b = 1644758171 datetime.datetime.utcfromtimestamp(0x6209049b) = datetime.datetime(2022, 2, 13, 13, 16, 11) References The post that started the community effort mikrocontroller.net Nordic NRF24LE01+ datasheet Optimized high speed nRF24L01+ driver documentation Hoymiles-SerialNumbers.xlsx AHOY Communications Project Revision History Datum Autor Version \u00c4nderungen 2022-03-09 Petersilie erste Version 2022-03-10 Petersilie r2 Nachrichten \"02 28 23\" und \"82 00 03\" erg\u00e4nzt. Sauberer ausgerichtet. Python Beispiel f\u00fcr CRC. 2022-03-12 Petersilie r3 Erste on-air Formate hinzu. CMD-IDs hinzu. Neue Nachrichten von arnaldo_g hinzu. \u00dcbersicht hinzu. 2022-03-15 Petersilie r4 Nachricht 0x80: Mystery-Bytes am Ende \"dechiffriert\" 2022-03-16 Petersilie r5 ESP ist ein ESP8266, nicht ESP32 (danke an @tbnobody) 2022-03-27 Petersilie Versionierung ab jetzt via Github. 2022-05-01 isnoAhoy r7 Version als MarkDown formatiert, wavedrom Diagramme, HTML & PDF Export","title":"Hoymiles Format Description"},{"location":"hoymiles-format-description/#hoymiles-format-description","text":"","title":"Hoymiles Format Description"},{"location":"hoymiles-format-description/#ziel-dieses-projekts","text":"Ahoy! A Hoymiles DTU Projekt Anstelle der DTU wollen wir direkt von einem Arduino/RaspberryPi o.\u00e4. die aktuellen Betriebsdaten der Wechselrichter auslesen. Ohne Umweg \u00fcber die \"S-Miles Cloud\". Das Projekt basiert auf den Diskussionen und Erkenntnissen im Mikrocontroller Forum Wechselrichter Hoymiles HM-xxxx 2,4 GhZ Nordic Protokoll? [1.].","title":"Ziel dieses Projekts"},{"location":"hoymiles-format-description/#about-this-document","text":"This description aims to document the data format that Hoymiles micro inverters use to communicate their current operating state. The original Hoymiles setup requires connectivity to \"the cloud\", see this section below . With the information documented here, it is possible to interact with a set of Hoymiles micro inverters in a purely \"offline\" way, i.e. without requiring internet access or any connectivity to a \"cloud\". The only required hardware is a Nordic \"NRF24L01+\" wireless module. The ahoy project at AHOY Communications Project [6.] collects software for various platforms, including Arduino and RaspberryPi. Note: Some of the sections in this document are (still) in German. Translations may be provided if and when necessary.","title":"About this Document"},{"location":"hoymiles-format-description/#origin-contributors","text":"The information in this document was gathered in a large community effort which started out with this post that started the community effort [1.] on the German mikrocontroller.net [2.] forum. As of April 2022, this effort is still ongoing. Not all details have been documented yet, and not all secrets have been uncovered. Multiple members of the community have already successfully retrieved (and continue to successfully retrieve) data from their Hoymiles micro inverters. Here's a list of some of the early contributors: sorbit: created the original mikrocontroller.net thread Martin (Gast): DTU and RF analysis Hubi: protocol analysis Marcel: initial analysis and much logging and interpretation Pascal A. (pasarn): various datagram fields, crc8 Frank H. (fh_): discovered time_t Thomas B. (tbnobody): protocol analysis, logging Arnaldo G. (arnaldo_g): data capturing Oliver F (of22): protocol analysis, logging Martin G. (petersilie): protocol analysis, logging, RaspberryPi","title":"Origin, Contributors"},{"location":"hoymiles-format-description/#systemaufbau","text":"Ein Setup wie von Hoymiles vorgesehen, sieht wie folgt aus: Eine \"DTU\" kommuniziert mit vielen Wechselrichtern. Die Kommunikation geht immer von der DTU aus: DTU stellt Anfrage und erwartet eine Antwort vom WR. Daf\u00fcr muss die DTU die Adressen (=Seriennummern) aller WR kennen. Diese werden der DTU im Rahmen eines Einrichtungsprozesses beigebracht.","title":"Systemaufbau"},{"location":"hoymiles-format-description/#abbildung-1-systemubersicht","text":"```ditaa {cmd=true args=[\"-E\"]} Nordic \"Enh. Shockburst\" 2.4 GHz \\|/ <-----------------> \\|/ | | +-------+ +-----------+ | DTU | | MI-600 | +-------+ +-----------+-+ | MI-1500 | +-----------+-+ | MI-... | +-----------+ : : ABBILDUNG 1: System\u00fcbersicht ```","title":"ABBILDUNG 1: System\u00fcbersicht"},{"location":"hoymiles-format-description/#enhanced-shockburst-esb","text":"ESB features automatic packet transaction handling for easy implementation of a reliable bidirectional data link. A transaction is a packet exchange between two transceivers, with one transceiver acting as the Primary Receiver (PRX) and the other transceiver acting as the Primary Transmitter (PTX).","title":"Enhanced ShockBurst (ESB)"},{"location":"hoymiles-format-description/#abbildung-2-innerer-aufbau-dtu","text":"ditaa {cmd=true args=[\"-E\"]} Nordic WLAN \"Enh. Shockburst\" 2.4 GHz \\|/ \\|/ | | +---------+ +-----------+ | ESP8266 | | NRF24LE1E | +---------+ +-----------+ ^ ^ | | | +----------+ | +-----> | GD32F303 | <-----+ (B) +----------+ (C) ABBILDUNG 2: Innerer Aufbau \"DTU\"","title":"ABBILDUNG 2: Innerer Aufbau \"DTU\""},{"location":"hoymiles-format-description/#oberseite-gigadevices-gd32f303-espressif-esp-12f","text":"","title":"Oberseite: GigaDevices GD32F303, Espressif ESP-12F"},{"location":"hoymiles-format-description/#unterseite-nordic-semiconductors-nrf12le1e","text":"","title":"Unterseite: Nordic Semiconductors nRF12LE1E"},{"location":"hoymiles-format-description/#abbildung-3-detailansicht-gd32f303-nrf24le1e","text":"```ditaa {cmd=true args=[\"-E\"]} Nordic \"Enh. Shockburst\" NRF24LE1E 2.4 GHz +------------------+ \\|/ +----------+ | | | | | GD32F303 | <----->| \u00b5C | NRF24L01+ |-------+ +----------+ (C) | | | +------+-----------+ ABBILDUNG 3: Detailansicht GD32F303 - NRF24LE1E #### Detail Oberseite: GigaDevices GD32F303, Winbond 25012 ![DTU-lite-S MCU GigaDevice GD32F303 RET6 CK8FTY JC2108](schematic/dtu_gd32.jpg) #### Detail Unterseite: Nordic Semiconductors nRF12LE1E, 2401C ![DTU-lite-S BLE transceiver Nordic Semiconductors NRF24LE1E2114KB MCU](schematic/dtu_nrf24.jpg) #### Diagramm: Nordic Kommunikations Schema ![DTU-lite-S Kommunikations Schema](schematic/Comm_Schema.png) #### Detail Unterseite: RX/TX zwischen GD32F303 und nRF12LE1E, Testpunkte f\u00fcr SWD Port und USB Schnittstelle ![DTU-lite-S RX/TX](schematic/rx_tx.jpg) #### Diagramm: Test Setup mit Logic Analyser, HackRF und zwei NRf24 Sniffern ![DTU-lite-S Test Setup](schematic/test_setup.png) ## Adressierung Die Seriennummern der DTU und der WR werden wie folgt als Adressen f\u00fcr die Kommunikation verwendet: **Interne Kommunikation**: Die meisten Datenpakete enthalten Quell- und Zieladresse der jeweiligen Gespr\u00e4chspartner. Hier werden 4-Byte-Adressen verwendet, die direkt aus den letzten 8 Stellen der Seriennummer des Wechselrichters bzw. der DTU gewonnen werden: Beispiel: Seriennummer `....72818832` Innerhalb der Pakete auf (C) wird daraus die 4-Byte-Adresse `0x72, 0x81, 0x88, 0x32` gebildet. Das ist die BCD-Darstellung der letzen 8 Dezimalziffern. **NRF24-Kommunikation**: Die zugeh\u00f6rige Shockburst Zieladresse ist \u00e4hnlich, aber die Byte-Reihenfolge wird umgedreht, und es wird ein `0x01`-Byte am Ende erg\u00e4nzt (Shockburst ist auf 5-Byte-Adressen eingestellt). Um eine Nachricht an das Ger\u00e4t mit o.g. Seriennummer zu senden lautet die Shockburst-Zieladresse also (`0x32, 0x88, 0x81, 0x72, 0x01`). **NRF24 addressing scheme**: Over the air, the inverters communicate using the [Nordic \"Enhanced Shockburst\" Protocol][3] configured for 5-byte addresses. The inverter serial number is converted into a \"Shockburst\" address as follows: - encode the final 8 digits of the serial number in BCD format: `0x72, 0x81, 0x88, 0x32` - reverse the order of the bytes: `0x32, 0x88, 0x81, 0x72` - append a byte containing 0x01: `0x32, 0x88, 0x81, 0x72, 0x01` In this example, the resulting \"Shockburst\" address is: 0x3288817201. **Additional example**, this time for inverter with serial number `99973104619`: The datasheet specifies the over-the-air packet format: \"Most Significant Byte (MSB) to the left\" (cf [datasheet figure 11][3]) `Address := Byte_4, Byte_3, Byte_2, Byte_1, Byte_0` (\"LSByte must be unique\") so `0x1946107301` results in `19 46 10 73 01` \"on the wire\" Old-style NRF Libraries take `uint64_t` addresses. In this case, the correct address to pass to the library would be `(uint64_t)0x1946107301ULL`. The [\"Optimized high speed nRF24L01+ driver\"]](https://nrf24.github.io) [4.] actually wants `uint8_t*`, which maybe makes more sense. But apparently it still wants the bytes in order LSB to MSB (even though the chip will then put them out in MSB-to-LSB order. So in this case, the correct sequence of bytes to pass to the library would be `\\x01\\x73\\x10\\x46\\x19`. Figure 4 below is an annotated example of an \"Enhanced Shockburst\" packet as seen on the air. ### ABBILDUNG 4: Enhanced Shockburst On-Air Data Format ```dita {cmd=true args=[\"-E\"]} +----------+--------------------+--------------------+---------------------+------------+ | preamble | dst 5-byte-address | PCF (9-bit) | payload (>=1 bytes) | 2-byte-CRC | +----------+--------------------+--------------------+---------------------+------------+ | | | e.g. 0x0d8: | | | | 0x55 | addr[4]...addr[0] | 0b011011 00 0 | | | | or | MSB ... LSB | len=27 PID nACK | | | | 0xAA | | | | | | | | e.g. 0x0da | | | | | | 0b011011 01 0 | | | | | | len027 PID nACK | | | +----------+--------------------+--------------------+---------------------+------------+ PCF: Packet control field PID: Packet IDentification (to detect/avoid duplicates), cycles through 0...3 FIGURE 4: Enhanced Shockburst On-Air Data Format","title":"ABBILDUNG 3: Detailansicht GD32F303 - NRF24LE1E"},{"location":"hoymiles-format-description/#nachrichten","text":"Initial protocol analysis focused on the data exchanged on link (C) in figure (3). Not all the frames observed on this link will result in an actual RF transmission, and some translation/mangling/processing happens inside the NRF24LE1E, in particular replacement of serial numbers recalculation of CRCs These packets (which are all framed in 0x7e...0x7f bytes) are described in section Encapsulated Packets below. More recent efforts focus mainly on the actual \"Enhanced Shockburst\" packets that are transmitted over the air. These packets are described in section Enhanced Shockburst Payloads , and the information contained in this section is more up to date.","title":"Nachrichten"},{"location":"hoymiles-format-description/#encapsulated-packets","text":"These are packets as observed on Link (C) in figure (3).","title":"Encapsulated Packets"},{"location":"hoymiles-format-description/#nachricht-dtu-an-wr-init","text":"Nachricht: DTU an WR: \"Init\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- 7E 07 00 00 00 00 00 00 00 00 00 07 7F ^^ ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^ Bedeutung SOF MID WR ser# WR ser# ? CRC8 EOF ? {signal: [ {name:'Clock', wave: 'p...........' }, {name:'Data', wave: 'x345.6.78.9x', data: '7E 07 00000000 00000000 00 07 7F' }, {name:'Bedeutung', wave: 'x345.6.78.9x', data: 'SOF MID WRser# WRser# ? CRC8? EOF' }, {name:'Request', wave: '01.........0' } ], head:{ text:'Nachricht: DTU an WR: \"Init\" (?)', tick:0, every:2 }, foot:{ text:'Nachricht 07', tock:9 }, }","title":"Nachricht: DTU an WR: \"Init\" (?)"},{"location":"hoymiles-format-description/#nachricht-dtu-an-wr-init-2","text":"Nachricht: DTU an WR: \"Init 2\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- 7E 07 72 81 88 32 72 81 88 32 00 07 7F ^^ ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^ Bedeutung SOF MID DTU ser# DTU ser# ? CRC8 EOF Einheit BCD (letzte 8) BCD (letzte 8) ? ? Beispiel 72818832 72818832 ? {signal: [ {name:'Clock', wave: 'p...........' }, {name:'Data', wave: 'x345.6.78.9x', data: '7E 07 72818832 72818832 00 07 7F' }, {name:'Bedeutung', wave: 'x345.6.78.9x', data: 'SOF MID WRser# WRser# ? CRC8? EOF' }, {name:'Einheit', wave: 'x..5.6.78.x.', data: 'BCD(last8) BCD(last8) ? ?' }, {name:'Beispiel', wave: 'x..5.6.x...x', data: '72818832 72818832' }, {name:'Request', wave: '01.........0' } ], head:{ text:'Nachricht: DTU an WR: \"Init 2\" (?)', tick:0, every:2 }, foot:{ text:'Nachricht 07', tock:9 }, }","title":"Nachricht: DTU an WR: \"Init 2\" (?)"},{"location":"hoymiles-format-description/#nachricht-0x80-dtu-an-wr-zeit-setzen","text":"Nachricht 0x80: DTU an WR: \"Zeit setzen\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- |<-------------CRC16 'modbus' f\u00fcr CRC_M----------------->| 7E 15 72 22 02 00 72 22 02 00 80 0B 00 62 09 04 9b 00 00 00 00 00 00 00 00 F2 68 F0 7F ^^ ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^^^^^^^^^^ ^^^^^ ^^ ^^ Bedeutung SOF MID WR ser# WR ser# CMD ? TIME (UTC) CRC_M CRC8 EOF Einheit BCD (letzte 8) BCD (letzte 8) ? [s] HI LO Beispiel 72220200 72220200 ? 2022-02-13 13:16:11 {signal: [ {name:'Clock', wave: 'p.......................' }, {name:'', wave: '', data: '' , node: '........a.......b......x' }, {name:'Data', wave: 'x345.6.7892.34567.89x', data: '7E 15 72220200 72220200 80 0B 00 6209049B 0000 0000 0000 0000 F268 F0 7F'}, {name:'Bedeutung', wave: 'x345.6.7892.xxxx7.89x', data: 'SOF MID WRser# WRser# CMD ? ? TIME(UTC) CRC_M CRC8 EOF' }, {name:'Einheit', wave: 'x..5.6.x892.xxxx7.x9x', data: 'BCD(last8) BCD(last8) ? ? [s] HILO' }, {name:'Beispiel', wave: 'x..5.6.x..2.x.......x', data: '72818832 72818832 2022-02-13' }, {name:'Beispiel', wave: 'x.........2.x.......x', data: '13:16:11' }, {name:'Request', wave: '01..................0' } ], edge: [ 'a<->b CRC16 modbus f\u00fcr CRC_M' ], head:{ text:'Nachricht 0x80: DTU an WR: \"Zeit setzen\" (?)', tick:0, every:2 }, foot:{ text:'Nachricht 07', tock:9 }, }","title":"Nachricht 0x80: DTU an WR: \"Zeit setzen\" (?)"},{"location":"hoymiles-format-description/#nachricht-0x81-dtu-an-wr-anfrage-dc-daten","text":"Nachricht 0x81: DTU an WR: \"Anfrage DC-Daten\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- GD->NRF 7E 15 70 51 43 68 70 51 43 68 81 xx 7F ...... (NOCH NICHT VERIFIZIERT / GESEHEN) ^^^^^^^^^^^ ^^ ^^ ^^ | (wird von CMD CRC8 EOF | NRF ersetzt) | (wird von NRF v v neu berechnet) on-air 15 70 51 43 68 70 53 54 53 81 BA (payload) ^^^^^^^^^^^ ^^^^^^^^^^^ WR ser # DTU ser # {signal: [ {name:'Clock', wave: 'p..........' }, {name:'', wave: '', data: '' }, {name:'Data', wave: 'x345.6.7892.........x', data: '7E 15 70514368 70514368 81 xx 7F ...(NOCH_NICHT_VERIFIZIERT_/_GESEHEN)', node: '......a.c..' }, {name:'', wave: '', data: ''}, {name:'on-air (payload)', wave: 'x.45.6.78x.', data: '15 70514368 70535453 81 BA', node: '......b.d..' }, {name:'Bedeutung', wave: 'x..5.6.789x', data: 'WRser# DTUser# CMD CRC8 EOF' }, {name:'Request', wave: '01........0' } ], edge: [ 'a~>b (wird von NRF ersetzt)', 'c~>d (wird von NRF neu berechnet)' ], head:{ text:'Nachricht 0x81: DTU an WR: \"Anfrage DC-Daten\" (?)', tick:0, every:2 }, foot:{ text:'Nachricht 07', tock:9 }, }","title":"Nachricht 0x81: DTU an WR: \"Anfrage DC-Daten\" (?)"},{"location":"hoymiles-format-description/#nachricht-0x82-dtu-an-wr-anfrage-ac-daten","text":"Nachricht 0x82: DTU an WR: \"Anfrage AC-Daten\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- GD->NRF 7E 15 70 51 43 68 70 51 43 68 82 xx 7F ...... (NOCH NICHT VERIFIZIERT / GESEHEN) ^^^^^^^^^^^ ^^ ^^ ^^ | (wird von CMD CRC8 EOF | NRF ersetzt) | (wird von NRF v v neu berechnet) on-air 15 70 51 43 68 70 53 54 53 82 B9 (payload) ^^^^^^^^^^^ ^^^^^^^^^^^ WR ser # DTU ser # {signal: [ {name:'Clock', wave: 'p..........' }, {name:'', wave: '', data: '' }, {name:'Data', wave: 'x345.6.7892.........x', data: '7E 15 70514368 70514368 81 xx 7F ...(NOCH_NICHT_VERIFIZIERT_/_GESEHEN)', node: '......a.c..' }, {name:'', wave: '', data: ''}, {name:'on-air (payload)', wave: 'x.45.6.78x.', data: '15 70514368 70535453 81 BA', node: '......b.d..' }, {name:'Bedeutung', wave: 'x..5.6.789x', data: 'WRser# DTUser# CMD CRC8 EOF' }, {name:'Request', wave: '01........0' } ], edge: [ 'a~>b (wird von NRF ersetzt)', 'c~>d (wird von NRF neu berechnet)' ], head:{ text:'Nachricht 0x81: DTU an WR: \"Anfrage DC-Daten\" (?)', tick:0, every:2 }, foot:{ text:'Nachricht 07', tock:9 }, }","title":"Nachricht 0x82: DTU an WR: \"Anfrage AC-Daten\" (?)"},{"location":"hoymiles-format-description/#nachricht-0x83-dtu-an-wr-anfrage-dc-daten","text":"Nachricht 0x83: DTU an WR: \"Anfrage DC-Daten\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- GD->NRF 7E 15 70 51 43 68 70 51 43 68 83 xx 7F ...... (NOCH NICHT VERIFIZIERT / GESEHEN) ^^^^^^^^^^^ ^^ ^^ ^^ | (wird von CMD CRC8 EOF | NRF ersetzt) | (wird von NRF v v neu berechnet) on-air 15 70 51 43 68 70 53 54 53 83 B8 (payload) ^^^^^^^^^^^ ^^^^^^^^^^^ WR ser # DTU ser #","title":"Nachricht 0x83: DTU an WR: \"Anfrage DC-Daten\" (?)"},{"location":"hoymiles-format-description/#nachricht-0x85-dtu-an-wr","text":"Nachricht 0x85: DTU an WR: \"???\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- GD->NRF 7E 15 70 51 43 68 70 51 43 68 85 xx 7F ...... (NOCH NICHT VERIFIZIERT / GESEHEN) ^^^^^^^^^^^ ^^ ^^ ^^ | (wird von CMD CRC8 EOF | NRF ersetzt) | (wird von NRF v v neu berechnet) on-air 15 70 51 43 68 70 53 54 53 85 BE (payload) ^^^^^^^^^^^ ^^^^^^^^^^^ WR ser # DTU ser #","title":"Nachricht 0x85: DTU an WR: \"???\" (?)"},{"location":"hoymiles-format-description/#nachricht-0xff-dtu-an-wr","text":"Nachricht 0xFF: DTU an WR: \"???\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- GD->NRF 7E 15 70 51 43 68 70 51 43 68 FF xx 7F ...... (NOCH NICHT VERIFIZIERT / GESEHEN) ^^^^^^^^^^^ ^^ ^^ ^^ | (wird von CMD CRC8 EOF | NRF ersetzt) | (wird von NRF v v neu berechnet) on-air 15 70 51 43 68 70 53 54 53 FF C4 (payload) ^^^^^^^^^^^ ^^^^^^^^^^^ WR ser # DTU ser #","title":"Nachricht 0xFF: DTU an WR: \"???\" (?)"},{"location":"hoymiles-format-description/#nachricht-0x01-wr-an-dtu-aktuelle-dc-daten","text":"Nachricht 0x01: WR an DTU: \"Aktuelle DC Daten\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- 7E 95 72 22 02 00 72 22 02 00 01 00 01 01 4c 03 bd 0c 46 00 b5 00 03 00 05 00 00 BD 7F ^^ ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^ ^^ Bedeutung SOF MID WR ser# WR ser# CMD ? PV1.u PV1.i PV1.p PV2.u PV2.i PV2.p ? CRC8 EOF Einheit BCD (letzte 8) BCD (letzte 8) ? [0.1V] [0.01A] [.1W] [0.1V] [0.01A] [.1W] ? Beispiel 72220200 72220200 ? 33.2V 9.57A 317.2W 18.1V 0.03A 0.5W ?","title":"Nachricht 0x01: WR an DTU: \"Aktuelle DC Daten\" (?)"},{"location":"hoymiles-format-description/#nachricht-0x02-wr-an-dtu-aktuelle-ac-daten","text":"Nachricht 0x02: WR an DTU: \"Aktuelle AC Daten\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- 7E 95 72 22 02 00 72 22 02 00 02 28 23 00 00 24 44 00 3C 00 00 09 0F 13 88 0B D5 83 7F ^^ ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^^^^ ^^^^^ ^^^^^ ^^ ^^ Bedeutung SOF MID WR ser# WR ser# CMD ? ? ? AC.u AC.f AC.p CRC8 EOF Einheit BCD (letzte 8) BCD (letzte 8) ? [0.1V] [0.01Hz] [0.1W] Beispiel 72220200 72220200 ? 9284 60 231.9V 50.00Hz 302.9W","title":"Nachricht 0x02: WR an DTU: \"Aktuelle AC Daten\" (?)"},{"location":"hoymiles-format-description/#nachricht-0x83-wr-an-dtu-nach-cmd-ware-das-eher-auch-eine-antwort-vom-wr","text":"Nachricht 0x83: WR an DTU (?): \"???\" (nach CMD w\u00e4re das eher auch eine Antwort vom WR?) ---------------------------------------------------------------------------------------------------------------------------------------------- 7E 95 72 22 02 00 72 22 02 00 83 00 03 00 83 03 E8 00 B2 00 0A FD 26 1E 7F ^^ ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^ ^^ Bedeutung SOF MID WR ser# WR ser# CMD ? ? ? ? ? ? CRC8 EOF Einheit BCD (letzte 8) BCD (letzte 8) ? Beispiel 72220200 72220200 ? 131 1000 178 10","title":"Nachricht 0x83: WR an DTU (?): \"???\" (nach CMD w\u00e4re das eher auch eine Antwort vom WR?)"},{"location":"hoymiles-format-description/#hinweise","text":"Die \"on-air (payload)\" Bytes geben nur die Nutzlast der gesendeten Shockburst-Pakete an. Intern enthalten diese Pakete auch die Zieladresse, die L\u00e4nge, eine CRC.","title":"Hinweise"},{"location":"hoymiles-format-description/#enhanced-shockburst-payloads","text":"These are the packets that are exchanged between inverters and DTU via the Nordic \"Enhanced Shockburst\" protocol. Each payload is preceded by a preamble, and terminated by a 16-bit CRC, as described in the Nordic NRF24LE01+ datasheet [3.]. See also figure 4 above.","title":"Enhanced Shockburst Payloads"},{"location":"hoymiles-format-description/#cmd-0x80-dtu-wr-set-timedate","text":"CMD 0x80: DTU -> WR: \"Set time/date\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- |<-------------CRC16 'modbus' f\u00fcr CRC_M----------------->| 15 72220200 72220200 80 0B 00 62 09 04 9b 00 00 00 00 00 00 00 00 F2 68 F0 ^^ ^^^^^^^^ ^^^^^^^^ ^^ ^^^^^ ^^^^^^^^^^^ ^^^^^ ^^^^^ ^^ Name MID DTU_SER# DTU_SER# CMD uk1 TIME (local) SEQ? CRC_M CRC8 Units see \"addressing\" ? [s-since-epoch] HI LO Example 72220200 72220200 ? 2022-02-13 13:16:11 This message will cause the inverter to transmit a CMD=0x01, CMD=0x02, and, occasionally, also a CMD=0x83 message to the DTU with serial number DTU_SER#. Values of \"0xb0, 0x00\" and \"0x11, 0x00\" have been observed for \"UK1\". Their meaning is unknown. \"SEQ\" was observed to contain increasing numbers when sent by a Hoymiles DTU. In particular, each issued \"command\" (e.g. \"switch inverter on\", \"switch inverter off\") appears to increase this value. A constant value of 0x0000 or 0x0005 appears to work just fine. Repeatedly sending the same TIME information (instead of correctly increasing time) has been shown [1. a)] to result in identical behaviour, the inverter still replies as described above.","title":"CMD 0x80: DTU -&gt; WR: \"Set time/date\" (?)"},{"location":"hoymiles-format-description/#cmd-0x01-wr-dtu-current-dc-data-shown-for-an-hm-700-and-hm-400","text":"CMD 0x01: WR -> DTU: \"Current DC data\" (?) (shown for an HM-700 and HM-400) ---------------------------------------------------------------------------------------------------------------------------------------------- HM-700 (2-channel): 95 72 22 02 00 72 22 02 00 01 00 01 01 4c 03 bd 0c 46 00 b5 00 03 00 05 00 00 BD 7F ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^ ^^ NameMID WR ser# WR ser# CMD ? PV1.u PV1.i PV1.p PV2.u PV2.i PV2.p ? CRC8 EOF Units BCD (letzte 8) BCD (letzte 8) ? [0.1V] [0.01A] [.1W] [0.1V] [0.01A] [.1W] ? Example 72220200 72220200 ? 33.2V 9.57A 317.2W 18.1V 0.03A 0.5W ? HM-400 (1-channel): byte 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 95 73 10 xx yy 73 10 xx yy 01 00 01 01 9A 00 46 01 21 00 00 FA E6 00 84 09 0C F5 DD BD 7F ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^^^^^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^ ^^ NameMID WR ser# WR ser# CMD ? PV1.u PV1.i PV1.p DC? P total? DC? P day V AC CRC8 EOF Units BCD (letzte 8) BCD (letzte 8) ? [0.1V] [0.01A] [.1W] [0.001kWh] [1Wh] [0.1V] ? Example 7310xxyy 7310xxyy ? 41.0V 0.70A 28.9W 64.23kWh 132Wh 231.6V ? legend PVx.u: DC voltage of panel x PVx.i: DC current of panel x PVx.p: DC power of panel x WR ser#: inverter serial, e.g. 11217310xxyy (HM-400) => 7310xxyy P tot: DC (or AC)? power total (monthly/yearly?) P day: DC (or AC)? power daily V AC: AC voltage The exact meaning of the contents of this message varies depending on inverter type. So far, the following variants have been observed: HM-300/350/400 (single channel): HM-600/700/800 (2-channel): HM-1000/1200/1500 (4-channel): TODO TODO TODO 73109025 73109025 01 00 01 014F 0003 000B 0000 40AE 03AC 08E6 7C ^^^^ ^^^^ ^^^^ ^^^^ ^^^^ 335 3 11 940 2278 33.5V 0.03A 1.1W 940W 22.78kW 95 71603546 71603546 01 00 01 015D 004D 00B3 010C 0270 0001 3419 64 B327 B327 1 ^^^^ ^^^^ ^^^^ ^^^^ ^^^^ 349 77 179 1 13337 34.9V 0.77A 1.79W 1 133.37kW","title":"CMD 0x01: WR -&gt; DTU: \"Current DC data\" (?) (shown for an HM-700 and HM-400)"},{"location":"hoymiles-format-description/#nachricht-0x02-wr-an-dtu-aktuelle-ac-daten_1","text":"Nachricht 0x02: WR an DTU: \"Aktuelle AC Daten\" (?) ---------------------------------------------------------------------------------------------------------------------------------------------- 7E 95 72 22 02 00 72 22 02 00 02 28 23 00 00 24 44 00 3C 00 00 09 0F 13 88 0B D5 83 ^^ ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^^^^ ^^^^^ ^^^^^ ^^ Bedeutung SOF MID WR ser# WR ser# CMD ? ? ? AC.u AC.f AC.p CRC8 Einheit BCD (letzte 8) BCD (letzte 8) ? [0.1V] [0.01Hz] [0.1W] Beispiel 72220200 72220200 ? 9284 60 231.9V 50.00Hz 302.9W - The exact meaning of the contents of this message varies depending on inverter type. So far, the following variants have been observed: - until now, message never observed using a HM-400","title":"Nachricht 0x02: WR an DTU: \"Aktuelle AC Daten\" (?)"},{"location":"hoymiles-format-description/#cmd-0x82-wr-dtu-shown-for-an-hm-400","text":"CMD 0x82: WR -> DTU: \"???\" (?) (shown for an HM-400) ---------------------------------------------------------------------------------------------------------------------------------------------- HM-400 (1-channel): byte 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 95 73 10 xx yy 73 10 xx yy 82 13 8A 01 1C 00 00 00 0C 03 E8 00 65 00 06 3C 1D 36 9E 8D 1 ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^ ^^ NameMID WR ser# WR ser# CMD Freq P AC ? I AC ? Temp ? ? ? CRC8? EOF? Units BCD (letzte 8) BCD (letzte 8) [0.01Hz] [0.1W] ? [0.01A] ? [0.1\u00b0C] ? ? ? Example 7310xxyy 7310xxyy 50,02Hz 28,40W ? 0,120A ? 10,10\u00b0C ? ? ? legend Freq: frequency of inverter P AC: AC power of inverter I AC: AC current of inverter Temp: temperature of inverter WR ser#: inverter serial, e.g. 11217310xxyy (HM-400) => 7310xxyy","title":"CMD 0x82: WR -&gt; DTU: \"???\" (?) (shown for an HM-400)"},{"location":"hoymiles-format-description/#nachricht-0x83-wr-an-dtu-nach-cmd-ware-das-eher-auch-eine-antwort-vom-wr_1","text":"Nachricht 0x83: WR an DTU (?): \"???\" (nach CMD w\u00e4re das eher auch eine Antwort vom WR?) ---------------------------------------------------------------------------------------------------------------------------------------------- 95 72 22 02 00 72 22 02 00 83 00 03 00 83 03 E8 00 B2 00 0A FD 26 1E ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^ Bedeutung MID WR ser# WR ser# CMD ? ? ? ? ? ? CRC8 Einheit BCD (letzte 8) BCD (letzte 8) ? Beispiel 72220200 72220200 ? 131 1000 178 10","title":"Nachricht 0x83: WR an DTU (?): \"???\" (nach CMD w\u00e4re das eher auch eine Antwort vom WR?)"},{"location":"hoymiles-format-description/#legend","text":"MID : Message-ID. Antworten haben Bit 7 gesetzt, z.B. Frage 0x15 -> Antwort 0x95 . z.B. Frage 0x07 -> Antwort 0x87 . F\u00fcr Kommunikation GD <-> NRF CMD : Befehl an den WR hat Bit 7 gesetzt 0x80 \"Zeit setzen\" 0x81 \"Anfrage DC-Daten\", erwartete Antwort: 0x01 0x82 \"Anfrage AC-Daten\", erwartete Antwort: 0x02 0x83 \"?\" 0x85 \"?\" 0xFF \"?\" Antworten vom WR haben Bit 7 gel\u00f6scht: 0x01 \"Aktuelle DC-Daten\" 0x02 \"Aktuelle AC-Daten\" SOF : Start-of-Frame 0x7E EOF : End-of-Frame 0x7F CRC8 : CRC8 mit poly=1 init=0 xor=0, f\u00fcr alle Bytes zwischen SOF und CRC8. Beispiel in Python: ```code >>> import crcmod >>> f = crcmod.mkCrcFun(0x101, initCrc=0, xorOut=0) >>> payload = bytes((0x95,0x72,0x22,0x02,0x00,0x72,0x22,0x02,0x00,0x83,0x00,0x03,0x00,0x83,0x03,0xE8,0x00,0xB2,0x00,0x0A,0xFD,0x26)) >>> hex(f(payload)) '0x1e' ``` CRC_M : CRC16 wie f\u00fcr \"Modbus\"-Protokoll, High-Byte gefolgt von Low-Byte Beispiel in Python: >>> import crcmod >>> f = crcmod.predefined.mkPredefinedCrcFun('modbus') >>> payload = bytes((0x0B,0x00,0x62,0x2F,0x45,0x96,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00)) >>> hex(f(payload)) '0x3bd6' TIME : Aktuelle (DTU-)Zeit als Unix time_t (Sekunden seit 1970-01-01)","title":"Legend"},{"location":"hoymiles-format-description/#glossary","text":"WR : Wechselrichter (inverter) DTU : Data Terminal Unit (?). Die Hoymiles-Bezeichnung f\u00fcr den Kommunikations-Master. BCD : Binary Coded Decimal","title":"Glossary"},{"location":"hoymiles-format-description/#notizen","text":"0x014c = 332 0x03bd = 957 0x0c64 = 3172 0x6209049b = 1644758171 datetime.datetime.utcfromtimestamp(0x6209049b) = datetime.datetime(2022, 2, 13, 13, 16, 11)","title":"Notizen"},{"location":"hoymiles-format-description/#references","text":"The post that started the community effort mikrocontroller.net Nordic NRF24LE01+ datasheet Optimized high speed nRF24L01+ driver documentation Hoymiles-SerialNumbers.xlsx AHOY Communications Project","title":"References"},{"location":"hoymiles-format-description/#revision-history","text":"Datum Autor Version \u00c4nderungen 2022-03-09 Petersilie erste Version 2022-03-10 Petersilie r2 Nachrichten \"02 28 23\" und \"82 00 03\" erg\u00e4nzt. Sauberer ausgerichtet. Python Beispiel f\u00fcr CRC. 2022-03-12 Petersilie r3 Erste on-air Formate hinzu. CMD-IDs hinzu. Neue Nachrichten von arnaldo_g hinzu. \u00dcbersicht hinzu. 2022-03-15 Petersilie r4 Nachricht 0x80: Mystery-Bytes am Ende \"dechiffriert\" 2022-03-16 Petersilie r5 ESP ist ein ESP8266, nicht ESP32 (danke an @tbnobody) 2022-03-27 Petersilie Versionierung ab jetzt via Github. 2022-05-01 isnoAhoy r7 Version als MarkDown formatiert, wavedrom Diagramme, HTML & PDF Export","title":"Revision History"},{"location":"mi-inverter/","text":"MI gewonnenen Information (danke an @rejoe2) Seit Dev. version 0.5.70 unterst\u00fctzt AhoyDTU auch (teilweise mit gewissen Einschr\u00e4nkungen) Inverter der \u00e4lteren MI-Baureihe. Welche MI geh\u00f6ren zu welcher Generation? Inverter mit Seriennummern beginnend mit 10x2 verwenden bereits das 3rd Gen. Protokoll und verhalten sich im \u00fcbrigen wie die neueren HM-Modelle mit gleicher Leistung. Die anderen, \u00e4lteren MI Inverter (Seriennummern beginnend mit 10x1) verwenden eine etwas anders strukturierte Daten\u00fcbertragung (2nd Gen. protocol), und liefern daher nicht genau dieselben Daten, so dass z.B. der Wert f\u00fcr AC power durch die AhoyDTU selbst errechnet werden muss, andere Werte sind teilweise gar nicht verf\u00fcgbar. Welche MI beherschen eine Leistungsbegrenzung? Es scheinen 2nd Gen.-Ger\u00e4te mit einem oder zwei Kan\u00e4le keine M\u00f6glichkeit zur Leistungsbegrenzung anzubieten! F\u00fcr 4-Kanal-Ger\u00e4te gilt die Einschr\u00e4nkung, dass das untere limit mindestens 10% betragen muss (statt 2% f\u00fcr neuere Modele). Wie weit ist aktuell der Stand in Ahoy? Weiter konnte der Code bisher nicht f\u00fcr 4-kanalige MI-Inverter getestet werden. Wer so ein Ger\u00e4t hat, m\u00f6ge bitte in jedem Fall R\u00fcckmeldung auf dem discord-Kanal f\u00fcr MI geben ob bzw. inwieweit alles korrekt funktioniert.","title":"Mi inverter"},{"location":"mi-inverter/#mi-gewonnenen-information-danke-an-rejoe2","text":"Seit Dev. version 0.5.70 unterst\u00fctzt AhoyDTU auch (teilweise mit gewissen Einschr\u00e4nkungen) Inverter der \u00e4lteren MI-Baureihe.","title":"MI gewonnenen Information (danke an @rejoe2)"},{"location":"mi-inverter/#welche-mi-gehoren-zu-welcher-generation","text":"Inverter mit Seriennummern beginnend mit 10x2 verwenden bereits das 3rd Gen. Protokoll und verhalten sich im \u00fcbrigen wie die neueren HM-Modelle mit gleicher Leistung. Die anderen, \u00e4lteren MI Inverter (Seriennummern beginnend mit 10x1) verwenden eine etwas anders strukturierte Daten\u00fcbertragung (2nd Gen. protocol), und liefern daher nicht genau dieselben Daten, so dass z.B. der Wert f\u00fcr AC power durch die AhoyDTU selbst errechnet werden muss, andere Werte sind teilweise gar nicht verf\u00fcgbar.","title":"Welche MI geh\u00f6ren zu welcher Generation?"},{"location":"mi-inverter/#welche-mi-beherschen-eine-leistungsbegrenzung","text":"Es scheinen 2nd Gen.-Ger\u00e4te mit einem oder zwei Kan\u00e4le keine M\u00f6glichkeit zur Leistungsbegrenzung anzubieten! F\u00fcr 4-Kanal-Ger\u00e4te gilt die Einschr\u00e4nkung, dass das untere limit mindestens 10% betragen muss (statt 2% f\u00fcr neuere Modele).","title":"Welche MI beherschen eine Leistungsbegrenzung?"},{"location":"mi-inverter/#wie-weit-ist-aktuell-der-stand-in-ahoy","text":"Weiter konnte der Code bisher nicht f\u00fcr 4-kanalige MI-Inverter getestet werden. Wer so ein Ger\u00e4t hat, m\u00f6ge bitte in jedem Fall R\u00fcckmeldung auf dem discord-Kanal f\u00fcr MI geben ob bzw. inwieweit alles korrekt funktioniert.","title":"Wie weit ist aktuell der Stand in Ahoy?"},{"location":"prometheus_ep_description/","text":"Prometheus Endpoint Metrics available for AhoyDTU device, inverters and channels. Prometheus metrics provided at /metrics . Labels Label name Description version current installed version of AhoyDTU image currently not used devicename Device name from setup name Inverter name from setup serial Serial number of inverter inverter Inverter name from setup channel Channel (Module) name from setup. Label only available if max power level of module is set to non-zero. Be sure to have a cannel name set in configuration. Exported Metrics Metric name Type Description Labels ahoy_solar_info Gauge Information about the AhoyDTU device version, image, devicename ahoy_solar_uptime Counter Seconds since boot of the AhoyDTU device devicename ahoy_solar_rssi_db Gauge Quality of the Wifi STA connection devicename ahoy_solar_inverter_info Gauge Information about the configured inverter(s) name, serial ahoy_solar_inverter_enabled Gauge Is the inverter enabled? inverter ahoy_solar_inverter_is_available Gauge is the inverter available? inverter ahoy_solar_inverter_is_producing Gauge Is the inverter producing? inverter ahoy_solar_U_AC_volt Gauge AC voltage of inverter [V] inverter ahoy_solar_I_AC_ampere Gauge AC current of inverter [A] inverter ahoy_solar_P_AC_watt Gauge AC power of inverter [W] inverter ahoy_solar_Q_AC_var Gauge AC reactive power[var] inverter ahoy_solar_F_AC_hertz Gauge AC frequency [Hz] inverter ahoy_solar_PF_AC Gauge AC Power factor inverter ahoy_solar_Temp_celsius Gauge Temperature of inverter inverter ahoy_solar_ALARM_MES_ID Gauge Alarm message index of inverter inverter ahoy_solar_LastAlarmCode Gauge Last alarm code from inverter inverter ahoy_solar_YieldDay_wattHours Counter Energy converted to AC per day [Wh] inverter ahoy_solar_YieldTotal_kilowattHours Counter Energy converted to AC since reset [kWh] inverter ahoy_solar_P_DC_watt Gauge DC power of inverter [W] inverter ahoy_solar_Efficiency_ratio Gauge ration AC Power over DC Power [%] inverter ahoy_solar_U_DC_volt Gauge DC voltage of channel [V] inverter, channel ahoy_solar_I_DC_ampere Gauge DC current of channel [A] inverter, channel ahoy_solar_P_DC_watt Gauge DC power of channel [P] inverter, channel ahoy_solar_YieldDay_wattHours Counter Energy converted to AC per day [Wh] inverter, channel ahoy_solar_YieldTotal_kilowattHours Counter Energy converted to AC since reset [kWh] inverter, channel ahoy_solar_Irradiation_ratio Gauge ratio DC Power over set maximum power per channel [%] inverter, channel ahoy_solar_radio_rx_success Gauge NRF24 statistic ahoy_solar_radio_rx_fail Gauge NRF24 statistic ahoy_solar_radio_rx_fail_answer Gauge NRF24 statistic ahoy_solar_radio_frame_cnt Gauge NRF24 statistic ahoy_solar_radio_tx_cnt Gauge NRF24 statistic","title":"Prometheus Endpoint"},{"location":"prometheus_ep_description/#prometheus-endpoint","text":"Metrics available for AhoyDTU device, inverters and channels. Prometheus metrics provided at /metrics .","title":"Prometheus Endpoint"},{"location":"prometheus_ep_description/#labels","text":"Label name Description version current installed version of AhoyDTU image currently not used devicename Device name from setup name Inverter name from setup serial Serial number of inverter inverter Inverter name from setup channel Channel (Module) name from setup. Label only available if max power level of module is set to non-zero. Be sure to have a cannel name set in configuration.","title":"Labels"},{"location":"prometheus_ep_description/#exported-metrics","text":"Metric name Type Description Labels ahoy_solar_info Gauge Information about the AhoyDTU device version, image, devicename ahoy_solar_uptime Counter Seconds since boot of the AhoyDTU device devicename ahoy_solar_rssi_db Gauge Quality of the Wifi STA connection devicename ahoy_solar_inverter_info Gauge Information about the configured inverter(s) name, serial ahoy_solar_inverter_enabled Gauge Is the inverter enabled? inverter ahoy_solar_inverter_is_available Gauge is the inverter available? inverter ahoy_solar_inverter_is_producing Gauge Is the inverter producing? inverter ahoy_solar_U_AC_volt Gauge AC voltage of inverter [V] inverter ahoy_solar_I_AC_ampere Gauge AC current of inverter [A] inverter ahoy_solar_P_AC_watt Gauge AC power of inverter [W] inverter ahoy_solar_Q_AC_var Gauge AC reactive power[var] inverter ahoy_solar_F_AC_hertz Gauge AC frequency [Hz] inverter ahoy_solar_PF_AC Gauge AC Power factor inverter ahoy_solar_Temp_celsius Gauge Temperature of inverter inverter ahoy_solar_ALARM_MES_ID Gauge Alarm message index of inverter inverter ahoy_solar_LastAlarmCode Gauge Last alarm code from inverter inverter ahoy_solar_YieldDay_wattHours Counter Energy converted to AC per day [Wh] inverter ahoy_solar_YieldTotal_kilowattHours Counter Energy converted to AC since reset [kWh] inverter ahoy_solar_P_DC_watt Gauge DC power of inverter [W] inverter ahoy_solar_Efficiency_ratio Gauge ration AC Power over DC Power [%] inverter ahoy_solar_U_DC_volt Gauge DC voltage of channel [V] inverter, channel ahoy_solar_I_DC_ampere Gauge DC current of channel [A] inverter, channel ahoy_solar_P_DC_watt Gauge DC power of channel [P] inverter, channel ahoy_solar_YieldDay_wattHours Counter Energy converted to AC per day [Wh] inverter, channel ahoy_solar_YieldTotal_kilowattHours Counter Energy converted to AC since reset [kWh] inverter, channel ahoy_solar_Irradiation_ratio Gauge ratio DC Power over set maximum power per channel [%] inverter, channel ahoy_solar_radio_rx_success Gauge NRF24 statistic ahoy_solar_radio_rx_fail Gauge NRF24 statistic ahoy_solar_radio_rx_fail_answer Gauge NRF24 statistic ahoy_solar_radio_frame_cnt Gauge NRF24 statistic ahoy_solar_radio_tx_cnt Gauge NRF24 statistic","title":"Exported Metrics"},{"location":"protocol/","text":"Protokoll Welche Kan\u00e4le werden f\u00fcr Senden / Empfangen verwendet Soviel ich wei\u00df haben die nrf24l01 nur bis zu 126 Kan\u00e4le. // Depending on the program, the module can work on 2403, 2423, 2440, 2461 or 2475MHz. // Channel List 2403, 2423, 2440, 2461, 2475MHz Senden Kanal ~~2.403, 2.423,~~ 2.440, ~~2.461, 2.475~~ GHz Empfangen Kanal 2.403, 2.423, 2.440, 2.461, 2.475 GHz Was ist Channel Hopping Channel Hopping Empfangen, auf allen Kan\u00e4len Senden, meist auf Kanal 2,403 GHz ich wurde gerade hierauf verwiesen: https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk51.v9.0.0%2Fgzll_02_user_guide.html&cp=4_1_0_5_0 Kann es sein das dieses Gazell unser Channel hopping ist? Auch wenn sich oben genannte Doku auf einen nRF52833 bezieht steht bei den Features: Backward compatible with legacy nRF24L Series Gazell. hier scheint wohl so eine Implementierung des gzll Protokolls zu sein https://github.com/wangdong/cpod/blob/master/lib/nrf24/gazell/common/gzll.c Leider kann das wohl die nRF24 lib nicht. Das Kommunikationsschema von Gazell sieht aber IMHO anders aus. Das ist Device-getriggert und der Host lauscht erstmal nur und antwortet auf Anfragen der Devices. Insofern m\u00fcssten die HMs von sich aus auf einem Anker-Kanal \"ungefragt\" vor sich hin senden. Das tun sie aber nach aktuellem Kenntnisstand nicht, sondern antworten auf Anfragen des Hosts. Das Kommunikationsschema stellt sich f\u00fcr mich eher \"klassisch\" dar, also Anfrage Host->Device, dann Antwort Device->Host. Die max. Anzahl der f\u00fcr die DTUs spezifizierten \"Solarmodule\" ist mit 99 auch deutlich h\u00f6her, als die f\u00fcr Gazell maximal spezifizierten 8 Teilnehmer. zu den genutzten Frequenzen. Bei meinem HM-600 ist es immer so: Wenn ich ein 80 Telegramm sende auf 2403, dann antwortet der WR mit den Antworten 01,02,83 auf den m\u00f6glichen Frequenzen 2423,2440,2461 MHz. also bei TX 2403, Antworten auf 2423,2440,2461 bei TX 2423, Antworten auf 2403,2440,2475 bei TX 2440, Antworten auf 2403,2423,2475 bei TX 2461, Antworten auf 2403,2423,2475 bei TX 2475, Antworten auf 2403,2423,2440 Wenn man die m\u00f6glichen Frequenzen scannt nach dem Senden, dann empf\u00e4ngt man alle Antworten. Andere Antworten als 01,02,83 habe ich bisher nie empfangen. Wie sehen Kommandos oder gesendete / empfangene Frames aus 0x7E 0x15 0x76 0x54 0x32 0x10 0x78 0x56 0x34 0x12 0x80 0x0B 0x00 0xXY .. [ 0x12 34 ] 0xCD 0x7F <SOF> <Cmd> <WR Serial Id> <DTU Serial Id> <Frm> <SubCmd> <Rev> <User data> [ <CRC16> ] <CRC8> <EOF> Was ist eine SingleFrameID / sind MultiFrameIDs Single Frame ID Die Single Frame ID ist 0x80 Multi Frame ID Multi Frame IDs werden f\u00fcr Nachrichten >12 Byte Payload verwendet. Multi Frame IDs beginnen mit 0x01 , 0x02 , ..., das letzte Paket enth\u00e4lt die Ende-Kennung 0x8N ( 0x80 | 0x0N Frame ID). Es darf also maximal 0x7F < 127 Pakete in einer Nachricht / Payload oder 1524 Bytes geben. Welche Pr\u00fcfsummen (CRC = Cyclic Redundancy Check) gibt es und \u00fcber welchen Teil der Nachrichten werden sie gebildet |<-------------------------------------------------------CRC8----------------------------------------------->| |<-------------CRC16 'modbus' f\u00fcr CRC_M----------------->| 7E 15 72 22 02 00 72 22 02 00 80 0B 00 62 09 04 9b 00 00 00 00 00 00 00 00 F2 68 F0 7F ^^ ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^^^^^^^^^^ ^^^^^ ^^ ^^ Bedeutung SOF MID WR ser# WR ser# CMD ? TIME (UTC) CRC_M CRC8 EOF Wie wird die CRC16 bzw. CRC-Modus berechnet CRC-Berechnung, Einstellungen f\u00fcr HxD Erzeuge Pr\u00fcfsummen Verf\u00fcgbare Algorithmen: Benutzerdefiniertes CRC (16-Bit) (*) Markierte Daten Benutzerdefiniertes CRC... Benutzerdefiniertes CRC Bitbreite: (*) 16 Polynom: 8005 Startwert: FFFF Ausgabe XOR: 0000 Reflexion: [x] Eingabe [x] Ausgabe Ok Die CRC16 geht mit folgenden Einstellungen: CRC16 CRC width Bit length: (*) CRC-16 CRC parametrization (*) Custom CRC detailed parameters Input reflected: [ ] Result reflected: [x] Polynomial: 0x8005 Initial Value: 0xFFFF Final Xor Value: 0x0000 CRC Input Data (*) Bytes 0x00 0x00 Result CRC value: 0xB001 Oder kurz https://crccalc.com/?crc=0x0000&method=CRC-16/MODBUS&datatype=hex&outtype=0 CRC-16 \u00fcber die Daten nach der MultiFrameID berechnen: for ( i = 10 ; i < 24 ; i ++ ) { if (( i - 10 ) % 2 == 1 ) { TempCrc = ( u16 )( temp_dat [ i - 1 ] << 8 ) | ( temp_dat [ i ]); DatCrc = CalcCRC16t ( TempCrc , DatCrc ); } } temp_dat [ 24 ] = ( u8 )( DatCrc >> 8 ); temp_dat [ 25 ] = ( u8 )( DatCrc ); CRC16_MODBUS_POLYNOM 0xA001 ist in crc.h definiert, das ist wohl ein reversed CRC-16-IBM Polynomial. Wird u.a. f\u00fcr Bisync, Modbus , USB, ANSI X3.28, many others; also known as CRC-16 and CRC-16-ANSI verwendet. Wie wird die CRC8 berechnet Die CRC8 l\u00e4\u00dft sich z.B. auf http://www.sunshine2k.de/coding/javascript/crc/crc_js.html berechnen: CRC8 CRC width Bit length: (*) CRC-8 CRC parametrization (*) Custom CRC detailed parameters Input reflected: [ ] Result reflected: [ ] Polynomial: 0x01 Initial Value: 0x00 Final Xor Value: 0x00 CRC Input Data (*) Bytes 0x51 0x81 0x10 0x15 0x07 0x81 0x10 0x15 0x07 0x81 0x00 0x00 0xB0 0x01 Result CRC value: 0x61 Oder ganz einfach mit https://crccalc.com/?crc=0x518110150781101507810000B001&method=CRC-8/ITU&datatype=hex&outtype=0 CRC8 \u00fcber alles berechnen temp_dat [ 26 ] = Get_crc_xor (( u8 * ) temp_dat , 26 ); #define CRC8_INIT 0x00 #define CRC8_POLY 0x01 #include \"crc.h\" uint8_t crc8 ( uint8_t buf [], uint8_t len ) { uint8_t crc = CRC8_INIT ; for ( uint8_t i = 0 ; i < len ; i ++ ) { crc ^= buf [ i ]; for ( uint8_t b = 0 ; b < 8 ; b ++ ) { crc = ( crc << 1 ) ^ (( crc & 0x80 ) ? CRC8_POLY : 0x00 ); } } return crc ; } Wie kann man einen Zeitstempel berechnen 0x627b69fe = 1652255230 $ date --date = '@1652255230' Wed 11 May 2022 09 :47:10 AM CEST 62D80183 ist der Timestamp im UNIX Epoch Format: $ date --date = \"@ $( echo 'ibase=16; 62D80183' | bc ) \" '+%F %H:%M:%S' 2022 -07-20 15 :22:11 Geht auch umgekehrt: $ echo \"obase=16; $( date --date = '2022-07-01 00:00:00' +%s ) \" | bc 62BE1CE0 bash commands mal in alias einbauen^^ $ date --date = \"@ $( echo 'ibase=16; 62D80707' | bc ) \" '+%F %H:%M:%S' 2022 -07-20 14 :45:43 Was sind Backward/ForwardSubstitution ForwardSubstitution und BackwardSubsitution sind eine Escape- und Unescape-Verfahren f\u00fcr die nRF24 Schnittstelle. Da die Bytes Start of Frame 0x7E und End of Frame 0x7F reservierte Zeichen sind mu\u00df ggf. deren Auftreten ersetzt werden. Da 0x7E und 0x7F Steuerzeichen (Start Of Frame und End Of Frame) sind m\u00fcssen diese Escaped werden. Daf\u00fcr muss das Zeichen 0x7D herhalten, daher muss es auch Escaped werden. R\u00fcckw\u00e4rts gehts eben genau umgekehrt. Dies erfolgt anhand folgender \u00dcbersetzungstabelle: Backward ForwardSubstitution 0x7D 0x7D5D 0x7E 0x7D5E 0x7F 0x7D5F Hier wird 0x7D5F anstelle von 0x7F bzw. 0x7D5E anstelle von 0x7E und 0x7D5D anstelle von 0x7D verwendet. Ich hatte mich schon gewundert warum manche Pakete l\u00e4nger sind als andere =^D Welche Kommandos (MainCmd) und Sub Kommandos (SubCmd) gibt es ? MainCmd: 0x51 DEVCONTROL_ALL SubCmd / Control Type: Type_TurnOff = 0x01 + 0x00 wegen den Bitshifts bei der \u00dcbergabe des Parameters ? Verbindungsstatus HM 7E 06 81101507 81101507 00 06 7F 7E 06 81101507 81101507 00 06 7F Verbindungsstatus MI 7E 06 63500316 63500316 00 06 7F // MainCmd REQ_RF_SVERSISON 0x06 7E 06 63500316 63500316 00 06 7F 7E 06 63500316 63500316 00 06 7F Autoscan und Scan nach dem MI 7E 01 73600117 73600117 00 01 7F // MainCmd CHANGE_MOD_2M_250K 0x01 Change Baud rate to 250kHz, SubCmd = 0x00 Autoscan und Scan nach dem MI 7E 02 63500316 63500316 00 02 7F // MainCmd BROADCAST 0x02, SubCmd = 0x00 Suche nach HM-WR ID aus dem System: 7E 02 81101507 81101507 00 02 7F // MainCmd BROADCAST 0x02, SubCmd = 0x00 51 63500316 63500316 5A5A 34 0C60 09 52 3168 // MainCmd CONTROL_LOCK_MI__LIMIT_POWER_ONOFF 0x51, SubCmd CONTROL_LIMIT_POWER_SUB 0x5A5A danke f\u00fcr die Traces F\u00fcr MI-WR: MainCmd: 0x01 CHANGE_MOD_2M_250K 0x02 BROADCAST 0x06 REQ_RF_SVERSISON 0x07 REQ_RF_RVERSISON mit SubCmd = 0x00 alle in UsartNrf_Send_NetCmdToNrfCmd(). 0x0F REQ_VERSISON in UsartNrf_Send_PackNrfCmd() bzw. UsartNrf_Send_PackBaseCommand() Ausgewertet wird bei 0x81 ANSWER_CHANGE_MOD_2M_250K direkt in UsartNrf_Process_Loop() und 0x02 BROADCAST in UsartNrf_Process_Inverter_NetCmd_SearchId() 0x86 ANSWER_REQ_RF_SVERSISON in UsartNrf_Process_Inverter_Version() bzw. UsartNrf_Process_Inverter_Version_InverterRf 0x87 ANSWER_REQ_RF_RVERSISON in UsartNrf_Process_Inverter_Version_DtuRf(), 0x8F ANSWER_REQ_VERSISON in UsartNrf_Process_Version_Inverter(), F\u00fcr den HM-WR: UsartNrf3_Send_Mi_Nrf_VER() mit temp_dat[0] = 0x06 (= MainCmd) die Auswertung erfolgt in UsartNrf_Process_Inverter_Version_InverterRf() Seriennummer Deiner DTU-PRO posten, damit ich mir mal die CRC Pr\u00fcfsummen ansehen kann. Ich bekomme die n\u00e4mlich noch nicht sauber hin. 10F873600117 Die m\u00fcssten noch in die Markdown Dokumentation auf grindylow-ahoy/docs/hoymiles-format-description.md aber ich w\u00fcrde das vermutlich erst machen, wenn ich die anderen Kommandos ebenfalls verstanden habe. Wenn Du willst kannst Du es aber gerne schon mal anfangen / weitermachen. Ich habe vor einiger Zeit auch schon mal angefangen mit wavedrom einzelne Pakete bzw. Kommandos zu dokumentieren. Aber bisher war ja au\u00dfer dem 0x0B RealTimeRunData_Debug bzw. \"Zeit setzen\" und damit Werte abfragen noch nicht so viel bekannt. Traces der DTU Pro Verschiedene Leistungen, ganzes File folgt in K\u00fcrze, das ist unformatiert zum Schluss hin ist es maximale Leistung, davor etwa 350-450W schwankend 63500316 ist der MI-600 (Klon) @Ichirou 81101507 ist der HM-1500 @Ichirou 112172615582 ist ein HM-600 @klahus1 MI Kommandos Device Info: 7E 09 63500316 63500316 00 09 7F // ??? Data A 7E 11 63500316 63500316 00 11 7F // ??? Data B Device Control: 7E 51 63500316 63500316 5A5A 25 08CC B0 7F // Power Limit 37% ??? 7E 51 63500316 63500316 5A5A 5D 15CC D5 7F // Power Limit 93% ??? BROADCAST 0x02 BROADCAST ist MainCmd 0x02 und SubCmd 0x00. Also m.E. 02 72615582 78563412 00 CRC8 Tausche mal noch die DTU ID gegen die richtige, sonst antwortet der WR sich selbst. traces 23:01:43.299 > Fetch inverter: 112172615582 23:01:43.299 > sendCommand: BROADCAST 23:01:43.302 > >>> Command BROADCAST <<< 23:01:43.305 > 23:01:43.305 > sendStatsRequest 23:01:43.308 > sendAlarmLogRequest 23:01:43.308 > sendEsbPacket 23:01:43.310 > TX 02 72 61 55 82 78 56 34 12 00 CE 23:01:45.341 > RX Period End 23:01:45.342 > All missing 23:01:45.342 > Nothing received, resend whole request 23:01:45.347 > TX 02 72 61 55 82 78 56 34 12 00 CE 23:01:47.373 > RX Period End 23:01:47.373 > All missing 23:01:47.373 > Nothing received, resend whole request 23:01:47.378 > TX 02 72 61 55 82 78 56 34 12 00 CE 23:01:49.404 > RX Period End 23:01:49.404 > All missing 23:01:49.404 > Nothing received, resend whole request 23:01:49.409 > TX 02 72 61 55 82 78 56 34 12 00 CE 23:01:51.434 > RX Period End 23:01:51.435 > All missing 23:01:51.435 > Nothing received, resend count exeeded TX 02 72615582 78563412 00 CE Es gibt im Original Code eine Methode um die Baudrate zu \u00e4ndern: GetInveterBaudType und CHANGE_MOD_2M_250K bzw. typedef enum { Device_250K = 1 , Device_2M = 0 , Device_INIT_BAUD = 3 } BaudType ; die Definition des BROADCAST Command #define BROADCAST 0x02 //Query network terminal device ID #define ANSWER_REQHOST (BROADCAST | 0x80 | 0x40) #define ANSWER_BROADCAST (BROADCAST | 0x80) #define BROADCAST_ON 0x18 //Query the status of terminal A channel #define ANSWER_BROADCAST_ON (BROADCAST_ON | 0x80) #define REQ_NUB_BROADCAST 0x03 // Request the number of broadcast commands #define ANSWER_REQ_NUB_BROADCAST (REQ_NUB_BROADCAST | 0x80) //83 und hier die Methode UsartNrf_Process_Inverter_NetCmd_SearchId : /*********************************************** ** Function name: Second-generation protocol, broadcast command, search id, receive receipt processing ** Descriptions: ** input parameters: ** output parameters: ** Returned value: *************************************************/ void UsartNrf_Process_Inverter_NetCmd_SearchId ( u8 * pBuffer ) { static vu16 PortCnt = 0 ; vu16 i ; if ( PortCnt == 0 ) { PortCnt = Dtu3Detail . Property . PortNum ; //Total number of connections } for ( i = 0 ; i < PortCnt ; i ++ ) { if ((( memcmp ( & ( pBuffer [ 10 ]), ( u8 * ) MIMajor [ i ]. Property . Pre_Id , 2 ) != 0 ) || ( memcmp ( & ( pBuffer [ 12 ]), ( u8 * ) MIMajor [ i ]. Property . Id , 4 ) != 0 )) && (( pBuffer [ 11 ] & 0xf0 ) <= 0x60 )) { memcpy (( u8 * ) MIMajor [ PortCnt ]. Property . Pre_Id , ( & pBuffer [ 10 ]), 2 ); memcpy (( u8 * ) MIMajor [ PortCnt ]. Property . Id , ( & pBuffer [ 2 ]), 4 ); // The original network id remains unchanged, and the subsequent insert id if ( UsartNrf_GetInvterType (( u8 * ) MIMajor [ PortCnt ]. Property . Pre_Id ) == Inverter_500 ) { if (( MIMajor [ PortCnt ]. Property . Port != MI_500W_A ) && ( MIMajor [ PortCnt ]. Property . Port != MI_500W_B )) { memcpy (( u8 * ) & ( MIMajor [ PortCnt + 1 ]. Property . Id [ 0 ]), ( u8 * ) & MIMajor [ PortCnt ]. Property . Id [ 0 ], sizeof ( MIMajor [ PortCnt ]. Property . Id )); memcpy (( u8 * ) & ( MIMajor [ PortCnt + 1 ]. Property . Pre_Id [ 0 ]), ( u8 * ) & MIMajor [ PortCnt ]. Property . Pre_Id [ 0 ], sizeof ( MIMajor [ PortCnt ]. Property . Pre_Id )); MIMajor [ PortCnt ]. Property . Port = MI_500W_A ; MIMajor [ PortCnt + 1 ]. Property . Port = MI_500W_B ; Dtu3Detail . Property . PortNum = Dtu3Detail . Property . PortNum + 2 ; } } else if ( UsartNrf_GetInvterType (( u8 * ) MIMajor [ PortCnt ]. Property . Pre_Id ) == Inverter_1000 ) { if (( MIMajor [ PortCnt ]. Property . Port != MI_1000W_A ) && ( MIMajor [ PortCnt ]. Property . Port != MI_1000W_B ) && ( MIMajor [ PortCnt ]. Property . Port != MI_1000W_C ) && ( MIMajor [ PortCnt ]. Property . Port != MI_1000W_D )) { memcpy (( u8 * ) & MIMajor [ PortCnt + 1 ]. Property . Id [ 0 ], ( u8 * ) & MIMajor [ PortCnt ]. Property . Id [ 0 ], sizeof ( MIMajor [ PortCnt ]. Property . Id )); memcpy (( u8 * ) & MIMajor [ PortCnt + 1 ]. Property . Pre_Id [ 0 ], ( u8 * ) & MIMajor [ PortCnt ]. Property . Pre_Id [ 0 ], sizeof ( MIMajor [ PortCnt ]. Property . Pre_Id )); memcpy (( u8 * ) & MIMajor [ PortCnt + 2 ]. Property . Id [ 0 ], ( u8 * ) & MIMajor [ PortCnt ]. Property . Id [ 0 ], sizeof ( MIMajor [ PortCnt ]. Property . Id )); memcpy (( u8 * ) & MIMajor [ PortCnt + 2 ]. Property . Pre_Id [ 0 ], ( u8 * ) & MIMajor [ PortCnt ]. Property . Pre_Id [ 0 ], sizeof ( MIMajor [ PortCnt ]. Property . Pre_Id )); memcpy (( u8 * ) & MIMajor [ PortCnt + 3 ]. Property . Id [ 0 ], ( u8 * ) & MIMajor [ PortCnt ]. Property . Id [ 0 ], sizeof ( MIMajor [ PortCnt ]. Property . Id )); memcpy (( u8 * ) & MIMajor [ PortCnt + 3 ]. Property . Pre_Id [ 0 ], ( u8 * ) & MIMajor [ PortCnt ]. Property . Pre_Id [ 0 ], sizeof ( MIMajor [ PortCnt ]. Property . Pre_Id )); MIMajor [ PortCnt ]. Property . Port = MI_1000W_A ; MIMajor [ PortCnt + 1 ]. Property . Port = MI_1000W_B ; MIMajor [ PortCnt + 2 ]. Property . Port = MI_1000W_C ; MIMajor [ PortCnt + 3 ]. Property . Port = MI_1000W_D ; Dtu3Detail . Property . PortNum = Dtu3Detail . Property . PortNum + 4 ; } } else if ( UsartNrf_GetInvterType (( u8 * ) MIMajor [ PortCnt ]. Property . Pre_Id ) == Inverter_250 ) { MIMajor [ PortCnt ]. Property . Port = MI_250W ; // 0x01 Dtu3Detail . Property . PortNum = Dtu3Detail . Property . PortNum + 1 ; } if ( UsartNrf_GetInvterType (( u8 * ) MIMajor [ PortCnt ]. Property . Pre_Id ) == Inverter_250 ) { PortCnt = PortCnt + 1 ; i = i + 1 ; } else if ( UsartNrf_GetInvterType (( u8 * ) MIMajor [ PortCnt ]. Property . Pre_Id ) == Inverter_500 ) { PortCnt = PortCnt + 2 ; i = i + 2 ; } else if ( UsartNrf_GetInvterType (( u8 * ) MIMajor [ PortCnt ]. Property . Pre_Id ) == Inverter_1000 ) { PortCnt = PortCnt + 4 ; i = i + 4 ; } MIReal [ PortNO ]. Data . NetStatus = ( u8 )(( PortCnt * 100 ) / PORT_LEN ); if ( PortCnt >= PORT_LEN ) { return ; } return ; } } return ; } HM Kommandos 7E 15 81101507 81101507 FF EA 7F ??? Retransmits: 7E 15 81101507 81101507 82 97 7F 7E 15 81101507 81101507 83 96 7F 7E 15 81101507 81101507 84 91 7F 7E 15 81101507 81101507 85 90 7F 7E 15 81101507 81101507 86 93 7F 7E 15 81101507 81101507 87 92 7F 7E 15 81101507 81101507 88 9D 7F 7E 15 81101507 81101507 89 9C 7F 7E 15 81101507 81101507 8A 9F 7F 7E 15 81101507 81101507 8B 9E 7F Device Info: RealTimeRunData_Debug 0x0B mit verschiedenen Zeitstempeln 7E 15 81101507 81101507 80 0B00 62D806F7 0000 259C 00000000 2C4F 0F 7F 7E 15 81101507 81101507 80 0B00 62D806F9 0000 259C 00000000 4C03 2D 7F 7E 15 81101507 81101507 80 0B00 62D806FA 0000 259C 00000000 BC17 CA 7F 7E 15 81101507 81101507 80 0B00 62D806FB 0000 259C 00000000 2C1A 56 7F AlarmData 0x11 7E 15 81101507 81101507 80 1100 62D806FC 0000 259C 0000 0000 C627 9C 7F Device Control: 7E 51 81101507 81101507 81 0B00 2B98 0000 6B89 8A 7F // Active Power Limit 0x0B; 0x2B98 = 1116.0 W Welche Device Info REQ_ARW_DAT_ALL (0x15) Sub Kommandos gibt es source code typedef enum { InverterDevInform_Simple = 0 , // 0x00 InverterDevInform_All = 1 , // 0x01 GridOnProFilePara = 2 , // 0x02 HardWareConfig = 3 , // 0x03 SimpleCalibrationPara = 4 , // 0x04 SystemConfigPara = 5 , // 0x05 RealTimeRunData_Debug = 11 , // 0x0b RealTimeRunData_Reality = 12 , // 0x0c RealTimeRunData_A_Phase = 13 , // 0x0d RealTimeRunData_B_Phase = 14 , // 0x0e RealTimeRunData_C_Phase = 15 , // 0x0f //Alarm data - all unsent alarms AlarmData = 17 , // 0x11 //Alarm data - all pending alarms AlarmUpdate = 18 , // 0x12 RecordData = 19 , // 0x13 InternalData = 20 , // 0x14 GetLossRate = 21 , // 0x15 GetSelfCheckState = 30 , // 0x1e InitDataState = 0xff , // 0xFF } DataType ; SubCmd = * InverterDevInform_Simple (0x00) * GridOnProFilePara (0x02) * HardWareConfig (0x03) ??? * SimpleCalibrationPara (0x04) ??? * SystemConfigPara (0x05) ??? * RealTimeRunData_Debug (0x0B) * RealTimeRunData_Reality (0x0C) * RealTimeRunData_A_Phase (0x0D) ??? * RealTimeRunData_B_Phase (0x0E) ??? * RealTimeRunData_C_Phase (0x0F) ??? * AlarmData (0x11) * AlarmUpdate (0x12) * RecordData (0x13) * InternalData (0x14) ??? * ~~GetLossRate (0x15) ???~~ * ~~GetSelfCheckState (0x1E) ???~~ Bei allen anderen Anfragen erfolgt vorher ein CurNetCmd = NET_INIT, also MainCmd = REQ_ARW_DAT_ALL (0x15) und SubCmd = RealTimeRunData_Reality (0x0c) bzw. RealTimeRunData_Debug (0x0b). Wir verwenden ja schon l\u00e4nger den zweiten Fall 0x0b f\u00fcr die Status Meldungen 15 72 61 55 82 78 56 34 12 80 0X00 <timestamp> 0000 0000 00000000 CRC16 CRC8 f\u00fcr X 0, 1, 2, 3, 4, 5 ? Auf irgendeinen dieser DevInform Anfragen muss der WR doch antworten ? Das selbe verwenden wir ja schon lange mit RealTimeRunData_Debug 0x0B. Ja, dass w\u00e4re sch\u00f6n. Vorallem HW Rev und FW Rev sind relevant. 15 72 61 55 82 78 56 34 12 80 0000 <timestamp> 0000 0000 00000000 CRC16 CRC8 // InverterDevInform_Simple 0x00 15 72 61 55 82 78 56 34 12 80 0100 <timestamp> 0000 0000 00000000 CRC16 CRC8 // InverterDevInform_All 0x01 15 72 61 55 82 78 56 34 12 80 0200 <timestamp> 0000 0000 00000000 CRC16 CRC8 // GridOnProFilePara 0x02 15 72 61 55 82 78 56 34 12 80 0300 <timestamp> 0000 0000 00000000 CRC16 CRC8 // HardWareConfig 0x03 15 72 61 55 82 78 56 34 12 80 0400 <timestamp> 0000 0000 00000000 CRC16 CRC8 // SimpleCalibrationPara 0x04 15 72 61 55 82 78 56 34 12 80 0500 <timestamp> 0000 0000 00000000 CRC16 CRC8 // SystemConfigPara 0x05 15 72 61 55 82 78 56 34 12 80 0C00 <timestamp> 0000 0000 00000000 CRC16 CRC8 // RealTimeRunData_Reality 0x0C 15 72 61 55 82 78 56 34 12 80 1400 <timestamp> 0000 0000 00000000 CRC16 CRC8 // InternalData 0x14 15 72 61 55 82 78 56 34 12 80 1500 <timestamp> 0000 0000 00000000 CRC16 CRC8 // GetLossRate 0x15 15 72 61 55 82 78 56 34 12 80 1E00 <timestamp> 0000 0000 00000000 CRC16 CRC8 // GetSelfCheckState 0x1E welches Format hat der TimeStamp? Timestamp sind 4 Byte wie \u00fcblich. Unix Epoch Format @drschiffler hier sind schon mal die ersten DevInform Anfragen und Antworten interpretiert anhand des DTU-Pro Source Codes. Falls Du neben dem DevControl auch die o.g. DevInform Pakete einbauen m\u00f6chtest ? Speziell das -vvv- u.g. InverterDevInform_Simple ist hilfreich, da es u.a. die Hardware und Firmware Version beinhaltet! Wie funktioniert das Status selbst Pr\u00fcfen GetSelfCheckState (0x1E) Sub Kommando Interessant w\u00e4re auch: GetSelfCheckState: // 0x1e Da kann man die Serial ID und SW/HW Version des Wechselrichters auslesen... 15 74403329 78563412 80 1100 62D80183 0000 0000 00000000 0765 FE --- AlarmData 0x11 15 74403329 78563412 80 1200 62D80183 0000 0000 00000000 FFC4 2A --- AlarmUpdate 0x12 15 74403329 78563412 80 1E00 62D80183 0000 0000 00000000 086A 0E --- GetSelfCheckState 0x1E ^^------------------------------------------------------------------ MainCmd 0x15 REQ_ARW_DAT_ALL ^^^^^^^^--------------------------------------------------------- WR Serial ID ^^^^^^^^------------------------------------------------ DTU Serial ID ^^--------------------------------------------- MultiFrameID 0x80 ^^------------------------------------------ SubCmd bzw. DataType: 0x11 = AlarmData, 0x12 AlarmUpdate ^^---------------------------------------- rev Protocol Revision ? ^^^^^^^^------------------------------- UNIX timestamp 62BE1CE0 -> 2022-07-01 00:00:00 ^^^^-------------------------- Gap always 0x0000 ^^^^--------------------- 0x0000, nur bei AlarmData: WarnSerNub (Warning Serial Number) ^^^^^^^^------------ Password always 0x0000 ^^^^------- CRC16 / CRC-Modbus \u00fcber die UserData, excl. Frame ID! ^^---- CRC8 MainCmd 0x15 , 0x80 MultiFrameID, SubCmd GetSelfCheckState 0x1E , Timestamp wie oben, Gap ist 0x0000 und Password ist 0x00000000 Probiere mal: 15 74403329 78563412 80 1E00 62D80183 0000 0000 00000000 086A 0E --- GetSelfCheckState 0x1E Transmit 27 | 15 74 40 33 29 78 56 34 12 80 1E 00 62 D8 01 83 00 00 00 00 00 00 00 00 08 6A F7 Received 21 bytes channel 23: 95 74 40 33 29 74 40 33 29 81 00 01 00 00 00 00 00 00 CB 50 8E Payload: 00 01 00 00 00 00 00 00 cb 50 Das erste Byte 0x95 ist die Antwort 0x15 | 0x80 = 0x95 InverterDevInform_Simple | 0x00 traces 23:41:51.618 > Fetch inverter: 112172615582 23:41:51.618 > sendCommand: InverterDevInform_Simple 23:41:51.623 > sendEsbPacket 23:41:51.623 > TX 15 72 61 55 82 78 56 34 12 80 00 00 62 E6 F7 1F 00 00 00 00 00 00 00 00 24 A3 B2 23:41:51.683 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 81 27 1A 10 10 10 15 02 00 03 00 20 01 00 00 6C 17 77 23:41:51.871 > RX Period End 23:41:51.871 > Success jetzt geht es ans parsen... @klahus1 Danke f\u00fcrs loggen, hier die Antwort, da kann jetzt jeder seine HW Version und Firmware Version \u00fcberpr\u00fcfen! TX 15 72615582 78563412 80 0000 62E6F71F 0000 00000000 0000 24A3 B2 InverterDevInform_Simple 0x00 RX 95 72615582 72615582 81 271A 1010 1015 0200 0300 2001 0000 6C17 77 ^^^^--------------------------------------- AppFWBuild_VER Application version ^^^^---------------------------------- HW_PNH Hardware part number ^^^^----------------------------- HW_PNL Hardware part number ^^^^------------------------ HW_VER Hardware version ^^^^------------------- GPFCode Grid-connected protection file code ^^^^-------------- GPFVer Grid-connected protection file version ^^^^\u207b-------- ReservedPara Reserved parameters Weiter gehts: InverterDevInform_All | 0x01 traces 23:55:48.318 > Fetch inverter: 112172615582 23:55:48.318 > sendCommand: InverterDevInform_All 23:55:48.323 > sendEsbPacket 23:55:48.323 > TX 15 72 61 55 82 78 56 34 12 80 01 00 62 E6 FA 64 00 00 00 00 00 00 00 00 ED 24 8B 23:55:48.386 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 81 27 1A 07 E4 02 C3 05 84 00 66 00 00 00 00 84 F4 9C 23:55:48.570 > RX Period End 23:55:48.570 > Success Hier scheint irgendwas mit der Antwort noch nicht ganz zu passen, u.a. ist bereits die HW_PNH eine andere als bei der InverterDevInform_Simple Antwort. Die laut DTU-Pro vorhandenen Details danach sind offenbar auch nicht enthalten. Hmm. TX 15 72615582 78563412 80 0100 62E6FA64 0000 00000000 0000 ED24 8B InverterDevInform_All 0x01 RX 95 72615582 72615582 81 271A 07E4 02C3 0584 0066 0000 0000 84F4 9C UsartNrf3_Process_DevInform_All() ^^^^--------------------------------------- AppFWBuild_VER Application version ^^^^---------------------------------- AppFWBuild_YYYY Application firmware compilation time-year ^^^^----------------------------- AppFWBuild_MMDD Application firmware compilation time-month. day ^^^^------------------------ AppFWBuild_HHMM Application version ^^^^------------------- USFWBuild_VER Hardware part number ^^^^-------------- HW_PNH Hardware part number ^^^^--------- AppFW_PNL Hardware part number ^^^^--------- AppFW_PNL Hardware part number ??? ^^^^--------- HWSPECVER Hardware version ??? ^^^^--------- GPFCode Grid-connected protection file code ??? ^^^^--------- GPFVer Grid-connected protection file version ??? Was bedeutet hier eigentlich nochmals 95 als Byte? F1 bedeutet ja, das er die Anfrage verworfen hat. Und 95? Das ist die Antwort auf die Anfrage mit 0x15. Es ist immer +0x80 zw. Anfrage und Antwort. 0x51 -> 0xD1 You are right \ud83d\ude05 HardWareConfig | 0x03 traces 1 22:02:09.582 > Fetch inverter: 112172615582 22:02:09.583 > 22:02:09.583 > >>> sendCommand: HardWareConfig | 0x03 | 3 22:02:09.588 > 22:02:09.588 > sendEsbPacket 22:02:09.588 > TX 15 72 61 55 82 78 56 34 11 80 03 00 62 E8 31 41 00 00 00 00 00 00 00 00 8F C1 ED 22:02:09.643 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 01 00 01 10 10 10 15 02 00 10 10 00 00 27 10 00 B0 15 22:02:09.678 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 02 00 01 A7 F0 3D 46 66 66 3E 66 29 5F 3B 4B 33 9C 4B 22:02:09.740 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 03 3C 22 D7 0A 3C A3 B3 68 3E 2A F8 38 3D 42 00 00 BA 22:02:09.794 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 04 40 60 00 00 40 C0 66 66 3F A6 CC CD 41 2C EB 85 AA 22:02:09.835 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 05 3F 91 00 00 42 3C 00 00 43 11 00 00 43 E1 00 00 B0 22:02:09.897 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 06 43 66 00 00 43 52 7A E1 3F 74 00 00 41 80 00 00 B6 22:02:09.933 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 07 42 70 00 00 41 B0 00 00 42 70 00 00 41 38 F5 C3 2C 22:02:09.992 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 88 3F 88 00 00 42 B4 5C 29 3E 0F 00 00 42 BE 44 FE 5E 22:02:10.634 > RX Period End 22:02:10.634 > Middle missing 22:02:10.634 > Request retransmit: 5 22:02:10.637 > TX 15 72 61 55 82 78 56 34 11 85 5F 22:02:10.687 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 05 3F 91 00 00 42 3C 00 00 43 11 00 00 43 E1 00 00 B0 22:02:10.725 > RX Period End 22:02:10.726 > Middle missing 22:02:10.726 > Request retransmit: 5 22:02:10.728 > TX 15 72 61 55 82 78 56 34 11 85 5F 22:02:10.774 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 05 3F 91 00 00 42 3C 00 00 43 11 00 00 43 E1 00 00 B0 22:02:10.817 > RX Period End 22:02:10.817 > Middle missing Hier war es anscheinend nicht m\u00f6glich eine erfolgreiche Nachricht vom WR zu erhalten. Hast du es \u00f6fters probiert? nein, nur einmal Ok danke. :) ich versuche gerade was daraus zu lesen. traces 2 22:49:42.341 > Fetch inverter: 112172615582 22:49:42.341 > 22:49:42.341 > >>> sendCommand: HardWareConfig | 0x03 | 3 22:49:42.346 > 22:49:42.346 > sendEsbPacket 22:49:42.346 > TX 15 72 61 55 82 78 56 34 11 80 03 00 62 E8 3C 66 00 00 00 00 00 00 00 00 84 EF E2 22:49:42.414 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 01 00 01 10 10 10 15 02 00 10 10 00 00 27 10 00 B0 15 22:49:42.453 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 02 00 01 A7 F0 3D 46 66 66 3E 66 29 5F 3B 4B 33 9C 4B 22:49:42.494 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 03 3C 22 D7 0A 3C A3 B3 68 3E 2A F8 38 3D 42 00 00 BA 22:49:42.531 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 04 40 60 00 00 40 C0 66 66 3F A6 CC CD 41 2C EB 85 AA 22:49:42.590 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 05 3F 91 00 00 42 3C 00 00 43 11 00 00 43 E1 00 00 B0 22:49:42.647 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 06 43 66 00 00 43 52 7A E1 3F 74 00 00 41 80 00 00 B6 22:49:42.687 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 07 42 70 00 00 41 B0 00 00 42 70 00 00 41 38 F5 C3 2C 22:49:42.747 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 88 3F 88 00 00 42 B4 5C 29 3E 0F 00 00 42 BE 44 FE 5E 22:49:45.392 > RX Period End 22:49:45.393 > Middle missing 22:49:45.393 > Request retransmit: 5 22:49:45.395 > TX 15 72 61 55 82 78 56 34 11 85 5F 22:49:45.441 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 05 3F 91 00 00 42 3C 00 00 43 11 00 00 43 E1 00 00 B0 22:49:45.484 > RX Period End 22:49:45.484 > Middle missing 22:49:45.484 > Request retransmit: 5 22:49:45.487 > TX 15 72 61 55 82 78 56 34 11 85 5F 22:49:45.575 > RX Period End 22:49:45.575 > Middle missing 22:49:45.575 > Request retransmit: 5 22:49:45.578 > TX 15 72 61 55 82 78 56 34 11 85 5F 22:49:45.615 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 05 3F 91 00 00 42 3C 00 00 43 11 00 00 43 E1 00 00 B0 22:49:45.666 > RX Period End 22:49:45.666 > Middle missing 22:49:45.666 > Request retransmit: 5 22:49:45.669 > TX 15 72 61 55 82 78 56 34 11 85 5F 22:49:45.703 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 05 3F 91 00 00 42 3C 00 00 43 11 00 00 43 E1 00 00 B0 22:49:45.757 > RX Period End 22:49:45.757 > Middle missing 22:49:45.757 > Request retransmit: 5 22:49:45.760 > TX 15 72 61 55 82 78 56 34 11 85 5F 22:49:45.848 > RX Period End 22:49:45.848 > Middle missing 22:49:45.848 > Retransmit timeout Hmm \ud83e\udd14 Die Ahoy DTU hat aktuell ein Limit f\u00fcr max. 5 Antwort Pakete im Source Code, daher ist nach dem 5ten empfangenen Paket Schluss. @klahus1 hat aber im ersten Anlauf bereits alle 8 Pakete mitgeloggt. F\u00fcr die HardWareConfig 0x03 ist der Parser UsartNrf3_Process_DevInform_SystemConfig nicht im DTU-Pro Source code. TX 15 72615582 78563411 80 0300 62E83141 0000 00000000 0000 8FC1 ED HardWareConfig 0x03 RX 95 72615582 72615582 01 0001 1010 1015 0200 1010 0000 2710 00B0 15 RX 95 72615582 72615582 02 0001 A7F0 3D46 6666 3E66 295F 3B4B 339C 4B RX 95 72615582 72615582 03 3C22 D70A 3CA3 B368 3E2A F838 3D42 0000 BA RX 95 72615582 72615582 04 4060 0000 40C0 6666 3FA6 CCCD 412C EB85 AA RX 95 72615582 72615582 05 3F91 0000 423C 0000 4311 0000 43E1 0000 B0 RX 95 72615582 72615582 06 4366 0000 4352 7AE1 3F74 0000 4180 0000 B6 RX 95 72615582 72615582 07 4270 0000 41B0 0000 4270 0000 4138 F5C3 2C RX 95 72615582 72615582 88 3F88 0000 42B4 5C29 3E0F 0000 42BE 44FE 5E UsartNrf3_Process_DevInform_SystemConfig() SimpleCalibrationPara | 0x04 traces 22:53:57.406 > Fetch inverter: 112172615582 22:53:57.406 > 22:53:57.406 > >>> sendCommand: SimpleCalibrationPara | 0x04 | 4 22:53:57.412 > 22:53:57.412 > sendEsbPacket 22:53:57.414 > TX 15 72 61 55 82 78 56 34 11 80 04 00 62 E8 3D 65 00 00 00 00 00 00 00 00 76 AC 56 22:54:00.457 > RX Period End 22:54:00.457 > All missing 22:54:00.457 > Nothing received, resend whole request 22:54:00.463 > TX 15 72 61 55 82 78 56 34 11 80 04 00 62 E8 3D 65 00 00 00 00 00 00 00 00 76 AC 56 22:54:00.517 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 81 00 01 03 E9 03 EE 03 EB FF EC 65 9D 11 22:54:03.509 > RX Period End 22:54:03.509 > Success Auch die Funktion UsartNrf3_Process_DevInform_Calibration() ist nicht im Source Code enthalten. Es bleibt also auch die SimpleCalibrationPara Antwort zu interpretieren. TX 15 72615582 78563411 80 0400 62E83D65 0000 00000000 0000 76AC 56 SimpleCalibrationPara | 0x04 RX 95 72615582 72615582 81 0001 03E9 03EE 03EB FFEC 659D 11 UsartNrf3_Process_DevInform_Calibration() ^^^^--------------------------------------- ^^^^---------------------------------- ^^^^----------------------------- ^^^^------------------------ ^^^^------------------- SystemConfigPara | 0x05 traces Damit setze ich aktuell das Limit: 11:25:28.070 > Limit Non-Persistent: 98 % 11:25:28.070 > TX Channel: 61 --> 51 71 60 35 46 78 56 34 12 81 0B 00 03 D4 00 01 DC 80 3B 11:25:28.130 > RX D1 71 60 35 46 71 60 35 46 81 00 00 0B 00 14 07 48 11:25:30.103 > RX Period End 11:25:30.103 > Success und das ist SytemConfigPara: 11:25:37.358 > TX Channel: 61 --> 15 71 60 35 46 78 56 34 12 80 05 00 63 30 1E 8B 00 00 00 00 00 00 00 00 16 A7 8D 11:25:37.416 > RX 95 71 60 35 46 71 60 35 46 81 00 01 03 D4 00 00 03 E8 FF FF FF FF 01 68 2D 38 55 11:25:37.596 > RX Period End 11:25:37.596 > Success 03 D4 = 98.0 % und in der SystemConfigPara steht auch 03 D4 gefolgt von 03 E8 = 100.0 % Im ersten sind es 98%. also 03 D4... im 2. ist es auch 03 D4 (es ist das 3. und 4. Byte der Antwort) F\u00fcr die MI-Modelle wurde auch eine l\u00e4ngere Zeit gemessen, bis das neue Limit \u00fcberhaupt erreicht wird und greift. Obwohl der SystemConfigPara m.E. dem Namen nach eigentlich den Soll-Zustand abbilden sollte. Wenn man das SystemConfigPara zu schnell nach dem ActivePowerLimit schickt bekommt man im EventLog neue Eintr\u00e4ge Das oben sind 10 Sekunden Unterschied, hei\u00dft also Du musst 15-20 Sekunden warten oder das waren mehrere Versuche ? Das interessante ist, ich bekomme teilweise 5 Sek nach ActivePowerLimit setzen schon eine Antwort aber erhalte dann eben Log Eintr\u00e4ge. Bei 5 Min Differenz habe ich keine Log Eintr\u00e4ge. W\u00e4hrend der 5min kann ich problemlos die Stats lesen. Der SystemConfigPara Kommando ist im original DTU Pro Source Code leider nur in Ans\u00e4tzen implementiert. So fehlt u.a. die daf\u00fcr vorgesehene UsartNrf3_Process_DevInform_SystemConfig() Methode. Diese wird \u00fcbrigens auch f\u00fcr HardWareConfig vorgesehen, aber das ist halt auch nur ein Kommentar / Stub. Wie kann man den Device Status pr\u00fcfen RealTimeRunData_Debug | 0x0B 7E 15 81101507 81101507 80 0B00 62D806FB 0000 259C 00000000 2C1A 56 7F ^^--------------------------------------------------------------------- SOF Start of Frame 0x7E ^^------------------------------------------------------------------ MainCmd 0x15 REQ_ARW_DAT_ALL ^^^^^^^^--------------------------------------------------------- WR Serial ID ^^^^^^^^------------------------------------------------ DTU Serial ID ^^^^^^^^--------------------- DTU Serial ID wird vom NRF24 \u00fcberschrieben, da initial vom Treiber gesetzt ^^--------------------------------------------- MultiFrameID 0x80 = SingleFrame ^^------------------------------------------ SubCmd bzw. DataType: 0x0B = RealTimeRunData_Debug, 0x0C RealTimeRunData_Reality ^^---------------------------------------- rev Protocol Revision ? ^^^^---------------------------------------- Control Mode ? immer zwei Byte im Gen3 Protokoll ^^^^^^^^------------------------------- UNIX timestamp 62BE1CE0 -> 2022-07-01 00:00:00 ^^^^-------------------------- Gap always 0x0000 ^^^^--------------------- 0x0000, nur bei AlarmData: WarnSerNub (Warning Serial Number) // User data: the latest alarm serial number received on the same day ^^^^^^^^------------ Password always 0x00000000 ^^^^------- CRC16 / CRC-Modbus \u00fcber die UserData, excl. Frame ID! ^^^^------- CRC16 / CRC-Modbus \u00fcber die Daten, nach und excl. Frame ID! ^^---- CRC8 ^^- EOF End of Frame 0x7F Die Funktion UsartNrf3_Process_DevRunReality() ist etwas komplexer, je nach Inverter Typ * Inverter_HM_OneToFour diese Kondition ist etwas verwirrend da hier teilweise der selbe Wert zweimal gelesen und z.B. sowohl in PV1&PV2 oder PV3&PV4 Voltage geschrieben wird. * Inverter_HM_OneToTwo * Inverter_HM_OneToOne * Inverter_Pro * >= Inverter_Pro RealTimeRunData_Reality | 0x0C traces 22:08:29.683 > Fetch inverter: 112172615582 22:08:29.683 > 22:08:29.683 > >>> sendCommand: RealTimeRunData_Reality | 0x0C | 12 22:08:29.689 > 22:08:29.689 > sendEsbPacket 22:08:29.691 > TX 15 72 61 55 82 78 56 34 11 80 0C 00 62 E8 32 BD 00 00 00 00 00 00 00 00 8B 6F B7 22:08:29.754 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 01 00 01 01 06 01 2F 03 1C 00 02 D4 A3 0D 14 08 EB 2C 22:08:29.768 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 82 13 86 02 F8 00 01 00 22 03 E8 00 B9 15 94 90 00 18 22:08:30.736 > RX Period End 22:08:30.737 > Success Die Funktion UsartNrf3_Process_DevRunReality() ist etwas komplexer, je nach Inverter Typ * Inverter_HM_OneToFour diese Kondition ist etwas verwirrend da hier teilweise der selbe Wert zweimal gelesen und z.B. sowohl in PV1&PV2 oder PV3&PV4 Voltage geschrieben wird. * Inverter_HM_OneToTwo * Inverter_HM_OneToOne * Inverter_Pro * >= Inverter_Pro Bei dem o.g. Inverter 1121 handelt es sich also um einen Inverter_HM_OneToOne TX 15 72615582 78563411 80 0C00 62E832BD 0000 00000000 0000 8B6F B7 RealTimeRunData_Reality 0x0C RX 95 72615582 72615582 01 0001 0106 012F 031C 0002 D4A3 0D14 08EB 2C UsartNrf3_Process_DevRunReality() ^^^^--------------------------------------- DataVer Data version ^^^^---------------------------------- PVVol PV1 voltage ^^^^----------------------------- PVCur PV1 current ^^^^------------------------ PVPower PV1 power ^^^^------------------- HistoryEnergyH PV1 Historical cumulative power generation ^^^^-------------- HistoryEnergyL ^^^^--------- DailyEnergy ^^^^---- GridVol AC voltage RX 95 72615582 72615582 82 1386 02F8 0001 0022 03E8 00B9 1594 9000 18 ^^^^--------------------------------------- Freque AC frequency ^^^^---------------------------------- GridActivePower AC active power ^^^^----------------------------- GridReactivePower Reactive power ^^^^------------------------ GridCurrent AC current ^^^^------------------- PowerFactor Power factor ^^^^-------------- Temper temperature ^^^^--------- DataAarnNub //If the total is greater than 20, store the alarms in the alarm pool first if(RealAlarmDataNO + DataAarnNub - WarnSerNub[PortNO] >= 20) //If the number of alarms for a single micro-inverse is greater than 20, subcontracting processing is required if(DataAarnNub - WarnSerNub[PortNO] > 20) Wie sieht das Device Info Kommando Alarm Data 0x11 / Alarm Update 0x12 aus ? REQ_ARW_DAT_ALL 0x15 mit SubCmd: AlarmData = 17, // 0x11 suche mal nach NET_ALARM_DATA / NET_ALARM_UPDATE bzw. dem anderen AlarmUpdate das findet sich nicht \u00fcberall als Substring wie AlarmData . 15 74403329 78563412 80 1100 627b69fe 0000 0000 00000000 47d7 bc 15 74403329 78563412 80 1100 62D80183 0000 0000 00000000 0765 FE --- AlarmData 0x11 15 74403329 78563412 80 1200 62D80183 0000 0000 00000000 FFC4 2A --- AlarmUpdate 0x12 15 74403329 78563412 80 1E00 62D80183 0000 0000 00000000 086A 0E --- GetSelfCheckState 0x1E ^^------------------------------------------------------------------ MainCmd 0x15 REQ_ARW_DAT_ALL ^^^^^^^^--------------------------------------------------------- WR Serial ID ^^^^^^^^------------------------------------------------ DTU Serial ID ^^--------------------------------------------- MultiFrameID 0x80 ^^------------------------------------------ SubCmd bzw. DataType: 0x11 = AlarmData, 0x12 AlarmUpdate ^^---------------------------------------- rev Protocol Revision ? ^^^^^^^^------------------------------- UNIX timestamp 62BE1CE0 -> 2022-07-01 00:00:00 ^^^^-------------------------- Gap always 0x0000 ^^^^--------------------- 0x0000, nur bei AlarmData: WarnSerNub (Warning Serial Number) ^^^^^^^^------------ Password always 0x0000 ^^^^------- CRC16 / CRC-Modbus \u00fcber die UserData, excl. Frame ID! ^^---- CRC8 0x80 ist die MultiFrameID f\u00fcr SingleFrame Nachrichten ! Dann kommt das SubCmd 0x11 bzw. in UsartNrf3_Send_PackPollMultiDataCommand() wird das als DataType 0x11 und 0x00 (rev = Protokoll Revision/Version) bezeichnet (zusammen zwei Byte) und weiter \u00fcbergeben bzw. gleichzeitig als CurRecSendPackageDataType gesetzt. temp_dat [ 9 ] = 0x80 ; //Multi-frame identification temp_dat [ 10 ] = DataType ; //User data: data type CurRecSendPackageDataType = DataType ; //The currently packaged data type temp_dat [ 11 ] = 0 ; //rev Danach folgt der Timestamp , temp_dat [ 12 ] = ( u8 )( time >> 24 ); temp_dat [ 13 ] = ( u8 )( time >> 16 ); temp_dat [ 14 ] = ( u8 )( time >> 8 ); temp_dat [ 15 ] = ( u8 )( time ); das Gap (zwei Byte, steht im Excel) temp_dat [ 16 ] = Gap ; //User data: data upload server interval temp_dat [ 17 ] = Gap >> 8 ; und im Falle von AlarmData eine Unterscheidung: if ( DataType == AlarmData ) { // temp_dat[18] = (u8)((CurRealAlarmNum + 1) / 0xff); // temp_dat[19] = (u8)((CurRealAlarmNum + 1) % 0xff); temp_dat [ 18 ] = ( u8 )(( WarnSerNub [ PortNO ]) / 0xff ); temp_dat [ 19 ] = ( u8 )(( WarnSerNub [ PortNO ]) % 0xff ); } else { memset (( u8 * ) & ( temp_dat [ 18 ]), 0 , 2 ); // User data: the latest alarm serial number received on the same day } Also zwei Bytes 0x00 00 um die letzte Alarm Serial Nummer zu abzufragen, bzw. die aktuelle Alarm Serial Number falls man schon welche kennt. Dann noch das Password also 0x00000000 (vier Bytes alle 0). memcpy (( u8 * )( & temp_dat [ 20 ]), Password , 4 ); //User data: anti-theft password Dann noch schnell die CRC-16 \u00fcber die Daten nach der MultiFrameID dr\u00fcber berechnet for ( i = 10 ; i < 24 ; i ++ ) { if (( i - 10 ) % 2 == 1 ) { TempCrc = ( u16 )( temp_dat [ i - 1 ] << 8 ) | ( temp_dat [ i ]); DatCrc = CalcCRC16t ( TempCrc , DatCrc ); } } temp_dat [ 24 ] = ( u8 )( DatCrc >> 8 ); temp_dat [ 25 ] = ( u8 )( DatCrc ); und dann die CRC8 \u00fcber alles. temp_dat [ 26 ] = Get_crc_xor (( u8 * ) temp_dat , 26 ); Danach wird dann anhand des CurRecSendPackageDataType die entsprechende Antwort in UsartNrf3_Process_DevInform() bzw. UsartNrf3_Process_DevInform_Alarm() oder UsartNrf3_Process_DevInform_InformUpdate() geparst. Routine UsartNrf3_Process_DevInform_Alarm() wird verwendet um die o.a. Alarm Payload zu dekodieren. Es werden immer in 12 byte zusammengefa\u00dft, wobei die ersten beiden die Alarm Version number darstellen: Fehlermeldungen in HM-600 HM-800 Bedienungsanleitung Alarmcode 129 deckt sich u.A. auch mit der Fehlertabelle in der Bedienungsanleitung vom HM-600. \"Softwarefehlercode 129\". Zufall? Dann k\u00f6nnte der WR ja prinziepiell auch die anderen Alarmcodes senden. Daf\u00fcr br\u00e4uchte es aber eine Art Session zwischen der DTU und dem WR. Weil ich habe noch keine unbekannten Pakete rein purzeln sehen, wenn ich z.B. das Netz abtrenne. Das m\u00fcsste dann laut Anleitung 0x93/147 oder 0x94/148 sein So wie ich es verstehe, ergibt sich z.B. bei mir folgender zerlegter Block (Hand bearbeitet): W1 W2 W3 W4 W5 W6 B1 2 3 4 5 6 7 8 9 10 11 12 0001 Hex Dez 8001 0006 1698 1698 0000 0000 ; 1698 > 5784 /60 = 96 /60=1:36:xx ; 0x1698 = 02:36:24 8002 0007 4F16 4F16 FFFF FFDF ; 4F16 > 20246/60 = 337/60=5:37:xx ; 0x4F16 = 06:37:26 8002 0008 5CC9 5CC9 FFFF F261 ; 5CC9 > 23753/60 = 395/60=6:35:xx ; F2=242 ; 0x5CC9 = 07:35:53 8002 0009 5D0E 5D0E FFFF FFA7 ; 5D0E > 23822/60 = 397/60=6:37:xx ; 0x5D0E = 07:37:02 8002 000A 641D 641D FFFF F8F1 ; 641D > 25629/60 = 427/60=7:07:xx ; F8=248 ; 0x641D = 08:07:09 8002 000B 64DE 64DE FFFF FF3F ; 64DE > 25822/60 = 430/60=7:10:xx ; 0x64DE = 08:10:22 8002 000C 657D 657D FFFF FF61 ; 657D > 25981/60 = 433/60=7:13:xx ; 0x657D = 08:13:01 8002 000D 6679 6679 FFFF FF18 ; 6679 > 26233/60 = 437/60=7:17:xx ; 0x6679 = 08:17:13 8002 000E 754A 754A FFFF F12F ; 754A > 30026/60 = 500/60=8:00:xx ; F1=241 ; 0x754A = 09:20:26 34E7 a) Nur was sollen mir die Worte W1 bis W6 sagen ? Ich habe gegen 12:41 Uhr mit der Aufzeichnung begonnen. Der WR arbeitet aber schon sehr viel fr\u00fcher. Also \"Uptime\" in der Zeile 8001 mit 1:36:xx kann nicht sein. Es ist die Uhrzeit zu der das Event / der Alarm aufgetreten ist. Hier sind alle Zeiten am selben Tag mit AM angegeben. W1 = WCode Bit 14 und Bit 15 ergeben den RunCode[0] und RunCode[1] Bit 12 und Bit 13 ergeben AM und PM f\u00fcr AlarmStartTime und AlarmEndTime W2 = WNum/WarnSerNub W3 = AlarmStartTime W4 = AlarmEndTime W5 = AlarmData1 W6 = AlarmData2 b) Welches Wort/Byte (W1 bis W6/B1 bis B12) soll Bitte der Alarmcode sein? AlarmCode ist das LowByte von W1 6.1 Fehlerbehebungsliste Table Fehlerbehebungsliste | Alarm Code | Alarmbezeichnung | Vorschlag | | ---------- | ---------------------- | -------------------------------------------------------------------------------- | | 121 | \u00dcbertemperaturschutz. | 1. \u00dcberpr\u00fcfen Sie am Standort der Mikroumwechselrichterinstallation die Bel\u00fcftung und Umgebungstemperatur. | | | | 2. Bei schlechter Bel\u00fcftung oder \u00dcberschreitung der Temperaturgrenzwerte, verbessern Sie die Bel\u00fcftung und W\u00e4rmeableitung. | | | | 3. Wenn sowohl die Bel\u00fcftung als auch die Umgebungstemperatur den Vorgaben entsprechen, kontaktieren Sie bitte Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 125 | Parameterfehler der Netzkonfiguration | 1. \u00dcberpr\u00fcfen Sie, ob die Netzkonfigurationsparameter korrekt sind und aktualisieren Sie sie erneut. | | | | 2. Wenn weiterhin ein Fehler vorliegt, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 126 | Softwarefehlercode 126 | 1. Wenn der Alarm ohne besonderen Anlass auftritt, der Mikrowechselrichter jedoch normal arbeitet, wird kein besonderer Eingriff ben\u00f6tigt. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 127 | Firmwarefehler | 1. \u00dcberpr\u00fcfen Sie, ob die Firmware korrekt ist und aktualisieren Sie diese erneut. | | | | 2. \u00dcberpr\u00fcfen Sie die Kommunikation zwischen DTU und dem \u00dcberwachungssystem von Hoymiles sowie die Kommunikation zwischen DTU und Mikrowechselrichter. | | | | 3. Wenn weiterhin ein Fehler vorliegt, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 128 | Softwarefehlercode 128 | 1. Wenn der Alarm ohne besonderen Anlass auftritt, der Mikrowechselrichter jedoch normal arbeitet, wird kein besonderer Eingriff ben\u00f6tigt. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 129 | Softwarefehlercode 129 | 1. Wenn der Alarm ohne besonderen Anlass auftritt, der Mikrowechselrichter jedoch normal arbeitet, wird kein besonderer Eingriff ben\u00f6tigt. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 130 | Offline | 1. Bitte stellen Sie sicher, dass der Mikroumwechselrichter normal arbeitet. | | | | 2. \u00dcberpr\u00fcfen Sie den Kommunikationszustand zwischen der DTU und demMonitoringsystem von Hoymiles, sowie die Kommunikation zwischen DTU und Mikrowechselrichter. Wenn die Kommunikation schlecht ist, versuchen Sie Verbesserungen anhand der weiter oben genannten Punkte zu erreichen. | | | | 3. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 141 | Netz\u00fcberspannung | 1. Wenn der Alarm ohne besonderen Anlass auftritt, kann die Netzspannung vor\u00fcbergehend zu hoch sein. Der Mikroumwechselrichter verbindet sich automatisch wieder mit dem Netz, sobald sich die Netzspannung normalisiert hat. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt, \u00fcberpr\u00fcfen Sie, ob die Netzspannung am Anschlusspunkt innerhalb der erlaubten Grenzen liegt. Wenn nicht, kontaktieren Sie den \u00f6rtlichen Netzbetreiber, oder adaptieren Sie mit Zustimmung des \u00f6rtlichen Netzbetreibers die Grenzwerte \u00fcber das Monitoringsystem von Hoymiles. | | 142 | 10 Minuten-Mittelwert | 1. Wenn der Alarm ohne besonderen Anlass auftritt, kann die Netzspannung vor\u00fcbergehend zu hoch sein. Der Mikroumwechselrichter verbindet sich automatisch wieder mit dem Netz, sobald sich die Netzspannung normalisiert hat. | | | Netz\u00fcberspannung | 2. Wenn der Alarm h\u00e4ufig auftritt, \u00fcberpr\u00fcfen Sie, ob die Netzspannung am Anschlusspunkt innerhalb der erlaubten Grenzen liegt. Wenn nicht, kontaktieren Sie den \u00f6rtlichen Netzbetreiber, oder adaptieren Sie mit Zustimmung des \u00f6rtlichen Netzbetreibers die Grenzwerte \u00fcber das Monitoringsystem von Hoymiles. | | 143 | Netzunterspannung | 1. Wenn der Alarm ohne besonderen Anlass auftritt, kann die Netzspannung vor\u00fcbergehend zu niedrig sein. Der Mikroumwechselrichter verbindet sich automatisch wieder mit dem Netz, sobald sich die Netzspannung normalisiert hat. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt, \u00fcberpr\u00fcfen Sie, ob die Netzspannung am Anschlusspunkt innerhalb der erlaubten Grenzen liegt. Wenn nicht, kontaktieren Sie den \u00f6rtlichen Netzbetreiber, oder adaptieren Sie mit Zustimmung des \u00f6rtlichen Netzbetreibers die Grenzwerte \u00fcber das Monitoringsystem von Hoymiles. | | | | 3. Wenn der Fehler weiterhin auftritt, \u00fcberpr\u00fcfen Sie den Sicherungsautomat oder die AC-Verdrahtung. | | 144 | Netz\u00fcberfrequenz | 1. Wenn der Alarm ohne besonderen Anlass auftritt, kann die Netzfrequenz vor\u00fcbergehend zu hoch sein. Der Mikroumwechselrichter verbindet sich automatisch wieder mit dem Netz, sobald sich die Netzfrequenz normalisiert hat. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt, \u00fcberpr\u00fcfen Sie, ob die Netzfrequenz am Anschlusspunkt innerhalb der erlaubten Grenzen liegt. Wenn nicht, kontaktieren Sie den \u00f6rtlichen Netzbetreiber, oder adaptieren Sie mit Zustimmung des \u00f6rtlichen Netzbetreibers die Grenzwerte \u00fcber das Monitoringsystem von Hoymiles. | | 145 | Netzunterfrequenz | 1. Wenn der Alarm ohne besonderen Anlass auftritt, kann die Netzfrequenz vor\u00fcbergehend zu niedrig sein. Der Mikroumwechselrichter verbindet sich automatisch wieder mit dem Netz, sobald sich die Netzfrequenz normalisiert hat. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt, \u00fcberpr\u00fcfen Sie, ob die Netzfrequenz am Anschlusspunkt innerhalb der erlaubten Grenzen liegt. Wenn nicht, kontaktieren Sie den \u00f6rtlichen Netzbetreiber, oder adaptieren Sie mit Zustimmung des \u00f6rtlichen Netzbetreibers die Grenzwerte \u00fcber das Monitoringsystem von Hoymiles. | | 146 | Schnelle Wechselrate der Netzfrequenz | 1. Wenn der Alarm ohne besonderen Anlass auftritt, kann die sich Netzfrequenz vor\u00fcbergehendzu h\u00e4ufig/schnell \u00e4ndern. Der Mikroumwechselrichter verbindet sich automatisch wieder mit dem Netz, sobald sich die Netzfrequenz normalisiert hat. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt, \u00fcberpr\u00fcfen Sie, ob die Netzfrequenz am Anschlusspunkt innerhalb der erlaubten Grenzen liegt. Wenn nicht, kontaktieren Sie den \u00f6rtlichen Netzbetreiber, oder adaptieren Sie mit Zustimmung des \u00f6rtlichen Netzbetreibers die Grenzwerte (Netzfrequenzwechselrate) \u00fcber das Monitoringsystem von Hoymiles. | | 147 | Stromnetzausfall | Bitte \u00fcberpr\u00fcfen Sie, ob ein Netzstromausfall vorliegt. | | 148 | Netzabtrennung | Bitte \u00fcberpr\u00fcfen Sie, ob der Sicherungsautomat und die AC-Verdrahtung in Ordnung sind. | | 149 | Inselbetrieb festgestellt | 1. Wenn der Alarm ohne besonderen Anlass auftritt, kann dies an untypischen Netzverh\u00e4ltnissen liegen. Der Mikroumwechselrichter verbindet sich automatisch wieder mit dem Netz, sobald sich der Netzzustand normalisiert hat. | | | | 2. Wenn der Alarm h\u00e4ufig an allen Mikrowechselrichter Ihrer Anlage auftritt, kontaktieren Sie den \u00f6rtlichen Netzbetreiber, um zu \u00fcberpr\u00fcfen, ob ein Inselbetrieb vorliegt. | | | | 3. Wenn der Alarm weiterhin besteht, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 205 | \u00dcberspannung am DC-Eingangsport 1 | 1. Bitte stellen Sie sicher, dass die Leerlaufspannung des PV-Moduls geringer oder gleich der maximal erlaubten Eingangsspannung ist. | | | | 2. Wenn die Leerlaufspannung des PV-Moduls innerhalb des normalen Bereichs liegt, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 206 | \u00dcberspannung am DC-Eingangsport 2 | 1. Bitte stellen Sie sicher, dass die Leerlaufspannung des PV-Moduls geringer oder gleich der maximal erlaubten Eingangsspannung ist. | | | | 2. Wenn die Leerlaufspannung des PV-Moduls innerhalb des normalen Bereichs liegt, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 207 | Unterspannung am DC-Eingangsport 1 | 1. Bitte stellen Sie sicher, dass die Leerlaufspannung des PV-Moduls h\u00f6her oder gleich der minimalen Eingangsspannung ist. | | | | 2. Wenn die Leerlaufspannung des PV-Moduls innerhalb des normalen Bereichs liegt, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 208 | Unterspannung am DC-Eingangsport 2 | 1. Bitte stellen Sie sicher, dass die Leerlaufspannung des PV-Moduls h\u00f6her oder gleich der minimalen Eingangsspannung ist. | | | | 2. Wenn die Leerlaufspannung des PV-Moduls innerhalb des normalen Bereichs liegt, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 209 | Fehler beim DC-Eingang 1 | 1. Bitte pr\u00fcfen Sie, ob das PV-Modul an den Wechselrichter angeschlossen ist. Wenn das PV-Modul angeschlossen ist, \u00fcberpr\u00fcfen Sie bitte die DC-Kabelverbindungen zwischen Anschluss und PV-Modul. | | 210 | Fehler beim DC-Eingang 2 | 1. Bitte pr\u00fcfen Sie, ob das PV-Modul an den Wechselrichter angeschlossen ist. Wenn das PV-Modul angeschlossen ist, \u00fcberpr\u00fcfen Sie bitte die DC-Kabelverbindungen zwischen Anschluss und PV-Modul. | | 301 | Hardwarefehlercode 301 | 1. Wenn der Alarm ausversehen auftritt, der Mikrowechselrichter jedoch normal arbeitet, wird kein besonderer Eingriff ben\u00f6tigt. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 302 | Hardwarefehlercode 302 | 1. Wenn der Alarm ohne besonderen Anlass auftritt, der Mikrowechselrichter jedoch normal arbeitet, wird kein besonderer Eingriff ben\u00f6tigt. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 303 | Hardwarefehlercode 303 | 1. Wenn der Alarm ohne besonderen Anlass auftritt, der Mikrowechselrichter jedoch normal arbeitet, wird kein besonderer Eingriff ben\u00f6tigt. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 304 | Hardwarefehlercode 304 | 1. Wenn der Alarm ohne besonderen Anlass auftritt, der Mikrowechselrichter jedoch normal arbeitet, wird kein besonderer Eingriff ben\u00f6tigt. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 305 | Hardwarefehlercode 305 | 1. Wenn der Alarm ohne besonderen Anlass auftritt, der Mikrowechselrichter jedoch normal arbeitet, wird kein besonderer Eingriff ben\u00f6tigt. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 306 | Hardwarefehlercode 306 | 1. Wenn der Alarm ohne besonderen Anlass auftritt, der Mikrowechselrichter jedoch normal arbeitet, wird kein besonderer Eingriff ben\u00f6tigt. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 307 | Hardwarefehlercode 307 | 1. Wenn der Alarm ohne besonderen Anlass auftritt, der Mikrowechselrichter jedoch normal arbeitet, wird kein besonderer Eingriff ben\u00f6tigt. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 308 | Hardwarefehlercode 308 | 1. Wenn der Alarm ohne besonderen Anlass auftritt, der Mikrowechselrichter jedoch normal arbeitet, wird kein besonderer Eingriff ben\u00f6tigt. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | I have found alarm_codes 121..314 in the HM-1600 documentation you mentioned on the forum: Chapter 6. Troubleshooting, 6.1 Troubleshooting List However I could not find the alarm_codes 5041..5200, these are probably elaborate guesses based on first hand experience / results ? Or is 0x50XY another prefix like the 0x8Y we have seen with the paket numbering maybe for some \"channels\" / MPPT ports ? Found it under MI-600, MI-700 and MI-800 manual 6.1 Troubleshooting List (SN: 1042xxxxxxxx) Error Codes: 121 - 308 6.2 Troubleshooting List (SN: 1040xxxxxxxx, 1041xxxxxxxx) Error Codes: 130 (Offline), 5041 - 9000 sic So the error codes are Device Dependent, but there seem to be little / no differences in the overlapping codes. The codes above 1000 can be found in the MI-Series user manuals. Just google a bit. There are lots of different models out there. Compare all user manuals and you will find, all seem to have the same codes. Depending on their hardware layout of course, but the codes don't seem to overlap a single time. If you merge all that information in a single table you likely end up with a similar result. Is this list complete? I don't think so. Especially because I could not find any hint on codes 1 and 2. They where just guessed, based on real observation. Gerade das hier gefunden zur Analyse von WR/DTU Fehlern https://www.hoymiles.com/wp-content/uploads/2021/07/Failure-process-for-common-fault.pdf // MI Error Codes 5041 : ' Error code -04 Port 1 ' , // 0x13B1 5042 : ' Error code -04 Port 2 ' , // 0x13B2 5043 : ' Error code -04 Port 3 ' , // 0x13B3 5044 : ' Error code -04 Port 4 ' , // 0x13B4 5051 : ' PV Input 1 Overvoltage / Undervoltage ' , // 0x13BB 5052 : ' PV Input 2 Overvoltage / Undervoltage ' , // 0x13BC 5053 : ' PV Input 3 Overvoltage / Undervoltage ' , // 0x13BD 5054 : ' PV Input 4 Overvoltage / Undervoltage ' , // 0x13BE 5060 : ' Abnormal bias ' , // 0x13C4 5070 : ' Over temperature protection ' , // 0x13CE 5080 : ' Grid Overvoltage / Undervoltage ' , // 0x13D8 5090 : ' Grid Overfrequency / Underfrequency ' , // 0x13E2 5100 : ' Island detected ' , // 0x13EC 5120 : ' EEPROM reading and writing error ' , // 0x1400 5150 : ' 10 min value grid overvoltage ' , // 0x141E 5200 : ' Firmware error ' , // 0x1450 8310 : ' Shut down ' , // 0x2076 9000 : ' Microinverter is suspected of being stolen ' // 0x2328 I especially like 9000: 'Microinverter is suspected of being stolen' \ud83e\udd23 00 01 80 01 00 06 30 62 30 62 00 00 00 00 // 0x80 = AM,AM, 0x3062 = 04:26:26 00 d4 00 07 30 6a 00 00 00 00 00 00 // 0x00 = AM,AM, 0x306A = 04:26:34, 0xD4 = 212 Port 4 no input b0 02 00 48 4c f7 4c f7 00 00 00 05 // 0xB0 = PM,PM, 0x4CF7 = 06:28:23 + 12:00:00 = 18:28:23 b0 02 00 49 55 da 55 da ff ff ff fb // 0xB0 = PM,PM, 0x55DA = 07:06:18 + 12:00:00 = 19:06:18 b0 02 00 4a 55 ed 55 ed 00 00 00 05 // 0xB0 = PM,PM, 0x55ED = 07:06:37 + 12:00:00 = 19:06:37 b0 02 00 4b 56 72 56 72 ff ff ff fb // 0xB0 = PM,PM, 0x5672 = 07:08:50 + 12:00:00 = 19:08:50 b0 02 00 4c 56 72 56 72 00 00 00 06 // 0xB0 = PM,PM, 0x5672 = 07:08:50 + 12:00:00 = 19:08:50 b0 02 00 4d 56 79 56 79 ff ff ff fb // 0xB0 = PM,PM, 0x5679 = 07:08:57 + 12:00:00 = 19:08:57 b0 02 00 4e 56 82 56 82 00 00 00 05 // 0xB0 = PM,PM, 0x5682 = 07:09:06 + 12:00:00 = 19:09:06 b0 02 00 4f 56 e7 56 e7 ff ff ff fb // 0xB0 = PM,PM, 0x56E7 = 07:10:47 + 12:00:00 = 19:10:47 b0 02 00 50 56 f3 56 f3 00 00 00 05 // 0xB0 = PM,PM, 0x56F3 = 07:10:59 + 12:00:00 = 19:10:59 b0 02 00 51 57 1d 57 1d ff ff ff fb // 0xB0 = PM,PM, 0x571D = 07:11:41 + 12:00:00 = 19:11:41 b0 02 00 52 57 23 57 23 00 00 00 05 // 0xB0 = PM,PM, 0x5723 = 07:11:47 + 12:00:00 = 19:11:47 b0 02 00 53 57 4f 57 4f ff ff ff fb // 0xB0 = PM,PM, 0x574F = 07:12:31 + 12:00:00 = 19:12:31 b0 02 00 54 57 51 57 51 00 00 00 05 // 0xB0 = PM,PM, 0x5751 = 07:12:33 + 12:00:00 = 19:12:33 05 ab 80 0B00 623B5E4B 0000 000B 00000000 2F87 2B6A BD BD6A 1 00 01 80 01 00 01 64 42 64 42 00 00 00 00 00 d1 00 04 64 4a 00 00 00 00 00 00 // 0xD1 = 209 Fehler beim DC-Eingang 1 00 d2 00 05 64 4a 00 00 00 00 00 00 // 0xD2 = 210 Fehler beim DC-Eingang 2 00 cf 00 06 65 76 00 00 00 00 00 dc // 0xCF = 207 Unterspannung am DC-Eingangsport 1 80 02 00 09 6a b3 6a b3 ff ff ff f6 80 02 00 0a 6a b8 6a b8 ff ff ff fb 80 02 00 0b 6b cf 6b cf ff ff fe e9 40 8f 00 0c 64 4a 6c 19 00 03 07 a3 // 0x8F = 143 Netzunterspannung 40 93 00 0d 64 4a 6c 19 00 00 00 00 // 0x93 = 147 Stromnetzausfall 80 02 00 0e 6c ac 6c ac ff ff ff 23 80 02 00 0f 6c b1 6c b1 ff ff ff fb 80 02 00 10 6c b8 6c b8 ff ff ff f9 80 02 00 11 6c be 6c be ff ff ff fa 80 02 00 12 6c c3 6c c3 ff ff ff fb 80 02 00 13 6c ca 6c ca ff ff ff f9 2f 89 00 01 <-- Alarm Version number 80 01 00 01 62 26 62 26 00 00 00 00 // 0x6226 = 07:58:46; 0x01 = 00 d1 00 04 62 2e 00 00 00 00 00 00 // 0x622E = 07:58:54; 0xD1 = 209 Fehler beim DC-Eingang 1 00 d2 00 05 62 2e 00 00 00 00 00 00 // 0x622E = 07:58:54; 0xD2 = 210 Fehler beim DC-Eingang 2 00 cf 00 06 63 5a 00 00 00 00 00 dc // 0x635A = 08:03:54; 0xCF = 207 Unterspannung am DC-Eingangsport 1 40 8f 00 0c 62 2e 69 fd 00 03 07 a3 // 0x622E = 07:58:54; 0x8F = 143 Netzunterspannung 40 93 00 0d 62 2e 69 fd 00 00 00 00 // 0x622E = 07:58:54; 0x93 = 147 Stromnetzausfall 80 02 00 22 6c a4 6c a4 ff ff ff fa // 0x6CA4 = 08:43:32; 0x02 = 80 02 00 23 6c ab 6c ab ff ff ff f9 80 02 00 24 6c ec 6c ec ff ff ff bf 80 02 00 25 6c f1 6c f1 ff ff ff fb 80 02 00 26 6c fb 6c fb ff ff ff f6 80 02 00 27 6d 18 6d 18 ff ff ff e3 80 02 00 28 6d 22 6d 22 ff ff ff f6 80 02 00 29 6d 27 6d 27 ff ff ff fb 80 02 00 2a 6d 32 6d 32 ff ff ff f5 53 03 <-- CRC-16 / CRC-Modbux |...| |...| |...| |...| |...| |...| +2 +3 +4 +5 +6 +7 +8 +9 +10.. +12.. <WCode> | | | | <WNum>| | | | <WarnSerNub>| | | <AlarmStartTime> | <AlarmEndTime> <AlarmData1> <AlarmData2> AlarmId: Alarm_Id [ 0 ]), ( u8 * ) MIMajor [ PortNO ]. Property . Pre_Id , 2 ); Alarm_Id [ 2 ]), ( u8 * ) MIMajor [ PortNO ]. Property . Id , 4 ); WCode: WCode = ( u16 ) pProBuffer [ i * 12 + 2 ] << 8 | pProBuffer [ i * 12 + 3 ]; WNum: WNum ), & ( pProBuffer [ i * 12 + 4 ]), 2 ); WarnSerNub: WarnSerNub [ PortNO ] = ( u16 ) pProBuffer [ i * 12 + 4 ] << 8 | ( u16 ) pProBuffer [ i * 12 + 5 ]; WTime1=AlarmStartTime: //Alarm start time AlarmTime = ( u32 )(( u16 ) pProBuffer [ i * 12 + 6 ] << 8 ) | (( u16 ) pProBuffer [ i * 12 + 7 ]) + DateToSec ( calendar ); // AM AlarmTime = 12 * 60 * 60 + ( u32 )((( u16 ) pProBuffer [ i * 12 + 6 ] << 8 ) | (( u16 ) pProBuffer [ i * 12 + 7 ])) + DateToSec ( calendar ); // PM WTime2=AlarmEndTime: //Alarm end time AlarmTime = ( u32 )(( u16 ) pProBuffer [ i * 12 + 8 ] << 8 ) | (( u16 ) pProBuffer [ i * 12 + 9 ]) + DateToSec ( calendar ); // AM AlarmTime = 12 * 60 * 60 + ( u32 )((( u16 ) pProBuffer [ i * 12 + 8 ] << 8 ) | (( u16 ) pProBuffer [ i * 12 + 9 ])) + DateToSec ( calendar ); // PM AlarmData1: Data1 [ 0 ]), & ( pProBuffer [ i * 12 + 10 ]), 2 ); AlarmData2: Data2 [ 0 ]), & ( pProBuffer [ i * 12 + 12 ]), 2 ); Das was Jan-Jonas als a_count identifiziert hat ist in Wirklichkeit WarnSerNub bzw. das High byte davon ist auch WNum . Das was in Deiner Ausgabe mit 0x4d02 als 19714 sec identifiziert wurde sind die Sekunden seit 0:00 bzw. 12:00 Uhr f\u00fcr den AlarmStartTime/Wtime1 bzw. AlarmEndeTime/WTime2 80 01 00 01 4d 02 4d 02 00 00 00 00: uptime=5:28:34 a_count=1 opcode=128 a_code=1 a_text=Inverter start BBHHHHH: (128, 1, 1, 19714, 19714, 0, 0) Die untere Ausgabe mit 19714 das ist also 5:28:34 h eine normale Uhrzeit, AM da die u.a. AlarmStart und AlarmEnde AM/PM Bits 13 & 12 aus dem WCode = 0 sind. Der WR kennt kein Datum, die DTU addiert hierzu das Datum dazu. Dazu muss man jeweils das aktuelle Datum addieren, dann hat man einen echten Timestamp Lediglich den Datumswechsel scheint der WR anhand der von der DTU gesendeten Timestamps zu machen. ( WCode >> 14 ) & 0x03 : ( 0x8001 >> 14 ) & 0x03 : ( 0x02 ) & 0x03 = 0x02 // bestimmt den sog. RunCode siehe unten ( WCode >> 13 ) & 0x01 : ( 0x8001 >> 13 ) & 0x01 : ( 0x04 ) & 0x01 = 0x00 // 0x00 = AM, 0x01 = PM AlarmStart ( WCode >> 12 ) & 0x01 : ( 0x8001 >> 12 ) & 0x01 : ( 0x08 ) & 0x01 = 0x00 // 0x00 = AM, 0x01 = PM AlarmEnde Es wird offenbar immer das aktuelle Datum des Tages in Sekunden dazu gez\u00e4hlt und anhand des Bit 13 / 12 im WCode entschieden ob AlarmStartTime / AlarmEndTime vormittags oder nachmittags liegt/lag. Aus Bit 14 & 15 des WCode wird noch ein sog. Run_Status[0] und [1] extrahiert. Was auch immer das aussagt? WCode >> 14 ) & 0x03 )) == 0 ) Run_Status [ 0 ] = 0x00 ; Run_Status [ 1 ] = 0x08 ; WCode >> 14 ) & 0x03 ) == 1 ) Run_Status [ 0 ] = 0x00 ; Run_Status [ 1 ] = 0x03 ; Was der Run_Status genau aussagt wei\u00df man aktuell noch nicht oder? Ach ja und AlarmData1/Data1 und AlarmData2/Data2 sind beide 0x0000 WCode ist also 0x8001 und WNum = 0x80 F\u00fcr WCode 0x8001 sind die Bits also 0x 8 0 0 1 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 8 4 2 1 8 4 2 1 8 4 2 1 8 4 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 00 D1 00 04 4D 0A 00 00 00 00 00 00: uptime=5:28:42 a_count=4 opcode=0 a_code=209 a_text=Port 1 no input BBHHHHH: (0, 209, 4, 19722, 0, 0, 0) Hier ist WCode 0x00D1 , also ist ((WCode >> 14) & 0x03)) == 0) und somit Run_Status[0] = 0x00; und Run_Status[1] = 0x08; . Die Uhrzeit stimmt, da auch Bit 12&13 0 sind, ist die AlarmStartTime/Wtime1 AM. Und die WarnSerNub = 0x0004 und WNum = 0x00 40 8f 00 0c 4d 0a 54 d9 00 03 07 a3: uptime=5:28:42 a_count=12 opcode=64 a_code=143 a_text=Grid undervoltage BBHHHHH: (64, 143, 12, 19722, 21721, 3, 1955) Hier ist WCode 0x408f , also ist ((WCode >> 14) & 0x03)) == 1) und somit Run_Status[0] = 0x00; und Run_Status[1] = 0x03; . Die Uhrzeit stimmt, da auch Bit 12&13 wieder 0 sind ist auch die AlarmStartTime/Wtime1 0x4d0a = 5:28:42h AlarmEndTime/Wtime2 0x54d9 =6:02:01h beide AM. Hier sind AlarmData1/Data1 = 0x0003 und AlarmData2/Data2 = 0x07a3 Und die WarnSerNub = 0x000c und WNum = 0x00 //CurAlarmState -- alarm state type typedef enum { InitState = 0 , //There is a new alarm record HasNewAlarmRecord = 1 , //There is a new wave recording alarm HasNewWaveRecord = 2 , //No new alarm record HasNONewAlarmRecord = 3 , //No new wave recording alarm HasNONewWaveRecord = 4 , // Suspend the alarm AlarmInforUpdate_Server = 10 , //APP state switch AlarmInforUpdate_App = 11 , } AlarmStateType ; extern volatile AlarmStateType CurAlarmState ; typedef union { struct { //dong 20200520 u16 WCode ; u8 Alarm_Id [ 6 ] ; u8 WNum [ 2 ]; u8 WTime1 [ 4 ]; u8 WTime2 [ 4 ]; u8 Data1 [ 2 ]; u8 Data2 [ 2 ]; } Data ; u8 DataMsg [ 22 ]; } AlarmDataType ; InternalData | 0x14 traces 22:06:44.659 > Fetch inverter: 112172615582 22:06:44.659 > 22:06:44.659 > >>> sendCommand: InternalData | 0x014 | 20 22:06:44.664 > 22:06:44.664 > sendEsbPacket 22:06:44.664 > TX 15 72 61 55 82 78 56 34 11 80 14 00 62 E8 32 54 00 00 00 00 00 00 00 00 07 D4 71 22:06:44.713 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 01 00 01 9B 8A 09 F7 08 09 FF FB 00 04 00 00 04 B5 CA 22:06:44.750 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 82 01 4B 03 61 03 61 66 0A 31 22:06:45.712 > RX Period End 22:06:45.713 > Success TX 15 72615582 78563411 80 1400 62E83254 0000 00000000 0000 07D4 71 InternalData 0x14 RX 95 72615582 72615582 01 0001 9B8A 09F7 0809 FFFB 0004 0000 04B5 CA UsartNrf3_Process_DevInform_InternalData() ^^^^--------------------------------------- ??? ^^^^---------------------------------- ^^^^----------------------------- ^^^^------------------------ ^^^^------------------- ^^^^-------------- ^^^^--------- RX 95 72615582 72615582 82 014B 0361 0361 660A 31 ^^^^--------------------------------------- ??? ^^^^---------------------------------- ^^^^----------------------------- GetLossRate | 0x15 traces 22:00:39.560 > Fetch inverter: 112172615582 22:00:39.560 > 22:00:39.560 > >>> sendCommand: GetLossRate | 0x15 | 21 22:00:39.566 > 22:00:39.566 > sendEsbPacket 22:00:39.566 > TX 15 72 61 55 82 78 56 34 11 80 15 00 62 E8 30 E7 00 00 00 00 00 00 00 00 3B 54 7D 22:00:39.624 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 81 9B 26 09 30 8F C8 D7 22:00:40.612 > RX Period End 22:00:40.613 > Success Die Information in GetLossRate 0x15 sind m.E. sehr sinnvoll, da hier die RX/TX Statistik des Wechselrichters zu finden ist. TX 15 72615582 78563411 80 1500 62E830E7 0000 00000000 0000 3B54 7D GetLossRate 0x15 RX 95 72615582 72615582 81 9B26 0930 8FC8 D7 UsartNrf3_Process_DevInform_GetLossRate() ^^^^--------------------------------------- MI_CF_Num_Start/End Micro-inverse receive count ^^^^---------------------------------- MI_RF_Num_Start/End Micro-inverse send count Man mu\u00df die Werte auf DTU Seite initialisieren, falls diese (noch) 0 sind. Danach kann man diese Start Werte von den aktuellen Werte (End) abziehen und erh\u00e4lt die aktuelle Differenz. Vielleicht sind diese Z\u00e4hler bei einigen am \u00dcberlaufen ? GetSelfCheckState | 0x1E traces 21:57:39.511 > Fetch inverter: 112172615582 21:57:39.512 > 21:57:39.512 > >>> sendCommand: GetSelfCheckState | 0x1E | 30 21:57:39.517 > 21:57:39.517 > sendEsbPacket 21:57:40.568 > TX 15 72 61 55 82 78 56 34 11 80 1E 00 62 E8 30 33 00 00 00 00 00 00 00 00 F5 F1 C9 21:57:40.631 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 81 00 01 00 00 00 00 00 00 CB 50 8E 21:57:41.614 > RX Period End 21:57:41.614 > Success Die GetSelfCheckState 0x1E Anfrage wird in UsartNrf3_Process_Self_Check_State mit der Hilfsfunktion UsartNrf3_Process_GetDatatoProBuffer in einen pProBuffer kopiert. Erst danach werden die Werte ausgelesen. TX 15 72615582 78563411 80 1E00 62E83033 0000 00000000 0000 F5F1 C9 GetSelfCheckState 0x1E RX 95 72615582 72615582 81 0001 0000 0000 0000 CB50 8E UsartNrf3_Process_Self_Check_State() ^^^^--------------------------------------- ver Data version ^^^^---------------------------------- st Test status (2<=st<=6 Collecting / Collection completed) ^^^^----------------------------- gpf Grid-connected rule file code ^^^^------------------------ gpf_ver Grid-connected rule file version //st 4 to 6 There is no subsequent data ... // 2<=st<=3 //First-level overvoltage self-test test results ^^^^------------------- code ^^^^------------------- dflt_val ^^^^------------------- dflt_tim ^^^^------------------- rslt_val ^^^^------------------- rslt_tim //First-level undervoltage self-test test results ^^^^------------------- code ^^^^------------------- dflt_val ^^^^------------------- dflt_tim ^^^^------------------- rslt_val ^^^^------------------- rslt_tim //Secondary overvoltage self-test test results ^^^^------------------- code ^^^^------------------- dflt_val ^^^^------------------- dflt_tim ^^^^------------------- rslt_val ^^^^------------------- rslt_tim //Secondary undervoltage self-test test results ^^^^------------------- code ^^^^------------------- dflt_val ^^^^------------------- dflt_tim ^^^^------------------- rslt_val ^^^^------------------- rslt_tim //First-level over-frequency self-test test results ^^^^------------------- code ^^^^------------------- dflt_val ^^^^------------------- dflt_tim ^^^^------------------- rslt_val ^^^^------------------- rslt_tim //First-level underfrequency self-test test results ^^^^------------------- code ^^^^------------------- dflt_val ^^^^------------------- dflt_tim ^^^^------------------- rslt_val ^^^^------------------- rslt_tim //Secondary over-frequency self-test test results ^^^^------------------- code ^^^^------------------- dflt_val ^^^^------------------- dflt_tim ^^^^------------------- rslt_val ^^^^------------------- rslt_tim //Secondary underfrequency self-test test results ^^^^------------------- code ^^^^------------------- dflt_val ^^^^------------------- dflt_tim ^^^^------------------- rslt_val ^^^^------------------- rslt_tim InitDataState | 0xFF DevInform 0x15 mit 0xFF als SubCmd ? TX 15 72615582 78563412 FF traces 23:13:06.763 > Fetch inverter: 112172615582 23:13:06.763 > sendCommand: DevInform 23:13:06.766 > >>> Command DevInform <<< 23:13:06.768 > 23:13:06.768 > sendEsbPacket 23:13:06.771 > TX 15 72 61 55 82 78 56 34 12 FF 26 23:13:08.795 > RX Period End 23:13:08.795 > All missing 23:13:08.795 > Nothing received, resend whole request 23:13:08.800 > TX 15 72 61 55 82 78 56 34 12 FF 26 23:13:10.826 > RX Period End 23:13:10.826 > All missing 23:13:10.826 > Nothing received, resend whole request 23:13:10.831 > TX 15 72 61 55 82 78 56 34 12 FF 26 23:13:10.866 > Interrupt received | > RX OK: D1 72 61 55 82 72 61 55 82 81 50 23:13:10.872 > FATAL: (lib/Hoymiles/src/inverters/InverterAbstract.cpp, 51) fragment too short 23:13:12.857 > RX Period End 23:13:12.857 > All missing 23:13:12.857 > Nothing received, resend whole request 23:13:12.862 > TX 15 72 61 55 82 78 56 34 12 FF 26 23:13:14.888 > RX Period End 23:13:14.888 > All missing 23:13:14.888 > Nothing received, resend count exeeded TX 15 72615582 78563412 FF 26 InitDataState 0xFF RX D1 72615582 72615582 81 50 ^^----- ??? Welche Device Control DEVCONTROL_ALL (0x51) Sub Kommandos gibt es source code typedef enum { Type_TurnOn = 0 , // 0x00 Type_TurnOff = 1 , // 0x01 Type_Restart = 2 , // 0x02 Type_Lock = 3 , // 0x03 Type_Unlock = 4 , // 0x04 Type_ActivePowerContr = 11 , // 0x0b Type_ReactivePowerContr = 12 , // 0x0c Type_PFSet = 13 , // 0x0d Type_CleanState_LockAndAlarm = 20 , // 0x14 //dong 06-15 Type_SelfInspection = 40 , // 0x28 // self-inspection of grid-connected protection files Type_Init = 0xff , //0xff } DevControlType ; SubCmd = * [x] Type_TurnOn (0x00) Boot * [x] Type_TurnOff (0x01) Shutdown * [x] Type_Restart (0x02) * [ ] Type_Lock (0x03) * [ ] Type_Unlock (0x04) * [x] Type_ActivePowerContr (0x0B) Active Power Limit * [ ] Type_ReactivePowerContr (0x0C) Reactive Power Limit * [ ] Type_PFSet (0x0D) Power Faktor Limit * [ ] Type_CleanState_LockAndAlarm (0x14) Lock Alarm l\u00f6schen * [ ] Type_SelfInspection (0x28) Selbsttest * [ ] Type_Init (0xFF) Wie sieht ein Device Control Kommando aus ? 7E 51 81101507 81101507 81 00 00 B001 61 7F Type_TurnOn 0x00 7E 51 81101507 81101507 81 01 00 2000 F1 7F Type_TurnOff 0x01 7E 51 81101507 81101507 81 02 00 D000 02 7F Type_Restart 0x02 ^^------------------------------------------ SOF Start of Frame 0x7E ^^--------------------------------------- MainCmd 0x51 DEVCONTROL_ALL ^^^^^^^^------------------------------ WR Serial ID ^^^^^^^^--------------------- DTU Serial ID wird vom NRF24 \u00fcberschrieben, da initial vom Treiber gesetzt ^^------------------ Single Frame ID ^^--------------- SubCmd siehe oben ^^^^^------------ Control Mode ? immer zwei Byte im Gen3 Protokoll ^^^^------- CRC16 / CRC-Modbus \u00fcber die Daten, nach und excl. Frame ID! ^^---- CRC8 ^^- EOF End of Frame 0x7F Wie kann man das Passwort setzen / zur\u00fccksetzen Mit SubCmd 0x03 Type_Lock und 0x04 Type_Unlock kann man ein Passwort (vierstellige Pin) setzen. AdminPasswd [ 4 ] = { 10 , 16 , 50 , 82 }; // = 0x0A 0x10 0x32 0x52 oder 0x0A103252 Nach dem Vergleich mit dem Master / AdminPassword wird das neue Passwort einfach auf 0x00000000 gesetzt und das alte Passwort mit 0xFFFFFFFF \u00fcberschrieben. if ( memcmp (( u8 * ) AdminPasswd , ( u8 * ) Dtu3Detail . Property . LockOldPassword , 4 ) == 0 ) { memset (( u8 * ) Dtu3Detail . Property . LockNewPassword , 0 , 4 ); memset (( u8 * ) Dtu3Detail . Property . LockOldPassword , 0xff , 4 ); memcpy (( u8 * ) MIMajor [ PortNO ]. Property . Pass . PassWordSet . PWO , ( u8 * ) Dtu3Detail . Property . LockOldPassword , 4 ); memcpy (( u8 * ) MIMajor [ PortNO ]. Property . Pass . PassWordSet . PWN , ( u8 * ) Dtu3Detail . Property . LockNewPassword , 4 ); memcpy (( u8 * ) MIMajor [ PortNO ]. Property . Pass . PassWordSet . ATTime , ( u8 * ) Dtu3Detail . Property . Lock_Time , 2 ); } Wie funktioniert das Active Power Limit (0x0B) Sub Kommando Leistungsreduzierung HM300 \u00b7 Issue #35 \u00b7 tbnobody/OpenDTU https://github.com/tbnobody/OpenDTU/issues/35 Active Power Limit (0x0B) 21:06:33.342 > TX 51 72 61 55 82 78 56 34 12 81 0B 00 00 96 01 00 DC E0 BC 51 74 40 33 29 78 56 34 12 81 0b 00 00 96 01 00 dc e0 56 => 0x96 = dezimal 150, d.h. das sind 15.0 Watt 21:06:33.570 > Interrupt received 21:06:33.570 > 21:06:33.570 > >> RX OK: D1 72 61 55 82 72 61 55 82 81 00 00 0B 00 14 07 48 <0x51> <WR> <DTU> <0x81> <0x0b 0x00> <0x00 0x96> <0x01 0x00> <CRC16/modbus> <crc8> <Cmd> <target> <source> <subcmd> <limit> <?desc?-fix 0x01 0x00> <crc16/modbus> <crc8> Das mit dem 0x0B00 hatte ich irgendwie anders interpretiert, da er den Wert ja mit (u16)(SubCmd << 8) in UsartNrf_Send_DevControlUpdate() \u00fcbergibt und als u16 ControlMode in UsartNrf3_Send_PackDevControl() \u00fcbernimmt. Also wird aus dem SubCmd=0x0b -> Control Mode=0x0b00 . Und das wird dann wiederum als temp_dat[10] = 0x0b und temp_dat[11] = 0x00 an den NRF24 per USART \u00fcbergeben. P_Limit1 is the absolute value of the power limit, the unit is W, with 1 decimal place Dtu3Detail.Property.DRM_Limit_Switch oder Dtu3Detail.Property.SunSpec_Switch dann .Desc[0] = 0x00 .Desc[1] 0x01 Dtu3Detail.Property.Zero_Export_Switch oder Dtu3Detail.Property.Phase_Balance_Switch dann .Desc[0] = 0x00 .Desc[1] 0x00 Vielleicht w\u00e4re es \u00fcbersichtlicher, wenn du Desc[0] und [1] in der Reihenfolge vertauschst, das liest sich besser, so landet es ja am Ende im Befehl, erst [0] dann [1] Wie funktioniert das Reactive Power Limit Setzen (0x0D) Kommando 81 0C 00 00 64 00 0a ^^------------------- SingleFrameID ^^---------------- SubCmd bzw. DevControlType: 0x0C = Type_ReactivePowerContr ^^ ^^------------- Control Mode ^^ ^^------- PowerPFDev.SetValut 0x0064 = 4.0 W ^^ ^^- PowerPFDev.Desc das m\u00fcsste m.W. immer (?) mit 0x00 01 angegeben sein Sollte also 51 74403329 78563412 81 0D00 0000 0000 0601 14 oder sowas sein.... Schreibt halt m.W. einen PowerFactor, aber Du hast glaube ne DTU mit der Du das ggf. korrigieren kannst oder ? Wie funktioniert das Power Faktor Setzen (0x0D) Kommando 81 0D 00 00 64 00 0a ^^------------------- SingleFrameID ^^---------------- SubCmd bzw. DevControlType: 0x0D = Type_PFSet ^^ ^^------------- Control Mode ^^ ^^------- PowerPFDev.SetValut 0x0064 = 4.0 W ^^ ^^- PowerPFDev.Desc das m\u00fcsste m.W. immer (?) mit 0x00 01 angegeben sein Sollte also 51 74403329 78563412 81 0D00 0000 0000 0601 14 oder sowas sein.... Schreibt halt m.W. einen PowerFactor, aber Du hast glaube ne DTU mit der Du das ggf. korrigieren kannst oder ? Welche Parameter Setzen PARASET_ALL (0x52) Kommandos gibt es UsartNrf3_Send_PackSetPara() Sowas wie EleEnergySet 0x01 und AntitheftParaSet 0x04 EleEnergySet (0x01) AntitheftParaSet (0x04) Passwort setzen Welche File Multi-Package Kommandos gibt es Wie wird das DOWN_PRO (0x0E) / DOWN_DAT (0x0A) verwendet Type_Init ( 0xFF ) Das SubCmd = Type_Init ( 0xFF ) scheint nur bei MainCmd = DOWN_PRO ( 0x0E ) oder DOWN_DAT ( 0x0A ) verwendet zu werden. O&M > Grid Profile Management File Name Alias Device Ver. AT_TOR_Erzeuger_default Gen3 DE_VDE4105_2011 Gen3 DE_VDE4105_2018 Gen3 AT-OVE-E-8001 Gen2 Germany_VDE4105 Gen2 LN_50Hz Gen2 File Name: AT_TOR_Erzeuger_default File Name: DE_VDE4105_2011 File Name: DE_VDE4105_2018 File Name: AT-OVE-E-8001 File Name: Germany_VDE4105 File Name: LN_50Hz File Name: AT_TOR_Erzeuger_default SN Name Value Unit Range 1 AT_TOR_Erzeuger_default (?) 2 H/LVRT (?) 3 Nominal Voltage (NV) 230 V ~ 4 Low Voltage 1 (LV1) 184 V 170~184 5 LV1 Maximum Trip Time (MTT) 1.5 s ~ 6 High Voltage 1 (HV1) 255.3 V 253~270 7 HV1 Maximum Trip Time (MTT) 0.1 s ~ 8 Low Voltage 2 (LV2) 57.5 V ~ 9 LV2 Maximum Trip Time (MTT) 0.5 s ~ 10 High Voltage 2 (HV2) 264.5 V 264.5~275 11 HV2 Maximum Trip Time (MTT) 0.08 s ~ 12 10 mins Average High Voltage (AHV) 255.3 V 245~255.3 13 H/LFRT (?) 14 Nominal Frequency 50 Hz ~ 15 Low Frequency 1 (LF1) 47.5 Hz 47.5~49 16 LF1 Maximum Trip Time (MTT) 0.1 s ~ 17 High Frequency 1 (HF1) 51.5 Hz 50.5~51.5 18 HF1 Maximum Trip Time (MTT) 0.1 s ~ 19 Islanding Detection (?) 20 ID Function Activated 1 0~1 21 Reconnection (RT) (?) 22 Reconnect Time (RT) 60 s 10~300 23 Reconnect High Voltage (RHV) 250.7 V 240~250.7 24 Reconnect Low Voltage (RLV) 195.5 V 195.5~210 25 Reconnect High Frequency (RHF) 50.1 s 50.1~50.9 26 Reconnect Low Frequency (RLF) 47.5 s 47.5~49.9 27 Ramp Rates (RR) 28 Normal Ramp up Rate (RUR_NM) 20 Rated%/s 10~100 29 Soft Start Ramp up Rate (RUR_SS) 0.16 Rated%/s 0.1~10 30 Frequency Watt (FW) (?) 31 FW Function Activated 1 0~1 32 Start of Frequency Watt Droop (Fstart) 50.2 Hz 50.2~52 33 FW Droop Slope (Kpower_Freq) 40 Pn%/Hz 16.7~100 34 Recovery Ramp Rate (RRR) 0.16 Pn%/s 0.1~50 35 Volt Watt (VW) (?) 36 VW Function Activated 1 0~1 37 Start of Voltage Watt Droop (Vstart) 253 V ~ 38 End of Voltage Watt Droop (Vend) 257.6 V ~ 39 VW Droop Slope (Kpower_Volt) 21.74 Pn%/Hz ~ 40 Volt Var (VV) (?) 41 VV Function Activated 0 0~1 42 Voltage Set Point V1 211.6 V ~ 43 Reactive Set Point Q1 30 %Pn 0~50 44 Voltage Set Point V2 220.8 V ~ 45 Voltage Set Point V3 241.5 V ~ 46 Voltage Set Point V4 248.4 V ~ 47 Reactive Set Point Q4 30 %Pn 0~50 48 Specified Power Factor (SPF) (?) 49 SPF Function Activated 0 0~1 50 Power Factor (PF) v 0.95 0.9~1 51 Watt Power Factor (WPF) (?) 52 WPF Function Activated 0 0~1 53 Start of Power of WPF (Pstart) 50 %Pn ~ 54 Power Factor ar Rated Power (RFRP) 0.95 0.8~1 55 Active Power Control (APC) (?) 56 APC Function Activated 1 0~1 57 Power Ramp Rate (PRR) 100 Pn%/s 0.33~100 58 Reactive Power Control (RPC) (?) 59 RPC Function Activated 0 0~1 60 Reactive Power (VAR) v 0 %Sn 0~50 Save and generate new profile File Name: DE_VDE4105_2011 SN Name Value Unit Range 1 DE_VDE4105_2011 (?) 2 H/LVRT (?) 3 Nominal Voltage (NV) 230 V ~ 4 Low Voltage 1 (LV1) 184 V 170~184 5 LV1 Maximum Trip Time (MTT) 0.1 s ~ 6 High Voltage 1 (HV1) 264.5 V 264.5~270 7 HV1 Maximum Trip Time (MTT) 0.1 s ~ 8 10 mins Average High Voltage (AHV) 253 V 253~260 9 H/LFRT (?) 10 Nominal Frequency 50 Hz ~ 11 Low Frequency 1 (LF1) 47.5 Hz 47~49.5 12 LF1 Maximum Trip Time (MTT) 0.1 s ~ 13 High Frequency 1 (HF1) 51.5 Hz 50.5~53.5 14 HF1 Maximum Trip Time (MTT) 0.1 s ~ 15 Islanding Detection (?) 16 ID Function Activated 1 0~1 17 Reconnection (RT) (?) 18 Reconnect Time (RT) 65 s 10~300 19 Reconnect High Voltage (RHV) 264.5 V 253~264.5 20 Reconnect Low Voltage (RLV) 184 V 182~210 21 Reconnect High Frequency (RHF) 51.5 V 50.5~52 22 Reconnect Low Frequency (RLF) 47.5 V 47~49.5 23 Short Interruption Reconnect Time (SRT) 8 s ~ 24 Short Interruption Time (SIT) 3 s ~ 25 Ramp Rates (RR) 26 Normal Ramp up Rate (RUR_NM) 20 Rated%/s 10~100 27 Soft Start Ramp up Rate (RUR_SS) 10 Rated%/s 0.1~20 28 Active Power Control (APC) (?) 29 APC Function Activated 1 0~1 Save and generate new profile File Name: DE_VDE4105_2018 SN Name Value Unit Range 1 DE_VDE4105_2018 (?) 2 H/LVRT (?) 3 Nominal Voltage (NV) 230 V ~ 4 Low Voltage 1 (LV1) 184 V 160~195.5 5 LV1 Maximum Trip Time (MTT) 3 s 3~3 6 High Voltage 1 (HV1) 287.5 V 270~287.5 7 HV1 Maximum Trip Time (MTT) 0.1 s 0.1~0.1 8 Low Voltage 2 (LV2) 103.5 V 100~150 9 LV2 Maximum Trip Time (MTT) 0.3 s 0.3~0.3 10 10 mins Average High Voltage (AHV) 253 V 250~270 11 H/LFRT (?) 12 Nominal Frequency 50 Hz ~ 13 Low Frequency 1 (LF1) 47.5 Hz 47.5~49.9 14 LF1 Maximum Trip Time (MTT) 0.1 s 0.1~0.1 15 High Frequency 1 (HF1) 51.5 Hz 50.1~51.5 16 HF1 Maximum Trip Time (MTT) 0.1 s 0.1~0.1 17 Islanding Detection (?) 18 ID Function Activated 1 0~1 19 Reconnection (RT) (?) 20 Reconnect Time (RT) 60 s 10~300 21 Reconnect High Voltage (RHV) 253 V 240~253 22 Reconnect Low Voltage (RLV) 195.5 V 195.5~210 23 Reconnect High Frequency (RHF) 50.1 s 50.1~50.9 24 Reconnect Low Frequency (RLF) 47.5 s 47.5~49.9 25 Ramp Rates (RR) 26 Normal Ramp up Rate (RUR_NM) 20 Rated%/s 5~100 27 Soft Start Ramp up Rate (RUR_SS) 0.16 Rated%/s 0.1~10 28 Frequency Watt (FW) (?) 29 FW Function Activated 1 0~1 30 Start of Frequency Watt Droop (Fstart) 50.2 Hz 50.2~52 31 FW Droop Slope (Kpower_Freq) 40 Pn%/Hz 16.7~100 32 Recovery Ramp Rate (RRR) 0.16 Pn%/s 0.1~50 33 Recovery High Frequency (RVHF) 50.2 Hz 50.1~52 34 Recovery Low Frequency (RVLF) 49.8 Hz 49~49.9 35 Active Power Control (APC) (?) 36 APC Function Activated 1 0~1 37 Power Ramp Rate (PRR) 100 Pn%/s 0.33~100 38 Volt Var (VV) (?) 39 VV Function Activated 0 0~1 40 Voltage Set Point V1 213.9 V ~ 41 Reactive Set Point Q1 30 %Pn 0~100 42 Voltage Set Point V2 223.1 V ~ 43 Voltage Set Point V3 236.9 V ~ 44 Voltage Set Point V4 246.1 V ~ 41 Reactive Set Point Q4 30 %Pn 0~100 46 Specified Power Factor (SPF) (?) 47 SPF Function Activated 0 0~1 48 Power Factor (PF) v 0.95 0.9~1 49 Watt Power Factor (WPF) (?) 50 WPF Function Activated 0 0~1 51 Start of Power of WPF (Pstart) 50 %Pn ~ 52 Power Factor ar Rated Power (RFRP) 0.95 0.8~1 53 Reactive Power Control (RPC) (?) 54 RPC Function Activated 0 0~1 55 Reactive Power (VAR) v 0 %Sn 0~50 Save and generate new profile File Name: AT-OVE-E-8001 SN Name Value Unit Range 1 Voltage limits and trip time 2 Over voltage limit 264.5 V ~ 3 Under voltage limit 184 V ~ 4 Average over voltage 253.11 V 253~264.5 5 Frequency limits and trip time 6 Over frequency limit 51.5 Hz ~ 7 Under frequency limit 47.5 Hz ~ 8 Reconnect time 9 Short term reconnect time 8 s 5~10 10 Long term reconnect time 65 s 60~300 Save and generate new profile File Name: Germany_VDE4105 SN Name Value Unit Range 1 Voltage limits and trip time 2 Over voltage limit 264.5 V ~ 3 Under voltage limit 184 V ~ 4 Average over voltage 253 V 253~260 5 Frequency limits and trip time 6 Over frequency limit 51.5 Hz ~ 7 Under frequency limit 47.5 Hz ~ 8 Reconnect time 9 Short term reconnect time 8 s 5~10 10 Long term reconnect time 65 s 60~300 Save and generate new profile File Name: LN_50Hz SN Name Value Unit Range 1 Voltage limits and trip time 2 Over voltage limit 280 V ~ 3 Over voltage limit trip time 0.1 s ~ 4 Over voltage limit (slow) 255 V 240~270 5 Over voltage limit trip time (slow) 0.5 s 0.1~20 6 Under voltage limit 110 V ~ 7 Under voltage limit trip time 0.1 s ~ 8 Under voltage limit (slow) 170 V 170~220 9 Under voltage limit trip time (slow) 0.5 s 0.1~20 10 Frequency limits and trip time 11 Over frequency limit 54 Hz ~ 12 Over frequency limit trip time 0.1 s 0.05~1 13 Over frequency limit (slow) 53 Hz 50.2~54 14 Over frequency limit trip time (slow) 0.5 s 0.1~20 15 Under frequency limit 46 Hz ~ 16 Under frequency limit trip time 0.1 s 0.05~1 17 Under frequency limit (slow) 47 Hz 46~49.5 18 Under frequency limit trip time (slow) 0.5 s 0.1~20 19 Reconnect time 20 Long term reconnect time 180 s 20~800 Save and generate new profile Was bedeutet die Antwort ANSWER_EXCEPTION_MULTI_ONE 0xF1 bzw. ANSWER_EXCEPTION_ONE_MULTI 0xFF Das ist ein Fehler bzw. eine Fehlermeldung. #define ANSWER_EXCEPTION_MULTI_ONE 0xF1 #define ANSWER_EXCEPTION_ONE_MULTI 0XFF Fehler ist 0xF1 oder 0xFF je nachdem ob SingleFrame / MultiFrame Anfrage Funkverbindung Wird Auto-ACK vom Wechselrichter beim nRF24L01+ unterst\u00fctzt Tatsache ist, es ist sehr unwahrscheinlich, dass der WR antworten wird, wenn er nicht einmal ein ACK sendet. Reverse Engineering Wo und wie kann das Protokoll mitgeschnitten werden Mit einem Scanner (HackRF oder nRF24L01+) auf der/n Funkfrequenz/en Mit einem Logic Analyzer zwischen MCU und nRF24L01+ eine RX und eine TX Leitung zwischen den beiden Chips (UART). Der Mikrocontroller hat laut Datenblatt ([1], s.o.) genau eine serielle Schnittstelle, bei dem verbauten 32-pin-Geh\u00e4use sollten die hier sein: - P0.4 (Pin 7): RXD - P0.3 (Pin 10): TXD Was ist ein Scanner und welche gibt es Welche Scanner eingesetzt wurden: ich nutzte die von den Libs RF24 und nrf_hal.","title":"Protocol"},{"location":"protocol/#protokoll","text":"","title":"Protokoll"},{"location":"protocol/#welche-kanale-werden-fur-senden-empfangen-verwendet","text":"Soviel ich wei\u00df haben die nrf24l01 nur bis zu 126 Kan\u00e4le. // Depending on the program, the module can work on 2403, 2423, 2440, 2461 or 2475MHz. // Channel List 2403, 2423, 2440, 2461, 2475MHz Senden Kanal ~~2.403, 2.423,~~ 2.440, ~~2.461, 2.475~~ GHz Empfangen Kanal 2.403, 2.423, 2.440, 2.461, 2.475 GHz","title":"Welche Kan\u00e4le werden f\u00fcr Senden / Empfangen verwendet"},{"location":"protocol/#was-ist-channel-hopping","text":"Channel Hopping Empfangen, auf allen Kan\u00e4len Senden, meist auf Kanal 2,403 GHz ich wurde gerade hierauf verwiesen: https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk51.v9.0.0%2Fgzll_02_user_guide.html&cp=4_1_0_5_0 Kann es sein das dieses Gazell unser Channel hopping ist? Auch wenn sich oben genannte Doku auf einen nRF52833 bezieht steht bei den Features: Backward compatible with legacy nRF24L Series Gazell. hier scheint wohl so eine Implementierung des gzll Protokolls zu sein https://github.com/wangdong/cpod/blob/master/lib/nrf24/gazell/common/gzll.c Leider kann das wohl die nRF24 lib nicht. Das Kommunikationsschema von Gazell sieht aber IMHO anders aus. Das ist Device-getriggert und der Host lauscht erstmal nur und antwortet auf Anfragen der Devices. Insofern m\u00fcssten die HMs von sich aus auf einem Anker-Kanal \"ungefragt\" vor sich hin senden. Das tun sie aber nach aktuellem Kenntnisstand nicht, sondern antworten auf Anfragen des Hosts. Das Kommunikationsschema stellt sich f\u00fcr mich eher \"klassisch\" dar, also Anfrage Host->Device, dann Antwort Device->Host. Die max. Anzahl der f\u00fcr die DTUs spezifizierten \"Solarmodule\" ist mit 99 auch deutlich h\u00f6her, als die f\u00fcr Gazell maximal spezifizierten 8 Teilnehmer. zu den genutzten Frequenzen. Bei meinem HM-600 ist es immer so: Wenn ich ein 80 Telegramm sende auf 2403, dann antwortet der WR mit den Antworten 01,02,83 auf den m\u00f6glichen Frequenzen 2423,2440,2461 MHz. also bei TX 2403, Antworten auf 2423,2440,2461 bei TX 2423, Antworten auf 2403,2440,2475 bei TX 2440, Antworten auf 2403,2423,2475 bei TX 2461, Antworten auf 2403,2423,2475 bei TX 2475, Antworten auf 2403,2423,2440 Wenn man die m\u00f6glichen Frequenzen scannt nach dem Senden, dann empf\u00e4ngt man alle Antworten. Andere Antworten als 01,02,83 habe ich bisher nie empfangen.","title":"Was ist Channel Hopping"},{"location":"protocol/#wie-sehen-kommandos-oder-gesendete-empfangene-frames-aus","text":"0x7E 0x15 0x76 0x54 0x32 0x10 0x78 0x56 0x34 0x12 0x80 0x0B 0x00 0xXY .. [ 0x12 34 ] 0xCD 0x7F <SOF> <Cmd> <WR Serial Id> <DTU Serial Id> <Frm> <SubCmd> <Rev> <User data> [ <CRC16> ] <CRC8> <EOF>","title":"Wie sehen Kommandos oder gesendete / empfangene Frames aus"},{"location":"protocol/#was-ist-eine-singleframeid-sind-multiframeids","text":"Single Frame ID Die Single Frame ID ist 0x80 Multi Frame ID Multi Frame IDs werden f\u00fcr Nachrichten >12 Byte Payload verwendet. Multi Frame IDs beginnen mit 0x01 , 0x02 , ..., das letzte Paket enth\u00e4lt die Ende-Kennung 0x8N ( 0x80 | 0x0N Frame ID). Es darf also maximal 0x7F < 127 Pakete in einer Nachricht / Payload oder 1524 Bytes geben.","title":"Was ist eine SingleFrameID / sind MultiFrameIDs"},{"location":"protocol/#welche-prufsummen-crc-cyclic-redundancy-check-gibt-es-und-uber-welchen-teil-der-nachrichten-werden-sie-gebildet","text":"|<-------------------------------------------------------CRC8----------------------------------------------->| |<-------------CRC16 'modbus' f\u00fcr CRC_M----------------->| 7E 15 72 22 02 00 72 22 02 00 80 0B 00 62 09 04 9b 00 00 00 00 00 00 00 00 F2 68 F0 7F ^^ ^^ ^^^^^^^^^^^ ^^^^^^^^^^^ ^^ ^^^^^^^^^^^ ^^^^^ ^^ ^^ Bedeutung SOF MID WR ser# WR ser# CMD ? TIME (UTC) CRC_M CRC8 EOF","title":"Welche Pr\u00fcfsummen (CRC = Cyclic Redundancy Check) gibt es und \u00fcber welchen Teil der Nachrichten werden sie gebildet"},{"location":"protocol/#wie-wird-die-crc16-bzw-crc-modus-berechnet","text":"CRC-Berechnung, Einstellungen f\u00fcr HxD Erzeuge Pr\u00fcfsummen Verf\u00fcgbare Algorithmen: Benutzerdefiniertes CRC (16-Bit) (*) Markierte Daten Benutzerdefiniertes CRC... Benutzerdefiniertes CRC Bitbreite: (*) 16 Polynom: 8005 Startwert: FFFF Ausgabe XOR: 0000 Reflexion: [x] Eingabe [x] Ausgabe Ok Die CRC16 geht mit folgenden Einstellungen: CRC16 CRC width Bit length: (*) CRC-16 CRC parametrization (*) Custom CRC detailed parameters Input reflected: [ ] Result reflected: [x] Polynomial: 0x8005 Initial Value: 0xFFFF Final Xor Value: 0x0000 CRC Input Data (*) Bytes 0x00 0x00 Result CRC value: 0xB001 Oder kurz https://crccalc.com/?crc=0x0000&method=CRC-16/MODBUS&datatype=hex&outtype=0 CRC-16 \u00fcber die Daten nach der MultiFrameID berechnen: for ( i = 10 ; i < 24 ; i ++ ) { if (( i - 10 ) % 2 == 1 ) { TempCrc = ( u16 )( temp_dat [ i - 1 ] << 8 ) | ( temp_dat [ i ]); DatCrc = CalcCRC16t ( TempCrc , DatCrc ); } } temp_dat [ 24 ] = ( u8 )( DatCrc >> 8 ); temp_dat [ 25 ] = ( u8 )( DatCrc ); CRC16_MODBUS_POLYNOM 0xA001 ist in crc.h definiert, das ist wohl ein reversed CRC-16-IBM Polynomial. Wird u.a. f\u00fcr Bisync, Modbus , USB, ANSI X3.28, many others; also known as CRC-16 and CRC-16-ANSI verwendet.","title":"Wie wird die CRC16 bzw. CRC-Modus berechnet"},{"location":"protocol/#wie-wird-die-crc8-berechnet","text":"Die CRC8 l\u00e4\u00dft sich z.B. auf http://www.sunshine2k.de/coding/javascript/crc/crc_js.html berechnen: CRC8 CRC width Bit length: (*) CRC-8 CRC parametrization (*) Custom CRC detailed parameters Input reflected: [ ] Result reflected: [ ] Polynomial: 0x01 Initial Value: 0x00 Final Xor Value: 0x00 CRC Input Data (*) Bytes 0x51 0x81 0x10 0x15 0x07 0x81 0x10 0x15 0x07 0x81 0x00 0x00 0xB0 0x01 Result CRC value: 0x61 Oder ganz einfach mit https://crccalc.com/?crc=0x518110150781101507810000B001&method=CRC-8/ITU&datatype=hex&outtype=0 CRC8 \u00fcber alles berechnen temp_dat [ 26 ] = Get_crc_xor (( u8 * ) temp_dat , 26 ); #define CRC8_INIT 0x00 #define CRC8_POLY 0x01 #include \"crc.h\" uint8_t crc8 ( uint8_t buf [], uint8_t len ) { uint8_t crc = CRC8_INIT ; for ( uint8_t i = 0 ; i < len ; i ++ ) { crc ^= buf [ i ]; for ( uint8_t b = 0 ; b < 8 ; b ++ ) { crc = ( crc << 1 ) ^ (( crc & 0x80 ) ? CRC8_POLY : 0x00 ); } } return crc ; }","title":"Wie wird die CRC8 berechnet"},{"location":"protocol/#wie-kann-man-einen-zeitstempel-berechnen","text":"0x627b69fe = 1652255230 $ date --date = '@1652255230' Wed 11 May 2022 09 :47:10 AM CEST 62D80183 ist der Timestamp im UNIX Epoch Format: $ date --date = \"@ $( echo 'ibase=16; 62D80183' | bc ) \" '+%F %H:%M:%S' 2022 -07-20 15 :22:11 Geht auch umgekehrt: $ echo \"obase=16; $( date --date = '2022-07-01 00:00:00' +%s ) \" | bc 62BE1CE0 bash commands mal in alias einbauen^^ $ date --date = \"@ $( echo 'ibase=16; 62D80707' | bc ) \" '+%F %H:%M:%S' 2022 -07-20 14 :45:43","title":"Wie kann man einen Zeitstempel berechnen"},{"location":"protocol/#was-sind-backwardforwardsubstitution","text":"ForwardSubstitution und BackwardSubsitution sind eine Escape- und Unescape-Verfahren f\u00fcr die nRF24 Schnittstelle. Da die Bytes Start of Frame 0x7E und End of Frame 0x7F reservierte Zeichen sind mu\u00df ggf. deren Auftreten ersetzt werden. Da 0x7E und 0x7F Steuerzeichen (Start Of Frame und End Of Frame) sind m\u00fcssen diese Escaped werden. Daf\u00fcr muss das Zeichen 0x7D herhalten, daher muss es auch Escaped werden. R\u00fcckw\u00e4rts gehts eben genau umgekehrt. Dies erfolgt anhand folgender \u00dcbersetzungstabelle: Backward ForwardSubstitution 0x7D 0x7D5D 0x7E 0x7D5E 0x7F 0x7D5F Hier wird 0x7D5F anstelle von 0x7F bzw. 0x7D5E anstelle von 0x7E und 0x7D5D anstelle von 0x7D verwendet. Ich hatte mich schon gewundert warum manche Pakete l\u00e4nger sind als andere =^D","title":"Was sind Backward/ForwardSubstitution"},{"location":"protocol/#welche-kommandos-maincmd-und-sub-kommandos-subcmd-gibt-es","text":"MainCmd: 0x51 DEVCONTROL_ALL SubCmd / Control Type: Type_TurnOff = 0x01 + 0x00 wegen den Bitshifts bei der \u00dcbergabe des Parameters ? Verbindungsstatus HM 7E 06 81101507 81101507 00 06 7F 7E 06 81101507 81101507 00 06 7F Verbindungsstatus MI 7E 06 63500316 63500316 00 06 7F // MainCmd REQ_RF_SVERSISON 0x06 7E 06 63500316 63500316 00 06 7F 7E 06 63500316 63500316 00 06 7F Autoscan und Scan nach dem MI 7E 01 73600117 73600117 00 01 7F // MainCmd CHANGE_MOD_2M_250K 0x01 Change Baud rate to 250kHz, SubCmd = 0x00 Autoscan und Scan nach dem MI 7E 02 63500316 63500316 00 02 7F // MainCmd BROADCAST 0x02, SubCmd = 0x00 Suche nach HM-WR ID aus dem System: 7E 02 81101507 81101507 00 02 7F // MainCmd BROADCAST 0x02, SubCmd = 0x00 51 63500316 63500316 5A5A 34 0C60 09 52 3168 // MainCmd CONTROL_LOCK_MI__LIMIT_POWER_ONOFF 0x51, SubCmd CONTROL_LIMIT_POWER_SUB 0x5A5A danke f\u00fcr die Traces F\u00fcr MI-WR: MainCmd: 0x01 CHANGE_MOD_2M_250K 0x02 BROADCAST 0x06 REQ_RF_SVERSISON 0x07 REQ_RF_RVERSISON mit SubCmd = 0x00 alle in UsartNrf_Send_NetCmdToNrfCmd(). 0x0F REQ_VERSISON in UsartNrf_Send_PackNrfCmd() bzw. UsartNrf_Send_PackBaseCommand() Ausgewertet wird bei 0x81 ANSWER_CHANGE_MOD_2M_250K direkt in UsartNrf_Process_Loop() und 0x02 BROADCAST in UsartNrf_Process_Inverter_NetCmd_SearchId() 0x86 ANSWER_REQ_RF_SVERSISON in UsartNrf_Process_Inverter_Version() bzw. UsartNrf_Process_Inverter_Version_InverterRf 0x87 ANSWER_REQ_RF_RVERSISON in UsartNrf_Process_Inverter_Version_DtuRf(), 0x8F ANSWER_REQ_VERSISON in UsartNrf_Process_Version_Inverter(), F\u00fcr den HM-WR: UsartNrf3_Send_Mi_Nrf_VER() mit temp_dat[0] = 0x06 (= MainCmd) die Auswertung erfolgt in UsartNrf_Process_Inverter_Version_InverterRf() Seriennummer Deiner DTU-PRO posten, damit ich mir mal die CRC Pr\u00fcfsummen ansehen kann. Ich bekomme die n\u00e4mlich noch nicht sauber hin. 10F873600117 Die m\u00fcssten noch in die Markdown Dokumentation auf grindylow-ahoy/docs/hoymiles-format-description.md aber ich w\u00fcrde das vermutlich erst machen, wenn ich die anderen Kommandos ebenfalls verstanden habe. Wenn Du willst kannst Du es aber gerne schon mal anfangen / weitermachen. Ich habe vor einiger Zeit auch schon mal angefangen mit wavedrom einzelne Pakete bzw. Kommandos zu dokumentieren. Aber bisher war ja au\u00dfer dem 0x0B RealTimeRunData_Debug bzw. \"Zeit setzen\" und damit Werte abfragen noch nicht so viel bekannt.","title":"Welche Kommandos (MainCmd) und Sub Kommandos (SubCmd) gibt es ?"},{"location":"protocol/#traces-der-dtu-pro","text":"Verschiedene Leistungen, ganzes File folgt in K\u00fcrze, das ist unformatiert zum Schluss hin ist es maximale Leistung, davor etwa 350-450W schwankend 63500316 ist der MI-600 (Klon) @Ichirou 81101507 ist der HM-1500 @Ichirou 112172615582 ist ein HM-600 @klahus1","title":"Traces der DTU Pro"},{"location":"protocol/#mi-kommandos","text":"Device Info: 7E 09 63500316 63500316 00 09 7F // ??? Data A 7E 11 63500316 63500316 00 11 7F // ??? Data B Device Control: 7E 51 63500316 63500316 5A5A 25 08CC B0 7F // Power Limit 37% ??? 7E 51 63500316 63500316 5A5A 5D 15CC D5 7F // Power Limit 93% ???","title":"MI Kommandos"},{"location":"protocol/#broadcast-0x02","text":"BROADCAST ist MainCmd 0x02 und SubCmd 0x00. Also m.E. 02 72615582 78563412 00 CRC8 Tausche mal noch die DTU ID gegen die richtige, sonst antwortet der WR sich selbst. traces 23:01:43.299 > Fetch inverter: 112172615582 23:01:43.299 > sendCommand: BROADCAST 23:01:43.302 > >>> Command BROADCAST <<< 23:01:43.305 > 23:01:43.305 > sendStatsRequest 23:01:43.308 > sendAlarmLogRequest 23:01:43.308 > sendEsbPacket 23:01:43.310 > TX 02 72 61 55 82 78 56 34 12 00 CE 23:01:45.341 > RX Period End 23:01:45.342 > All missing 23:01:45.342 > Nothing received, resend whole request 23:01:45.347 > TX 02 72 61 55 82 78 56 34 12 00 CE 23:01:47.373 > RX Period End 23:01:47.373 > All missing 23:01:47.373 > Nothing received, resend whole request 23:01:47.378 > TX 02 72 61 55 82 78 56 34 12 00 CE 23:01:49.404 > RX Period End 23:01:49.404 > All missing 23:01:49.404 > Nothing received, resend whole request 23:01:49.409 > TX 02 72 61 55 82 78 56 34 12 00 CE 23:01:51.434 > RX Period End 23:01:51.435 > All missing 23:01:51.435 > Nothing received, resend count exeeded TX 02 72615582 78563412 00 CE","title":"BROADCAST 0x02"},{"location":"protocol/#_1","text":"Es gibt im Original Code eine Methode um die Baudrate zu \u00e4ndern: GetInveterBaudType und CHANGE_MOD_2M_250K bzw. typedef enum { Device_250K = 1 , Device_2M = 0 , Device_INIT_BAUD = 3 } BaudType ; die Definition des BROADCAST Command #define BROADCAST 0x02 //Query network terminal device ID #define ANSWER_REQHOST (BROADCAST | 0x80 | 0x40) #define ANSWER_BROADCAST (BROADCAST | 0x80) #define BROADCAST_ON 0x18 //Query the status of terminal A channel #define ANSWER_BROADCAST_ON (BROADCAST_ON | 0x80) #define REQ_NUB_BROADCAST 0x03 // Request the number of broadcast commands #define ANSWER_REQ_NUB_BROADCAST (REQ_NUB_BROADCAST | 0x80) //83 und hier die Methode UsartNrf_Process_Inverter_NetCmd_SearchId : /*********************************************** ** Function name: Second-generation protocol, broadcast command, search id, receive receipt processing ** Descriptions: ** input parameters: ** output parameters: ** Returned value: *************************************************/ void UsartNrf_Process_Inverter_NetCmd_SearchId ( u8 * pBuffer ) { static vu16 PortCnt = 0 ; vu16 i ; if ( PortCnt == 0 ) { PortCnt = Dtu3Detail . Property . PortNum ; //Total number of connections } for ( i = 0 ; i < PortCnt ; i ++ ) { if ((( memcmp ( & ( pBuffer [ 10 ]), ( u8 * ) MIMajor [ i ]. Property . Pre_Id , 2 ) != 0 ) || ( memcmp ( & ( pBuffer [ 12 ]), ( u8 * ) MIMajor [ i ]. Property . Id , 4 ) != 0 )) && (( pBuffer [ 11 ] & 0xf0 ) <= 0x60 )) { memcpy (( u8 * ) MIMajor [ PortCnt ]. Property . Pre_Id , ( & pBuffer [ 10 ]), 2 ); memcpy (( u8 * ) MIMajor [ PortCnt ]. Property . Id , ( & pBuffer [ 2 ]), 4 ); // The original network id remains unchanged, and the subsequent insert id if ( UsartNrf_GetInvterType (( u8 * ) MIMajor [ PortCnt ]. Property . Pre_Id ) == Inverter_500 ) { if (( MIMajor [ PortCnt ]. Property . Port != MI_500W_A ) && ( MIMajor [ PortCnt ]. Property . Port != MI_500W_B )) { memcpy (( u8 * ) & ( MIMajor [ PortCnt + 1 ]. Property . Id [ 0 ]), ( u8 * ) & MIMajor [ PortCnt ]. Property . Id [ 0 ], sizeof ( MIMajor [ PortCnt ]. Property . Id )); memcpy (( u8 * ) & ( MIMajor [ PortCnt + 1 ]. Property . Pre_Id [ 0 ]), ( u8 * ) & MIMajor [ PortCnt ]. Property . Pre_Id [ 0 ], sizeof ( MIMajor [ PortCnt ]. Property . Pre_Id )); MIMajor [ PortCnt ]. Property . Port = MI_500W_A ; MIMajor [ PortCnt + 1 ]. Property . Port = MI_500W_B ; Dtu3Detail . Property . PortNum = Dtu3Detail . Property . PortNum + 2 ; } } else if ( UsartNrf_GetInvterType (( u8 * ) MIMajor [ PortCnt ]. Property . Pre_Id ) == Inverter_1000 ) { if (( MIMajor [ PortCnt ]. Property . Port != MI_1000W_A ) && ( MIMajor [ PortCnt ]. Property . Port != MI_1000W_B ) && ( MIMajor [ PortCnt ]. Property . Port != MI_1000W_C ) && ( MIMajor [ PortCnt ]. Property . Port != MI_1000W_D )) { memcpy (( u8 * ) & MIMajor [ PortCnt + 1 ]. Property . Id [ 0 ], ( u8 * ) & MIMajor [ PortCnt ]. Property . Id [ 0 ], sizeof ( MIMajor [ PortCnt ]. Property . Id )); memcpy (( u8 * ) & MIMajor [ PortCnt + 1 ]. Property . Pre_Id [ 0 ], ( u8 * ) & MIMajor [ PortCnt ]. Property . Pre_Id [ 0 ], sizeof ( MIMajor [ PortCnt ]. Property . Pre_Id )); memcpy (( u8 * ) & MIMajor [ PortCnt + 2 ]. Property . Id [ 0 ], ( u8 * ) & MIMajor [ PortCnt ]. Property . Id [ 0 ], sizeof ( MIMajor [ PortCnt ]. Property . Id )); memcpy (( u8 * ) & MIMajor [ PortCnt + 2 ]. Property . Pre_Id [ 0 ], ( u8 * ) & MIMajor [ PortCnt ]. Property . Pre_Id [ 0 ], sizeof ( MIMajor [ PortCnt ]. Property . Pre_Id )); memcpy (( u8 * ) & MIMajor [ PortCnt + 3 ]. Property . Id [ 0 ], ( u8 * ) & MIMajor [ PortCnt ]. Property . Id [ 0 ], sizeof ( MIMajor [ PortCnt ]. Property . Id )); memcpy (( u8 * ) & MIMajor [ PortCnt + 3 ]. Property . Pre_Id [ 0 ], ( u8 * ) & MIMajor [ PortCnt ]. Property . Pre_Id [ 0 ], sizeof ( MIMajor [ PortCnt ]. Property . Pre_Id )); MIMajor [ PortCnt ]. Property . Port = MI_1000W_A ; MIMajor [ PortCnt + 1 ]. Property . Port = MI_1000W_B ; MIMajor [ PortCnt + 2 ]. Property . Port = MI_1000W_C ; MIMajor [ PortCnt + 3 ]. Property . Port = MI_1000W_D ; Dtu3Detail . Property . PortNum = Dtu3Detail . Property . PortNum + 4 ; } } else if ( UsartNrf_GetInvterType (( u8 * ) MIMajor [ PortCnt ]. Property . Pre_Id ) == Inverter_250 ) { MIMajor [ PortCnt ]. Property . Port = MI_250W ; // 0x01 Dtu3Detail . Property . PortNum = Dtu3Detail . Property . PortNum + 1 ; } if ( UsartNrf_GetInvterType (( u8 * ) MIMajor [ PortCnt ]. Property . Pre_Id ) == Inverter_250 ) { PortCnt = PortCnt + 1 ; i = i + 1 ; } else if ( UsartNrf_GetInvterType (( u8 * ) MIMajor [ PortCnt ]. Property . Pre_Id ) == Inverter_500 ) { PortCnt = PortCnt + 2 ; i = i + 2 ; } else if ( UsartNrf_GetInvterType (( u8 * ) MIMajor [ PortCnt ]. Property . Pre_Id ) == Inverter_1000 ) { PortCnt = PortCnt + 4 ; i = i + 4 ; } MIReal [ PortNO ]. Data . NetStatus = ( u8 )(( PortCnt * 100 ) / PORT_LEN ); if ( PortCnt >= PORT_LEN ) { return ; } return ; } } return ; }","title":""},{"location":"protocol/#hm-kommandos","text":"7E 15 81101507 81101507 FF EA 7F ??? Retransmits: 7E 15 81101507 81101507 82 97 7F 7E 15 81101507 81101507 83 96 7F 7E 15 81101507 81101507 84 91 7F 7E 15 81101507 81101507 85 90 7F 7E 15 81101507 81101507 86 93 7F 7E 15 81101507 81101507 87 92 7F 7E 15 81101507 81101507 88 9D 7F 7E 15 81101507 81101507 89 9C 7F 7E 15 81101507 81101507 8A 9F 7F 7E 15 81101507 81101507 8B 9E 7F Device Info: RealTimeRunData_Debug 0x0B mit verschiedenen Zeitstempeln 7E 15 81101507 81101507 80 0B00 62D806F7 0000 259C 00000000 2C4F 0F 7F 7E 15 81101507 81101507 80 0B00 62D806F9 0000 259C 00000000 4C03 2D 7F 7E 15 81101507 81101507 80 0B00 62D806FA 0000 259C 00000000 BC17 CA 7F 7E 15 81101507 81101507 80 0B00 62D806FB 0000 259C 00000000 2C1A 56 7F AlarmData 0x11 7E 15 81101507 81101507 80 1100 62D806FC 0000 259C 0000 0000 C627 9C 7F Device Control: 7E 51 81101507 81101507 81 0B00 2B98 0000 6B89 8A 7F // Active Power Limit 0x0B; 0x2B98 = 1116.0 W","title":"HM Kommandos"},{"location":"protocol/#welche-device-info-req_arw_dat_all-0x15-sub-kommandos-gibt-es","text":"source code typedef enum { InverterDevInform_Simple = 0 , // 0x00 InverterDevInform_All = 1 , // 0x01 GridOnProFilePara = 2 , // 0x02 HardWareConfig = 3 , // 0x03 SimpleCalibrationPara = 4 , // 0x04 SystemConfigPara = 5 , // 0x05 RealTimeRunData_Debug = 11 , // 0x0b RealTimeRunData_Reality = 12 , // 0x0c RealTimeRunData_A_Phase = 13 , // 0x0d RealTimeRunData_B_Phase = 14 , // 0x0e RealTimeRunData_C_Phase = 15 , // 0x0f //Alarm data - all unsent alarms AlarmData = 17 , // 0x11 //Alarm data - all pending alarms AlarmUpdate = 18 , // 0x12 RecordData = 19 , // 0x13 InternalData = 20 , // 0x14 GetLossRate = 21 , // 0x15 GetSelfCheckState = 30 , // 0x1e InitDataState = 0xff , // 0xFF } DataType ; SubCmd = * InverterDevInform_Simple (0x00) * GridOnProFilePara (0x02) * HardWareConfig (0x03) ??? * SimpleCalibrationPara (0x04) ??? * SystemConfigPara (0x05) ??? * RealTimeRunData_Debug (0x0B) * RealTimeRunData_Reality (0x0C) * RealTimeRunData_A_Phase (0x0D) ??? * RealTimeRunData_B_Phase (0x0E) ??? * RealTimeRunData_C_Phase (0x0F) ??? * AlarmData (0x11) * AlarmUpdate (0x12) * RecordData (0x13) * InternalData (0x14) ??? * ~~GetLossRate (0x15) ???~~ * ~~GetSelfCheckState (0x1E) ???~~ Bei allen anderen Anfragen erfolgt vorher ein CurNetCmd = NET_INIT, also MainCmd = REQ_ARW_DAT_ALL (0x15) und SubCmd = RealTimeRunData_Reality (0x0c) bzw. RealTimeRunData_Debug (0x0b). Wir verwenden ja schon l\u00e4nger den zweiten Fall 0x0b f\u00fcr die Status Meldungen 15 72 61 55 82 78 56 34 12 80 0X00 <timestamp> 0000 0000 00000000 CRC16 CRC8 f\u00fcr X 0, 1, 2, 3, 4, 5 ? Auf irgendeinen dieser DevInform Anfragen muss der WR doch antworten ? Das selbe verwenden wir ja schon lange mit RealTimeRunData_Debug 0x0B. Ja, dass w\u00e4re sch\u00f6n. Vorallem HW Rev und FW Rev sind relevant. 15 72 61 55 82 78 56 34 12 80 0000 <timestamp> 0000 0000 00000000 CRC16 CRC8 // InverterDevInform_Simple 0x00 15 72 61 55 82 78 56 34 12 80 0100 <timestamp> 0000 0000 00000000 CRC16 CRC8 // InverterDevInform_All 0x01 15 72 61 55 82 78 56 34 12 80 0200 <timestamp> 0000 0000 00000000 CRC16 CRC8 // GridOnProFilePara 0x02 15 72 61 55 82 78 56 34 12 80 0300 <timestamp> 0000 0000 00000000 CRC16 CRC8 // HardWareConfig 0x03 15 72 61 55 82 78 56 34 12 80 0400 <timestamp> 0000 0000 00000000 CRC16 CRC8 // SimpleCalibrationPara 0x04 15 72 61 55 82 78 56 34 12 80 0500 <timestamp> 0000 0000 00000000 CRC16 CRC8 // SystemConfigPara 0x05 15 72 61 55 82 78 56 34 12 80 0C00 <timestamp> 0000 0000 00000000 CRC16 CRC8 // RealTimeRunData_Reality 0x0C 15 72 61 55 82 78 56 34 12 80 1400 <timestamp> 0000 0000 00000000 CRC16 CRC8 // InternalData 0x14 15 72 61 55 82 78 56 34 12 80 1500 <timestamp> 0000 0000 00000000 CRC16 CRC8 // GetLossRate 0x15 15 72 61 55 82 78 56 34 12 80 1E00 <timestamp> 0000 0000 00000000 CRC16 CRC8 // GetSelfCheckState 0x1E welches Format hat der TimeStamp? Timestamp sind 4 Byte wie \u00fcblich. Unix Epoch Format @drschiffler hier sind schon mal die ersten DevInform Anfragen und Antworten interpretiert anhand des DTU-Pro Source Codes. Falls Du neben dem DevControl auch die o.g. DevInform Pakete einbauen m\u00f6chtest ? Speziell das -vvv- u.g. InverterDevInform_Simple ist hilfreich, da es u.a. die Hardware und Firmware Version beinhaltet!","title":"Welche Device Info REQ_ARW_DAT_ALL (0x15) Sub Kommandos gibt es"},{"location":"protocol/#wie-funktioniert-das-status-selbst-prufen-getselfcheckstate-0x1e-sub-kommando","text":"Interessant w\u00e4re auch: GetSelfCheckState: // 0x1e Da kann man die Serial ID und SW/HW Version des Wechselrichters auslesen... 15 74403329 78563412 80 1100 62D80183 0000 0000 00000000 0765 FE --- AlarmData 0x11 15 74403329 78563412 80 1200 62D80183 0000 0000 00000000 FFC4 2A --- AlarmUpdate 0x12 15 74403329 78563412 80 1E00 62D80183 0000 0000 00000000 086A 0E --- GetSelfCheckState 0x1E ^^------------------------------------------------------------------ MainCmd 0x15 REQ_ARW_DAT_ALL ^^^^^^^^--------------------------------------------------------- WR Serial ID ^^^^^^^^------------------------------------------------ DTU Serial ID ^^--------------------------------------------- MultiFrameID 0x80 ^^------------------------------------------ SubCmd bzw. DataType: 0x11 = AlarmData, 0x12 AlarmUpdate ^^---------------------------------------- rev Protocol Revision ? ^^^^^^^^------------------------------- UNIX timestamp 62BE1CE0 -> 2022-07-01 00:00:00 ^^^^-------------------------- Gap always 0x0000 ^^^^--------------------- 0x0000, nur bei AlarmData: WarnSerNub (Warning Serial Number) ^^^^^^^^------------ Password always 0x0000 ^^^^------- CRC16 / CRC-Modbus \u00fcber die UserData, excl. Frame ID! ^^---- CRC8 MainCmd 0x15 , 0x80 MultiFrameID, SubCmd GetSelfCheckState 0x1E , Timestamp wie oben, Gap ist 0x0000 und Password ist 0x00000000 Probiere mal: 15 74403329 78563412 80 1E00 62D80183 0000 0000 00000000 086A 0E --- GetSelfCheckState 0x1E Transmit 27 | 15 74 40 33 29 78 56 34 12 80 1E 00 62 D8 01 83 00 00 00 00 00 00 00 00 08 6A F7 Received 21 bytes channel 23: 95 74 40 33 29 74 40 33 29 81 00 01 00 00 00 00 00 00 CB 50 8E Payload: 00 01 00 00 00 00 00 00 cb 50 Das erste Byte 0x95 ist die Antwort 0x15 | 0x80 = 0x95","title":"Wie funktioniert das Status selbst Pr\u00fcfen GetSelfCheckState (0x1E) Sub Kommando"},{"location":"protocol/#inverterdevinform_simple-0x00","text":"traces 23:41:51.618 > Fetch inverter: 112172615582 23:41:51.618 > sendCommand: InverterDevInform_Simple 23:41:51.623 > sendEsbPacket 23:41:51.623 > TX 15 72 61 55 82 78 56 34 12 80 00 00 62 E6 F7 1F 00 00 00 00 00 00 00 00 24 A3 B2 23:41:51.683 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 81 27 1A 10 10 10 15 02 00 03 00 20 01 00 00 6C 17 77 23:41:51.871 > RX Period End 23:41:51.871 > Success jetzt geht es ans parsen... @klahus1 Danke f\u00fcrs loggen, hier die Antwort, da kann jetzt jeder seine HW Version und Firmware Version \u00fcberpr\u00fcfen! TX 15 72615582 78563412 80 0000 62E6F71F 0000 00000000 0000 24A3 B2 InverterDevInform_Simple 0x00 RX 95 72615582 72615582 81 271A 1010 1015 0200 0300 2001 0000 6C17 77 ^^^^--------------------------------------- AppFWBuild_VER Application version ^^^^---------------------------------- HW_PNH Hardware part number ^^^^----------------------------- HW_PNL Hardware part number ^^^^------------------------ HW_VER Hardware version ^^^^------------------- GPFCode Grid-connected protection file code ^^^^-------------- GPFVer Grid-connected protection file version ^^^^\u207b-------- ReservedPara Reserved parameters Weiter gehts:","title":"InverterDevInform_Simple | 0x00"},{"location":"protocol/#inverterdevinform_all-0x01","text":"traces 23:55:48.318 > Fetch inverter: 112172615582 23:55:48.318 > sendCommand: InverterDevInform_All 23:55:48.323 > sendEsbPacket 23:55:48.323 > TX 15 72 61 55 82 78 56 34 12 80 01 00 62 E6 FA 64 00 00 00 00 00 00 00 00 ED 24 8B 23:55:48.386 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 81 27 1A 07 E4 02 C3 05 84 00 66 00 00 00 00 84 F4 9C 23:55:48.570 > RX Period End 23:55:48.570 > Success Hier scheint irgendwas mit der Antwort noch nicht ganz zu passen, u.a. ist bereits die HW_PNH eine andere als bei der InverterDevInform_Simple Antwort. Die laut DTU-Pro vorhandenen Details danach sind offenbar auch nicht enthalten. Hmm. TX 15 72615582 78563412 80 0100 62E6FA64 0000 00000000 0000 ED24 8B InverterDevInform_All 0x01 RX 95 72615582 72615582 81 271A 07E4 02C3 0584 0066 0000 0000 84F4 9C UsartNrf3_Process_DevInform_All() ^^^^--------------------------------------- AppFWBuild_VER Application version ^^^^---------------------------------- AppFWBuild_YYYY Application firmware compilation time-year ^^^^----------------------------- AppFWBuild_MMDD Application firmware compilation time-month. day ^^^^------------------------ AppFWBuild_HHMM Application version ^^^^------------------- USFWBuild_VER Hardware part number ^^^^-------------- HW_PNH Hardware part number ^^^^--------- AppFW_PNL Hardware part number ^^^^--------- AppFW_PNL Hardware part number ??? ^^^^--------- HWSPECVER Hardware version ??? ^^^^--------- GPFCode Grid-connected protection file code ??? ^^^^--------- GPFVer Grid-connected protection file version ??? Was bedeutet hier eigentlich nochmals 95 als Byte? F1 bedeutet ja, das er die Anfrage verworfen hat. Und 95? Das ist die Antwort auf die Anfrage mit 0x15. Es ist immer +0x80 zw. Anfrage und Antwort. 0x51 -> 0xD1 You are right \ud83d\ude05","title":"InverterDevInform_All | 0x01"},{"location":"protocol/#hardwareconfig-0x03","text":"traces 1 22:02:09.582 > Fetch inverter: 112172615582 22:02:09.583 > 22:02:09.583 > >>> sendCommand: HardWareConfig | 0x03 | 3 22:02:09.588 > 22:02:09.588 > sendEsbPacket 22:02:09.588 > TX 15 72 61 55 82 78 56 34 11 80 03 00 62 E8 31 41 00 00 00 00 00 00 00 00 8F C1 ED 22:02:09.643 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 01 00 01 10 10 10 15 02 00 10 10 00 00 27 10 00 B0 15 22:02:09.678 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 02 00 01 A7 F0 3D 46 66 66 3E 66 29 5F 3B 4B 33 9C 4B 22:02:09.740 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 03 3C 22 D7 0A 3C A3 B3 68 3E 2A F8 38 3D 42 00 00 BA 22:02:09.794 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 04 40 60 00 00 40 C0 66 66 3F A6 CC CD 41 2C EB 85 AA 22:02:09.835 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 05 3F 91 00 00 42 3C 00 00 43 11 00 00 43 E1 00 00 B0 22:02:09.897 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 06 43 66 00 00 43 52 7A E1 3F 74 00 00 41 80 00 00 B6 22:02:09.933 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 07 42 70 00 00 41 B0 00 00 42 70 00 00 41 38 F5 C3 2C 22:02:09.992 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 88 3F 88 00 00 42 B4 5C 29 3E 0F 00 00 42 BE 44 FE 5E 22:02:10.634 > RX Period End 22:02:10.634 > Middle missing 22:02:10.634 > Request retransmit: 5 22:02:10.637 > TX 15 72 61 55 82 78 56 34 11 85 5F 22:02:10.687 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 05 3F 91 00 00 42 3C 00 00 43 11 00 00 43 E1 00 00 B0 22:02:10.725 > RX Period End 22:02:10.726 > Middle missing 22:02:10.726 > Request retransmit: 5 22:02:10.728 > TX 15 72 61 55 82 78 56 34 11 85 5F 22:02:10.774 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 05 3F 91 00 00 42 3C 00 00 43 11 00 00 43 E1 00 00 B0 22:02:10.817 > RX Period End 22:02:10.817 > Middle missing Hier war es anscheinend nicht m\u00f6glich eine erfolgreiche Nachricht vom WR zu erhalten. Hast du es \u00f6fters probiert? nein, nur einmal Ok danke. :) ich versuche gerade was daraus zu lesen. traces 2 22:49:42.341 > Fetch inverter: 112172615582 22:49:42.341 > 22:49:42.341 > >>> sendCommand: HardWareConfig | 0x03 | 3 22:49:42.346 > 22:49:42.346 > sendEsbPacket 22:49:42.346 > TX 15 72 61 55 82 78 56 34 11 80 03 00 62 E8 3C 66 00 00 00 00 00 00 00 00 84 EF E2 22:49:42.414 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 01 00 01 10 10 10 15 02 00 10 10 00 00 27 10 00 B0 15 22:49:42.453 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 02 00 01 A7 F0 3D 46 66 66 3E 66 29 5F 3B 4B 33 9C 4B 22:49:42.494 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 03 3C 22 D7 0A 3C A3 B3 68 3E 2A F8 38 3D 42 00 00 BA 22:49:42.531 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 04 40 60 00 00 40 C0 66 66 3F A6 CC CD 41 2C EB 85 AA 22:49:42.590 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 05 3F 91 00 00 42 3C 00 00 43 11 00 00 43 E1 00 00 B0 22:49:42.647 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 06 43 66 00 00 43 52 7A E1 3F 74 00 00 41 80 00 00 B6 22:49:42.687 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 07 42 70 00 00 41 B0 00 00 42 70 00 00 41 38 F5 C3 2C 22:49:42.747 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 88 3F 88 00 00 42 B4 5C 29 3E 0F 00 00 42 BE 44 FE 5E 22:49:45.392 > RX Period End 22:49:45.393 > Middle missing 22:49:45.393 > Request retransmit: 5 22:49:45.395 > TX 15 72 61 55 82 78 56 34 11 85 5F 22:49:45.441 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 05 3F 91 00 00 42 3C 00 00 43 11 00 00 43 E1 00 00 B0 22:49:45.484 > RX Period End 22:49:45.484 > Middle missing 22:49:45.484 > Request retransmit: 5 22:49:45.487 > TX 15 72 61 55 82 78 56 34 11 85 5F 22:49:45.575 > RX Period End 22:49:45.575 > Middle missing 22:49:45.575 > Request retransmit: 5 22:49:45.578 > TX 15 72 61 55 82 78 56 34 11 85 5F 22:49:45.615 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 05 3F 91 00 00 42 3C 00 00 43 11 00 00 43 E1 00 00 B0 22:49:45.666 > RX Period End 22:49:45.666 > Middle missing 22:49:45.666 > Request retransmit: 5 22:49:45.669 > TX 15 72 61 55 82 78 56 34 11 85 5F 22:49:45.703 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 05 3F 91 00 00 42 3C 00 00 43 11 00 00 43 E1 00 00 B0 22:49:45.757 > RX Period End 22:49:45.757 > Middle missing 22:49:45.757 > Request retransmit: 5 22:49:45.760 > TX 15 72 61 55 82 78 56 34 11 85 5F 22:49:45.848 > RX Period End 22:49:45.848 > Middle missing 22:49:45.848 > Retransmit timeout Hmm \ud83e\udd14 Die Ahoy DTU hat aktuell ein Limit f\u00fcr max. 5 Antwort Pakete im Source Code, daher ist nach dem 5ten empfangenen Paket Schluss. @klahus1 hat aber im ersten Anlauf bereits alle 8 Pakete mitgeloggt. F\u00fcr die HardWareConfig 0x03 ist der Parser UsartNrf3_Process_DevInform_SystemConfig nicht im DTU-Pro Source code. TX 15 72615582 78563411 80 0300 62E83141 0000 00000000 0000 8FC1 ED HardWareConfig 0x03 RX 95 72615582 72615582 01 0001 1010 1015 0200 1010 0000 2710 00B0 15 RX 95 72615582 72615582 02 0001 A7F0 3D46 6666 3E66 295F 3B4B 339C 4B RX 95 72615582 72615582 03 3C22 D70A 3CA3 B368 3E2A F838 3D42 0000 BA RX 95 72615582 72615582 04 4060 0000 40C0 6666 3FA6 CCCD 412C EB85 AA RX 95 72615582 72615582 05 3F91 0000 423C 0000 4311 0000 43E1 0000 B0 RX 95 72615582 72615582 06 4366 0000 4352 7AE1 3F74 0000 4180 0000 B6 RX 95 72615582 72615582 07 4270 0000 41B0 0000 4270 0000 4138 F5C3 2C RX 95 72615582 72615582 88 3F88 0000 42B4 5C29 3E0F 0000 42BE 44FE 5E UsartNrf3_Process_DevInform_SystemConfig()","title":"HardWareConfig | 0x03"},{"location":"protocol/#simplecalibrationpara-0x04","text":"traces 22:53:57.406 > Fetch inverter: 112172615582 22:53:57.406 > 22:53:57.406 > >>> sendCommand: SimpleCalibrationPara | 0x04 | 4 22:53:57.412 > 22:53:57.412 > sendEsbPacket 22:53:57.414 > TX 15 72 61 55 82 78 56 34 11 80 04 00 62 E8 3D 65 00 00 00 00 00 00 00 00 76 AC 56 22:54:00.457 > RX Period End 22:54:00.457 > All missing 22:54:00.457 > Nothing received, resend whole request 22:54:00.463 > TX 15 72 61 55 82 78 56 34 11 80 04 00 62 E8 3D 65 00 00 00 00 00 00 00 00 76 AC 56 22:54:00.517 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 81 00 01 03 E9 03 EE 03 EB FF EC 65 9D 11 22:54:03.509 > RX Period End 22:54:03.509 > Success Auch die Funktion UsartNrf3_Process_DevInform_Calibration() ist nicht im Source Code enthalten. Es bleibt also auch die SimpleCalibrationPara Antwort zu interpretieren. TX 15 72615582 78563411 80 0400 62E83D65 0000 00000000 0000 76AC 56 SimpleCalibrationPara | 0x04 RX 95 72615582 72615582 81 0001 03E9 03EE 03EB FFEC 659D 11 UsartNrf3_Process_DevInform_Calibration() ^^^^--------------------------------------- ^^^^---------------------------------- ^^^^----------------------------- ^^^^------------------------ ^^^^-------------------","title":"SimpleCalibrationPara | 0x04"},{"location":"protocol/#systemconfigpara-0x05","text":"traces Damit setze ich aktuell das Limit: 11:25:28.070 > Limit Non-Persistent: 98 % 11:25:28.070 > TX Channel: 61 --> 51 71 60 35 46 78 56 34 12 81 0B 00 03 D4 00 01 DC 80 3B 11:25:28.130 > RX D1 71 60 35 46 71 60 35 46 81 00 00 0B 00 14 07 48 11:25:30.103 > RX Period End 11:25:30.103 > Success und das ist SytemConfigPara: 11:25:37.358 > TX Channel: 61 --> 15 71 60 35 46 78 56 34 12 80 05 00 63 30 1E 8B 00 00 00 00 00 00 00 00 16 A7 8D 11:25:37.416 > RX 95 71 60 35 46 71 60 35 46 81 00 01 03 D4 00 00 03 E8 FF FF FF FF 01 68 2D 38 55 11:25:37.596 > RX Period End 11:25:37.596 > Success 03 D4 = 98.0 % und in der SystemConfigPara steht auch 03 D4 gefolgt von 03 E8 = 100.0 % Im ersten sind es 98%. also 03 D4... im 2. ist es auch 03 D4 (es ist das 3. und 4. Byte der Antwort) F\u00fcr die MI-Modelle wurde auch eine l\u00e4ngere Zeit gemessen, bis das neue Limit \u00fcberhaupt erreicht wird und greift. Obwohl der SystemConfigPara m.E. dem Namen nach eigentlich den Soll-Zustand abbilden sollte. Wenn man das SystemConfigPara zu schnell nach dem ActivePowerLimit schickt bekommt man im EventLog neue Eintr\u00e4ge Das oben sind 10 Sekunden Unterschied, hei\u00dft also Du musst 15-20 Sekunden warten oder das waren mehrere Versuche ? Das interessante ist, ich bekomme teilweise 5 Sek nach ActivePowerLimit setzen schon eine Antwort aber erhalte dann eben Log Eintr\u00e4ge. Bei 5 Min Differenz habe ich keine Log Eintr\u00e4ge. W\u00e4hrend der 5min kann ich problemlos die Stats lesen. Der SystemConfigPara Kommando ist im original DTU Pro Source Code leider nur in Ans\u00e4tzen implementiert. So fehlt u.a. die daf\u00fcr vorgesehene UsartNrf3_Process_DevInform_SystemConfig() Methode. Diese wird \u00fcbrigens auch f\u00fcr HardWareConfig vorgesehen, aber das ist halt auch nur ein Kommentar / Stub.","title":"SystemConfigPara | 0x05"},{"location":"protocol/#wie-kann-man-den-device-status-prufen","text":"","title":"Wie kann man den Device Status pr\u00fcfen"},{"location":"protocol/#realtimerundata_debug-0x0b","text":"7E 15 81101507 81101507 80 0B00 62D806FB 0000 259C 00000000 2C1A 56 7F ^^--------------------------------------------------------------------- SOF Start of Frame 0x7E ^^------------------------------------------------------------------ MainCmd 0x15 REQ_ARW_DAT_ALL ^^^^^^^^--------------------------------------------------------- WR Serial ID ^^^^^^^^------------------------------------------------ DTU Serial ID ^^^^^^^^--------------------- DTU Serial ID wird vom NRF24 \u00fcberschrieben, da initial vom Treiber gesetzt ^^--------------------------------------------- MultiFrameID 0x80 = SingleFrame ^^------------------------------------------ SubCmd bzw. DataType: 0x0B = RealTimeRunData_Debug, 0x0C RealTimeRunData_Reality ^^---------------------------------------- rev Protocol Revision ? ^^^^---------------------------------------- Control Mode ? immer zwei Byte im Gen3 Protokoll ^^^^^^^^------------------------------- UNIX timestamp 62BE1CE0 -> 2022-07-01 00:00:00 ^^^^-------------------------- Gap always 0x0000 ^^^^--------------------- 0x0000, nur bei AlarmData: WarnSerNub (Warning Serial Number) // User data: the latest alarm serial number received on the same day ^^^^^^^^------------ Password always 0x00000000 ^^^^------- CRC16 / CRC-Modbus \u00fcber die UserData, excl. Frame ID! ^^^^------- CRC16 / CRC-Modbus \u00fcber die Daten, nach und excl. Frame ID! ^^---- CRC8 ^^- EOF End of Frame 0x7F Die Funktion UsartNrf3_Process_DevRunReality() ist etwas komplexer, je nach Inverter Typ * Inverter_HM_OneToFour diese Kondition ist etwas verwirrend da hier teilweise der selbe Wert zweimal gelesen und z.B. sowohl in PV1&PV2 oder PV3&PV4 Voltage geschrieben wird. * Inverter_HM_OneToTwo * Inverter_HM_OneToOne * Inverter_Pro * >= Inverter_Pro","title":"RealTimeRunData_Debug | 0x0B"},{"location":"protocol/#realtimerundata_reality-0x0c","text":"traces 22:08:29.683 > Fetch inverter: 112172615582 22:08:29.683 > 22:08:29.683 > >>> sendCommand: RealTimeRunData_Reality | 0x0C | 12 22:08:29.689 > 22:08:29.689 > sendEsbPacket 22:08:29.691 > TX 15 72 61 55 82 78 56 34 11 80 0C 00 62 E8 32 BD 00 00 00 00 00 00 00 00 8B 6F B7 22:08:29.754 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 01 00 01 01 06 01 2F 03 1C 00 02 D4 A3 0D 14 08 EB 2C 22:08:29.768 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 82 13 86 02 F8 00 01 00 22 03 E8 00 B9 15 94 90 00 18 22:08:30.736 > RX Period End 22:08:30.737 > Success Die Funktion UsartNrf3_Process_DevRunReality() ist etwas komplexer, je nach Inverter Typ * Inverter_HM_OneToFour diese Kondition ist etwas verwirrend da hier teilweise der selbe Wert zweimal gelesen und z.B. sowohl in PV1&PV2 oder PV3&PV4 Voltage geschrieben wird. * Inverter_HM_OneToTwo * Inverter_HM_OneToOne * Inverter_Pro * >= Inverter_Pro Bei dem o.g. Inverter 1121 handelt es sich also um einen Inverter_HM_OneToOne TX 15 72615582 78563411 80 0C00 62E832BD 0000 00000000 0000 8B6F B7 RealTimeRunData_Reality 0x0C RX 95 72615582 72615582 01 0001 0106 012F 031C 0002 D4A3 0D14 08EB 2C UsartNrf3_Process_DevRunReality() ^^^^--------------------------------------- DataVer Data version ^^^^---------------------------------- PVVol PV1 voltage ^^^^----------------------------- PVCur PV1 current ^^^^------------------------ PVPower PV1 power ^^^^------------------- HistoryEnergyH PV1 Historical cumulative power generation ^^^^-------------- HistoryEnergyL ^^^^--------- DailyEnergy ^^^^---- GridVol AC voltage RX 95 72615582 72615582 82 1386 02F8 0001 0022 03E8 00B9 1594 9000 18 ^^^^--------------------------------------- Freque AC frequency ^^^^---------------------------------- GridActivePower AC active power ^^^^----------------------------- GridReactivePower Reactive power ^^^^------------------------ GridCurrent AC current ^^^^------------------- PowerFactor Power factor ^^^^-------------- Temper temperature ^^^^--------- DataAarnNub //If the total is greater than 20, store the alarms in the alarm pool first if(RealAlarmDataNO + DataAarnNub - WarnSerNub[PortNO] >= 20) //If the number of alarms for a single micro-inverse is greater than 20, subcontracting processing is required if(DataAarnNub - WarnSerNub[PortNO] > 20)","title":"RealTimeRunData_Reality | 0x0C"},{"location":"protocol/#wie-sieht-das-device-info-kommando-alarm-data-0x11-alarm-update-0x12-aus","text":"REQ_ARW_DAT_ALL 0x15 mit SubCmd: AlarmData = 17, // 0x11 suche mal nach NET_ALARM_DATA / NET_ALARM_UPDATE bzw. dem anderen AlarmUpdate das findet sich nicht \u00fcberall als Substring wie AlarmData . 15 74403329 78563412 80 1100 627b69fe 0000 0000 00000000 47d7 bc 15 74403329 78563412 80 1100 62D80183 0000 0000 00000000 0765 FE --- AlarmData 0x11 15 74403329 78563412 80 1200 62D80183 0000 0000 00000000 FFC4 2A --- AlarmUpdate 0x12 15 74403329 78563412 80 1E00 62D80183 0000 0000 00000000 086A 0E --- GetSelfCheckState 0x1E ^^------------------------------------------------------------------ MainCmd 0x15 REQ_ARW_DAT_ALL ^^^^^^^^--------------------------------------------------------- WR Serial ID ^^^^^^^^------------------------------------------------ DTU Serial ID ^^--------------------------------------------- MultiFrameID 0x80 ^^------------------------------------------ SubCmd bzw. DataType: 0x11 = AlarmData, 0x12 AlarmUpdate ^^---------------------------------------- rev Protocol Revision ? ^^^^^^^^------------------------------- UNIX timestamp 62BE1CE0 -> 2022-07-01 00:00:00 ^^^^-------------------------- Gap always 0x0000 ^^^^--------------------- 0x0000, nur bei AlarmData: WarnSerNub (Warning Serial Number) ^^^^^^^^------------ Password always 0x0000 ^^^^------- CRC16 / CRC-Modbus \u00fcber die UserData, excl. Frame ID! ^^---- CRC8 0x80 ist die MultiFrameID f\u00fcr SingleFrame Nachrichten ! Dann kommt das SubCmd 0x11 bzw. in UsartNrf3_Send_PackPollMultiDataCommand() wird das als DataType 0x11 und 0x00 (rev = Protokoll Revision/Version) bezeichnet (zusammen zwei Byte) und weiter \u00fcbergeben bzw. gleichzeitig als CurRecSendPackageDataType gesetzt. temp_dat [ 9 ] = 0x80 ; //Multi-frame identification temp_dat [ 10 ] = DataType ; //User data: data type CurRecSendPackageDataType = DataType ; //The currently packaged data type temp_dat [ 11 ] = 0 ; //rev Danach folgt der Timestamp , temp_dat [ 12 ] = ( u8 )( time >> 24 ); temp_dat [ 13 ] = ( u8 )( time >> 16 ); temp_dat [ 14 ] = ( u8 )( time >> 8 ); temp_dat [ 15 ] = ( u8 )( time ); das Gap (zwei Byte, steht im Excel) temp_dat [ 16 ] = Gap ; //User data: data upload server interval temp_dat [ 17 ] = Gap >> 8 ; und im Falle von AlarmData eine Unterscheidung: if ( DataType == AlarmData ) { // temp_dat[18] = (u8)((CurRealAlarmNum + 1) / 0xff); // temp_dat[19] = (u8)((CurRealAlarmNum + 1) % 0xff); temp_dat [ 18 ] = ( u8 )(( WarnSerNub [ PortNO ]) / 0xff ); temp_dat [ 19 ] = ( u8 )(( WarnSerNub [ PortNO ]) % 0xff ); } else { memset (( u8 * ) & ( temp_dat [ 18 ]), 0 , 2 ); // User data: the latest alarm serial number received on the same day } Also zwei Bytes 0x00 00 um die letzte Alarm Serial Nummer zu abzufragen, bzw. die aktuelle Alarm Serial Number falls man schon welche kennt. Dann noch das Password also 0x00000000 (vier Bytes alle 0). memcpy (( u8 * )( & temp_dat [ 20 ]), Password , 4 ); //User data: anti-theft password Dann noch schnell die CRC-16 \u00fcber die Daten nach der MultiFrameID dr\u00fcber berechnet for ( i = 10 ; i < 24 ; i ++ ) { if (( i - 10 ) % 2 == 1 ) { TempCrc = ( u16 )( temp_dat [ i - 1 ] << 8 ) | ( temp_dat [ i ]); DatCrc = CalcCRC16t ( TempCrc , DatCrc ); } } temp_dat [ 24 ] = ( u8 )( DatCrc >> 8 ); temp_dat [ 25 ] = ( u8 )( DatCrc ); und dann die CRC8 \u00fcber alles. temp_dat [ 26 ] = Get_crc_xor (( u8 * ) temp_dat , 26 ); Danach wird dann anhand des CurRecSendPackageDataType die entsprechende Antwort in UsartNrf3_Process_DevInform() bzw. UsartNrf3_Process_DevInform_Alarm() oder UsartNrf3_Process_DevInform_InformUpdate() geparst. Routine UsartNrf3_Process_DevInform_Alarm() wird verwendet um die o.a. Alarm Payload zu dekodieren. Es werden immer in 12 byte zusammengefa\u00dft, wobei die ersten beiden die Alarm Version number darstellen: Fehlermeldungen in HM-600 HM-800 Bedienungsanleitung Alarmcode 129 deckt sich u.A. auch mit der Fehlertabelle in der Bedienungsanleitung vom HM-600. \"Softwarefehlercode 129\". Zufall? Dann k\u00f6nnte der WR ja prinziepiell auch die anderen Alarmcodes senden. Daf\u00fcr br\u00e4uchte es aber eine Art Session zwischen der DTU und dem WR. Weil ich habe noch keine unbekannten Pakete rein purzeln sehen, wenn ich z.B. das Netz abtrenne. Das m\u00fcsste dann laut Anleitung 0x93/147 oder 0x94/148 sein So wie ich es verstehe, ergibt sich z.B. bei mir folgender zerlegter Block (Hand bearbeitet): W1 W2 W3 W4 W5 W6 B1 2 3 4 5 6 7 8 9 10 11 12 0001 Hex Dez 8001 0006 1698 1698 0000 0000 ; 1698 > 5784 /60 = 96 /60=1:36:xx ; 0x1698 = 02:36:24 8002 0007 4F16 4F16 FFFF FFDF ; 4F16 > 20246/60 = 337/60=5:37:xx ; 0x4F16 = 06:37:26 8002 0008 5CC9 5CC9 FFFF F261 ; 5CC9 > 23753/60 = 395/60=6:35:xx ; F2=242 ; 0x5CC9 = 07:35:53 8002 0009 5D0E 5D0E FFFF FFA7 ; 5D0E > 23822/60 = 397/60=6:37:xx ; 0x5D0E = 07:37:02 8002 000A 641D 641D FFFF F8F1 ; 641D > 25629/60 = 427/60=7:07:xx ; F8=248 ; 0x641D = 08:07:09 8002 000B 64DE 64DE FFFF FF3F ; 64DE > 25822/60 = 430/60=7:10:xx ; 0x64DE = 08:10:22 8002 000C 657D 657D FFFF FF61 ; 657D > 25981/60 = 433/60=7:13:xx ; 0x657D = 08:13:01 8002 000D 6679 6679 FFFF FF18 ; 6679 > 26233/60 = 437/60=7:17:xx ; 0x6679 = 08:17:13 8002 000E 754A 754A FFFF F12F ; 754A > 30026/60 = 500/60=8:00:xx ; F1=241 ; 0x754A = 09:20:26 34E7 a) Nur was sollen mir die Worte W1 bis W6 sagen ? Ich habe gegen 12:41 Uhr mit der Aufzeichnung begonnen. Der WR arbeitet aber schon sehr viel fr\u00fcher. Also \"Uptime\" in der Zeile 8001 mit 1:36:xx kann nicht sein. Es ist die Uhrzeit zu der das Event / der Alarm aufgetreten ist. Hier sind alle Zeiten am selben Tag mit AM angegeben. W1 = WCode Bit 14 und Bit 15 ergeben den RunCode[0] und RunCode[1] Bit 12 und Bit 13 ergeben AM und PM f\u00fcr AlarmStartTime und AlarmEndTime W2 = WNum/WarnSerNub W3 = AlarmStartTime W4 = AlarmEndTime W5 = AlarmData1 W6 = AlarmData2 b) Welches Wort/Byte (W1 bis W6/B1 bis B12) soll Bitte der Alarmcode sein? AlarmCode ist das LowByte von W1 6.1 Fehlerbehebungsliste Table Fehlerbehebungsliste | Alarm Code | Alarmbezeichnung | Vorschlag | | ---------- | ---------------------- | -------------------------------------------------------------------------------- | | 121 | \u00dcbertemperaturschutz. | 1. \u00dcberpr\u00fcfen Sie am Standort der Mikroumwechselrichterinstallation die Bel\u00fcftung und Umgebungstemperatur. | | | | 2. Bei schlechter Bel\u00fcftung oder \u00dcberschreitung der Temperaturgrenzwerte, verbessern Sie die Bel\u00fcftung und W\u00e4rmeableitung. | | | | 3. Wenn sowohl die Bel\u00fcftung als auch die Umgebungstemperatur den Vorgaben entsprechen, kontaktieren Sie bitte Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 125 | Parameterfehler der Netzkonfiguration | 1. \u00dcberpr\u00fcfen Sie, ob die Netzkonfigurationsparameter korrekt sind und aktualisieren Sie sie erneut. | | | | 2. Wenn weiterhin ein Fehler vorliegt, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 126 | Softwarefehlercode 126 | 1. Wenn der Alarm ohne besonderen Anlass auftritt, der Mikrowechselrichter jedoch normal arbeitet, wird kein besonderer Eingriff ben\u00f6tigt. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 127 | Firmwarefehler | 1. \u00dcberpr\u00fcfen Sie, ob die Firmware korrekt ist und aktualisieren Sie diese erneut. | | | | 2. \u00dcberpr\u00fcfen Sie die Kommunikation zwischen DTU und dem \u00dcberwachungssystem von Hoymiles sowie die Kommunikation zwischen DTU und Mikrowechselrichter. | | | | 3. Wenn weiterhin ein Fehler vorliegt, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 128 | Softwarefehlercode 128 | 1. Wenn der Alarm ohne besonderen Anlass auftritt, der Mikrowechselrichter jedoch normal arbeitet, wird kein besonderer Eingriff ben\u00f6tigt. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 129 | Softwarefehlercode 129 | 1. Wenn der Alarm ohne besonderen Anlass auftritt, der Mikrowechselrichter jedoch normal arbeitet, wird kein besonderer Eingriff ben\u00f6tigt. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 130 | Offline | 1. Bitte stellen Sie sicher, dass der Mikroumwechselrichter normal arbeitet. | | | | 2. \u00dcberpr\u00fcfen Sie den Kommunikationszustand zwischen der DTU und demMonitoringsystem von Hoymiles, sowie die Kommunikation zwischen DTU und Mikrowechselrichter. Wenn die Kommunikation schlecht ist, versuchen Sie Verbesserungen anhand der weiter oben genannten Punkte zu erreichen. | | | | 3. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 141 | Netz\u00fcberspannung | 1. Wenn der Alarm ohne besonderen Anlass auftritt, kann die Netzspannung vor\u00fcbergehend zu hoch sein. Der Mikroumwechselrichter verbindet sich automatisch wieder mit dem Netz, sobald sich die Netzspannung normalisiert hat. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt, \u00fcberpr\u00fcfen Sie, ob die Netzspannung am Anschlusspunkt innerhalb der erlaubten Grenzen liegt. Wenn nicht, kontaktieren Sie den \u00f6rtlichen Netzbetreiber, oder adaptieren Sie mit Zustimmung des \u00f6rtlichen Netzbetreibers die Grenzwerte \u00fcber das Monitoringsystem von Hoymiles. | | 142 | 10 Minuten-Mittelwert | 1. Wenn der Alarm ohne besonderen Anlass auftritt, kann die Netzspannung vor\u00fcbergehend zu hoch sein. Der Mikroumwechselrichter verbindet sich automatisch wieder mit dem Netz, sobald sich die Netzspannung normalisiert hat. | | | Netz\u00fcberspannung | 2. Wenn der Alarm h\u00e4ufig auftritt, \u00fcberpr\u00fcfen Sie, ob die Netzspannung am Anschlusspunkt innerhalb der erlaubten Grenzen liegt. Wenn nicht, kontaktieren Sie den \u00f6rtlichen Netzbetreiber, oder adaptieren Sie mit Zustimmung des \u00f6rtlichen Netzbetreibers die Grenzwerte \u00fcber das Monitoringsystem von Hoymiles. | | 143 | Netzunterspannung | 1. Wenn der Alarm ohne besonderen Anlass auftritt, kann die Netzspannung vor\u00fcbergehend zu niedrig sein. Der Mikroumwechselrichter verbindet sich automatisch wieder mit dem Netz, sobald sich die Netzspannung normalisiert hat. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt, \u00fcberpr\u00fcfen Sie, ob die Netzspannung am Anschlusspunkt innerhalb der erlaubten Grenzen liegt. Wenn nicht, kontaktieren Sie den \u00f6rtlichen Netzbetreiber, oder adaptieren Sie mit Zustimmung des \u00f6rtlichen Netzbetreibers die Grenzwerte \u00fcber das Monitoringsystem von Hoymiles. | | | | 3. Wenn der Fehler weiterhin auftritt, \u00fcberpr\u00fcfen Sie den Sicherungsautomat oder die AC-Verdrahtung. | | 144 | Netz\u00fcberfrequenz | 1. Wenn der Alarm ohne besonderen Anlass auftritt, kann die Netzfrequenz vor\u00fcbergehend zu hoch sein. Der Mikroumwechselrichter verbindet sich automatisch wieder mit dem Netz, sobald sich die Netzfrequenz normalisiert hat. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt, \u00fcberpr\u00fcfen Sie, ob die Netzfrequenz am Anschlusspunkt innerhalb der erlaubten Grenzen liegt. Wenn nicht, kontaktieren Sie den \u00f6rtlichen Netzbetreiber, oder adaptieren Sie mit Zustimmung des \u00f6rtlichen Netzbetreibers die Grenzwerte \u00fcber das Monitoringsystem von Hoymiles. | | 145 | Netzunterfrequenz | 1. Wenn der Alarm ohne besonderen Anlass auftritt, kann die Netzfrequenz vor\u00fcbergehend zu niedrig sein. Der Mikroumwechselrichter verbindet sich automatisch wieder mit dem Netz, sobald sich die Netzfrequenz normalisiert hat. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt, \u00fcberpr\u00fcfen Sie, ob die Netzfrequenz am Anschlusspunkt innerhalb der erlaubten Grenzen liegt. Wenn nicht, kontaktieren Sie den \u00f6rtlichen Netzbetreiber, oder adaptieren Sie mit Zustimmung des \u00f6rtlichen Netzbetreibers die Grenzwerte \u00fcber das Monitoringsystem von Hoymiles. | | 146 | Schnelle Wechselrate der Netzfrequenz | 1. Wenn der Alarm ohne besonderen Anlass auftritt, kann die sich Netzfrequenz vor\u00fcbergehendzu h\u00e4ufig/schnell \u00e4ndern. Der Mikroumwechselrichter verbindet sich automatisch wieder mit dem Netz, sobald sich die Netzfrequenz normalisiert hat. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt, \u00fcberpr\u00fcfen Sie, ob die Netzfrequenz am Anschlusspunkt innerhalb der erlaubten Grenzen liegt. Wenn nicht, kontaktieren Sie den \u00f6rtlichen Netzbetreiber, oder adaptieren Sie mit Zustimmung des \u00f6rtlichen Netzbetreibers die Grenzwerte (Netzfrequenzwechselrate) \u00fcber das Monitoringsystem von Hoymiles. | | 147 | Stromnetzausfall | Bitte \u00fcberpr\u00fcfen Sie, ob ein Netzstromausfall vorliegt. | | 148 | Netzabtrennung | Bitte \u00fcberpr\u00fcfen Sie, ob der Sicherungsautomat und die AC-Verdrahtung in Ordnung sind. | | 149 | Inselbetrieb festgestellt | 1. Wenn der Alarm ohne besonderen Anlass auftritt, kann dies an untypischen Netzverh\u00e4ltnissen liegen. Der Mikroumwechselrichter verbindet sich automatisch wieder mit dem Netz, sobald sich der Netzzustand normalisiert hat. | | | | 2. Wenn der Alarm h\u00e4ufig an allen Mikrowechselrichter Ihrer Anlage auftritt, kontaktieren Sie den \u00f6rtlichen Netzbetreiber, um zu \u00fcberpr\u00fcfen, ob ein Inselbetrieb vorliegt. | | | | 3. Wenn der Alarm weiterhin besteht, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 205 | \u00dcberspannung am DC-Eingangsport 1 | 1. Bitte stellen Sie sicher, dass die Leerlaufspannung des PV-Moduls geringer oder gleich der maximal erlaubten Eingangsspannung ist. | | | | 2. Wenn die Leerlaufspannung des PV-Moduls innerhalb des normalen Bereichs liegt, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 206 | \u00dcberspannung am DC-Eingangsport 2 | 1. Bitte stellen Sie sicher, dass die Leerlaufspannung des PV-Moduls geringer oder gleich der maximal erlaubten Eingangsspannung ist. | | | | 2. Wenn die Leerlaufspannung des PV-Moduls innerhalb des normalen Bereichs liegt, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 207 | Unterspannung am DC-Eingangsport 1 | 1. Bitte stellen Sie sicher, dass die Leerlaufspannung des PV-Moduls h\u00f6her oder gleich der minimalen Eingangsspannung ist. | | | | 2. Wenn die Leerlaufspannung des PV-Moduls innerhalb des normalen Bereichs liegt, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 208 | Unterspannung am DC-Eingangsport 2 | 1. Bitte stellen Sie sicher, dass die Leerlaufspannung des PV-Moduls h\u00f6her oder gleich der minimalen Eingangsspannung ist. | | | | 2. Wenn die Leerlaufspannung des PV-Moduls innerhalb des normalen Bereichs liegt, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 209 | Fehler beim DC-Eingang 1 | 1. Bitte pr\u00fcfen Sie, ob das PV-Modul an den Wechselrichter angeschlossen ist. Wenn das PV-Modul angeschlossen ist, \u00fcberpr\u00fcfen Sie bitte die DC-Kabelverbindungen zwischen Anschluss und PV-Modul. | | 210 | Fehler beim DC-Eingang 2 | 1. Bitte pr\u00fcfen Sie, ob das PV-Modul an den Wechselrichter angeschlossen ist. Wenn das PV-Modul angeschlossen ist, \u00fcberpr\u00fcfen Sie bitte die DC-Kabelverbindungen zwischen Anschluss und PV-Modul. | | 301 | Hardwarefehlercode 301 | 1. Wenn der Alarm ausversehen auftritt, der Mikrowechselrichter jedoch normal arbeitet, wird kein besonderer Eingriff ben\u00f6tigt. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 302 | Hardwarefehlercode 302 | 1. Wenn der Alarm ohne besonderen Anlass auftritt, der Mikrowechselrichter jedoch normal arbeitet, wird kein besonderer Eingriff ben\u00f6tigt. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 303 | Hardwarefehlercode 303 | 1. Wenn der Alarm ohne besonderen Anlass auftritt, der Mikrowechselrichter jedoch normal arbeitet, wird kein besonderer Eingriff ben\u00f6tigt. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 304 | Hardwarefehlercode 304 | 1. Wenn der Alarm ohne besonderen Anlass auftritt, der Mikrowechselrichter jedoch normal arbeitet, wird kein besonderer Eingriff ben\u00f6tigt. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 305 | Hardwarefehlercode 305 | 1. Wenn der Alarm ohne besonderen Anlass auftritt, der Mikrowechselrichter jedoch normal arbeitet, wird kein besonderer Eingriff ben\u00f6tigt. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 306 | Hardwarefehlercode 306 | 1. Wenn der Alarm ohne besonderen Anlass auftritt, der Mikrowechselrichter jedoch normal arbeitet, wird kein besonderer Eingriff ben\u00f6tigt. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 307 | Hardwarefehlercode 307 | 1. Wenn der Alarm ohne besonderen Anlass auftritt, der Mikrowechselrichter jedoch normal arbeitet, wird kein besonderer Eingriff ben\u00f6tigt. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | | 308 | Hardwarefehlercode 308 | 1. Wenn der Alarm ohne besonderen Anlass auftritt, der Mikrowechselrichter jedoch normal arbeitet, wird kein besonderer Eingriff ben\u00f6tigt. | | | | 2. Wenn der Alarm h\u00e4ufig auftritt und nicht behoben werden kann, kontaktieren Sie Ihren H\u00e4ndler oder die technische Unterst\u00fctzung von Hoymiles. | I have found alarm_codes 121..314 in the HM-1600 documentation you mentioned on the forum: Chapter 6. Troubleshooting, 6.1 Troubleshooting List However I could not find the alarm_codes 5041..5200, these are probably elaborate guesses based on first hand experience / results ? Or is 0x50XY another prefix like the 0x8Y we have seen with the paket numbering maybe for some \"channels\" / MPPT ports ? Found it under MI-600, MI-700 and MI-800 manual 6.1 Troubleshooting List (SN: 1042xxxxxxxx) Error Codes: 121 - 308 6.2 Troubleshooting List (SN: 1040xxxxxxxx, 1041xxxxxxxx) Error Codes: 130 (Offline), 5041 - 9000 sic So the error codes are Device Dependent, but there seem to be little / no differences in the overlapping codes. The codes above 1000 can be found in the MI-Series user manuals. Just google a bit. There are lots of different models out there. Compare all user manuals and you will find, all seem to have the same codes. Depending on their hardware layout of course, but the codes don't seem to overlap a single time. If you merge all that information in a single table you likely end up with a similar result. Is this list complete? I don't think so. Especially because I could not find any hint on codes 1 and 2. They where just guessed, based on real observation. Gerade das hier gefunden zur Analyse von WR/DTU Fehlern https://www.hoymiles.com/wp-content/uploads/2021/07/Failure-process-for-common-fault.pdf // MI Error Codes 5041 : ' Error code -04 Port 1 ' , // 0x13B1 5042 : ' Error code -04 Port 2 ' , // 0x13B2 5043 : ' Error code -04 Port 3 ' , // 0x13B3 5044 : ' Error code -04 Port 4 ' , // 0x13B4 5051 : ' PV Input 1 Overvoltage / Undervoltage ' , // 0x13BB 5052 : ' PV Input 2 Overvoltage / Undervoltage ' , // 0x13BC 5053 : ' PV Input 3 Overvoltage / Undervoltage ' , // 0x13BD 5054 : ' PV Input 4 Overvoltage / Undervoltage ' , // 0x13BE 5060 : ' Abnormal bias ' , // 0x13C4 5070 : ' Over temperature protection ' , // 0x13CE 5080 : ' Grid Overvoltage / Undervoltage ' , // 0x13D8 5090 : ' Grid Overfrequency / Underfrequency ' , // 0x13E2 5100 : ' Island detected ' , // 0x13EC 5120 : ' EEPROM reading and writing error ' , // 0x1400 5150 : ' 10 min value grid overvoltage ' , // 0x141E 5200 : ' Firmware error ' , // 0x1450 8310 : ' Shut down ' , // 0x2076 9000 : ' Microinverter is suspected of being stolen ' // 0x2328 I especially like 9000: 'Microinverter is suspected of being stolen' \ud83e\udd23 00 01 80 01 00 06 30 62 30 62 00 00 00 00 // 0x80 = AM,AM, 0x3062 = 04:26:26 00 d4 00 07 30 6a 00 00 00 00 00 00 // 0x00 = AM,AM, 0x306A = 04:26:34, 0xD4 = 212 Port 4 no input b0 02 00 48 4c f7 4c f7 00 00 00 05 // 0xB0 = PM,PM, 0x4CF7 = 06:28:23 + 12:00:00 = 18:28:23 b0 02 00 49 55 da 55 da ff ff ff fb // 0xB0 = PM,PM, 0x55DA = 07:06:18 + 12:00:00 = 19:06:18 b0 02 00 4a 55 ed 55 ed 00 00 00 05 // 0xB0 = PM,PM, 0x55ED = 07:06:37 + 12:00:00 = 19:06:37 b0 02 00 4b 56 72 56 72 ff ff ff fb // 0xB0 = PM,PM, 0x5672 = 07:08:50 + 12:00:00 = 19:08:50 b0 02 00 4c 56 72 56 72 00 00 00 06 // 0xB0 = PM,PM, 0x5672 = 07:08:50 + 12:00:00 = 19:08:50 b0 02 00 4d 56 79 56 79 ff ff ff fb // 0xB0 = PM,PM, 0x5679 = 07:08:57 + 12:00:00 = 19:08:57 b0 02 00 4e 56 82 56 82 00 00 00 05 // 0xB0 = PM,PM, 0x5682 = 07:09:06 + 12:00:00 = 19:09:06 b0 02 00 4f 56 e7 56 e7 ff ff ff fb // 0xB0 = PM,PM, 0x56E7 = 07:10:47 + 12:00:00 = 19:10:47 b0 02 00 50 56 f3 56 f3 00 00 00 05 // 0xB0 = PM,PM, 0x56F3 = 07:10:59 + 12:00:00 = 19:10:59 b0 02 00 51 57 1d 57 1d ff ff ff fb // 0xB0 = PM,PM, 0x571D = 07:11:41 + 12:00:00 = 19:11:41 b0 02 00 52 57 23 57 23 00 00 00 05 // 0xB0 = PM,PM, 0x5723 = 07:11:47 + 12:00:00 = 19:11:47 b0 02 00 53 57 4f 57 4f ff ff ff fb // 0xB0 = PM,PM, 0x574F = 07:12:31 + 12:00:00 = 19:12:31 b0 02 00 54 57 51 57 51 00 00 00 05 // 0xB0 = PM,PM, 0x5751 = 07:12:33 + 12:00:00 = 19:12:33 05 ab 80 0B00 623B5E4B 0000 000B 00000000 2F87 2B6A BD BD6A 1 00 01 80 01 00 01 64 42 64 42 00 00 00 00 00 d1 00 04 64 4a 00 00 00 00 00 00 // 0xD1 = 209 Fehler beim DC-Eingang 1 00 d2 00 05 64 4a 00 00 00 00 00 00 // 0xD2 = 210 Fehler beim DC-Eingang 2 00 cf 00 06 65 76 00 00 00 00 00 dc // 0xCF = 207 Unterspannung am DC-Eingangsport 1 80 02 00 09 6a b3 6a b3 ff ff ff f6 80 02 00 0a 6a b8 6a b8 ff ff ff fb 80 02 00 0b 6b cf 6b cf ff ff fe e9 40 8f 00 0c 64 4a 6c 19 00 03 07 a3 // 0x8F = 143 Netzunterspannung 40 93 00 0d 64 4a 6c 19 00 00 00 00 // 0x93 = 147 Stromnetzausfall 80 02 00 0e 6c ac 6c ac ff ff ff 23 80 02 00 0f 6c b1 6c b1 ff ff ff fb 80 02 00 10 6c b8 6c b8 ff ff ff f9 80 02 00 11 6c be 6c be ff ff ff fa 80 02 00 12 6c c3 6c c3 ff ff ff fb 80 02 00 13 6c ca 6c ca ff ff ff f9 2f 89 00 01 <-- Alarm Version number 80 01 00 01 62 26 62 26 00 00 00 00 // 0x6226 = 07:58:46; 0x01 = 00 d1 00 04 62 2e 00 00 00 00 00 00 // 0x622E = 07:58:54; 0xD1 = 209 Fehler beim DC-Eingang 1 00 d2 00 05 62 2e 00 00 00 00 00 00 // 0x622E = 07:58:54; 0xD2 = 210 Fehler beim DC-Eingang 2 00 cf 00 06 63 5a 00 00 00 00 00 dc // 0x635A = 08:03:54; 0xCF = 207 Unterspannung am DC-Eingangsport 1 40 8f 00 0c 62 2e 69 fd 00 03 07 a3 // 0x622E = 07:58:54; 0x8F = 143 Netzunterspannung 40 93 00 0d 62 2e 69 fd 00 00 00 00 // 0x622E = 07:58:54; 0x93 = 147 Stromnetzausfall 80 02 00 22 6c a4 6c a4 ff ff ff fa // 0x6CA4 = 08:43:32; 0x02 = 80 02 00 23 6c ab 6c ab ff ff ff f9 80 02 00 24 6c ec 6c ec ff ff ff bf 80 02 00 25 6c f1 6c f1 ff ff ff fb 80 02 00 26 6c fb 6c fb ff ff ff f6 80 02 00 27 6d 18 6d 18 ff ff ff e3 80 02 00 28 6d 22 6d 22 ff ff ff f6 80 02 00 29 6d 27 6d 27 ff ff ff fb 80 02 00 2a 6d 32 6d 32 ff ff ff f5 53 03 <-- CRC-16 / CRC-Modbux |...| |...| |...| |...| |...| |...| +2 +3 +4 +5 +6 +7 +8 +9 +10.. +12.. <WCode> | | | | <WNum>| | | | <WarnSerNub>| | | <AlarmStartTime> | <AlarmEndTime> <AlarmData1> <AlarmData2> AlarmId: Alarm_Id [ 0 ]), ( u8 * ) MIMajor [ PortNO ]. Property . Pre_Id , 2 ); Alarm_Id [ 2 ]), ( u8 * ) MIMajor [ PortNO ]. Property . Id , 4 ); WCode: WCode = ( u16 ) pProBuffer [ i * 12 + 2 ] << 8 | pProBuffer [ i * 12 + 3 ]; WNum: WNum ), & ( pProBuffer [ i * 12 + 4 ]), 2 ); WarnSerNub: WarnSerNub [ PortNO ] = ( u16 ) pProBuffer [ i * 12 + 4 ] << 8 | ( u16 ) pProBuffer [ i * 12 + 5 ]; WTime1=AlarmStartTime: //Alarm start time AlarmTime = ( u32 )(( u16 ) pProBuffer [ i * 12 + 6 ] << 8 ) | (( u16 ) pProBuffer [ i * 12 + 7 ]) + DateToSec ( calendar ); // AM AlarmTime = 12 * 60 * 60 + ( u32 )((( u16 ) pProBuffer [ i * 12 + 6 ] << 8 ) | (( u16 ) pProBuffer [ i * 12 + 7 ])) + DateToSec ( calendar ); // PM WTime2=AlarmEndTime: //Alarm end time AlarmTime = ( u32 )(( u16 ) pProBuffer [ i * 12 + 8 ] << 8 ) | (( u16 ) pProBuffer [ i * 12 + 9 ]) + DateToSec ( calendar ); // AM AlarmTime = 12 * 60 * 60 + ( u32 )((( u16 ) pProBuffer [ i * 12 + 8 ] << 8 ) | (( u16 ) pProBuffer [ i * 12 + 9 ])) + DateToSec ( calendar ); // PM AlarmData1: Data1 [ 0 ]), & ( pProBuffer [ i * 12 + 10 ]), 2 ); AlarmData2: Data2 [ 0 ]), & ( pProBuffer [ i * 12 + 12 ]), 2 ); Das was Jan-Jonas als a_count identifiziert hat ist in Wirklichkeit WarnSerNub bzw. das High byte davon ist auch WNum . Das was in Deiner Ausgabe mit 0x4d02 als 19714 sec identifiziert wurde sind die Sekunden seit 0:00 bzw. 12:00 Uhr f\u00fcr den AlarmStartTime/Wtime1 bzw. AlarmEndeTime/WTime2 80 01 00 01 4d 02 4d 02 00 00 00 00: uptime=5:28:34 a_count=1 opcode=128 a_code=1 a_text=Inverter start BBHHHHH: (128, 1, 1, 19714, 19714, 0, 0) Die untere Ausgabe mit 19714 das ist also 5:28:34 h eine normale Uhrzeit, AM da die u.a. AlarmStart und AlarmEnde AM/PM Bits 13 & 12 aus dem WCode = 0 sind. Der WR kennt kein Datum, die DTU addiert hierzu das Datum dazu. Dazu muss man jeweils das aktuelle Datum addieren, dann hat man einen echten Timestamp Lediglich den Datumswechsel scheint der WR anhand der von der DTU gesendeten Timestamps zu machen. ( WCode >> 14 ) & 0x03 : ( 0x8001 >> 14 ) & 0x03 : ( 0x02 ) & 0x03 = 0x02 // bestimmt den sog. RunCode siehe unten ( WCode >> 13 ) & 0x01 : ( 0x8001 >> 13 ) & 0x01 : ( 0x04 ) & 0x01 = 0x00 // 0x00 = AM, 0x01 = PM AlarmStart ( WCode >> 12 ) & 0x01 : ( 0x8001 >> 12 ) & 0x01 : ( 0x08 ) & 0x01 = 0x00 // 0x00 = AM, 0x01 = PM AlarmEnde Es wird offenbar immer das aktuelle Datum des Tages in Sekunden dazu gez\u00e4hlt und anhand des Bit 13 / 12 im WCode entschieden ob AlarmStartTime / AlarmEndTime vormittags oder nachmittags liegt/lag. Aus Bit 14 & 15 des WCode wird noch ein sog. Run_Status[0] und [1] extrahiert. Was auch immer das aussagt? WCode >> 14 ) & 0x03 )) == 0 ) Run_Status [ 0 ] = 0x00 ; Run_Status [ 1 ] = 0x08 ; WCode >> 14 ) & 0x03 ) == 1 ) Run_Status [ 0 ] = 0x00 ; Run_Status [ 1 ] = 0x03 ; Was der Run_Status genau aussagt wei\u00df man aktuell noch nicht oder? Ach ja und AlarmData1/Data1 und AlarmData2/Data2 sind beide 0x0000 WCode ist also 0x8001 und WNum = 0x80 F\u00fcr WCode 0x8001 sind die Bits also 0x 8 0 0 1 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 8 4 2 1 8 4 2 1 8 4 2 1 8 4 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 00 D1 00 04 4D 0A 00 00 00 00 00 00: uptime=5:28:42 a_count=4 opcode=0 a_code=209 a_text=Port 1 no input BBHHHHH: (0, 209, 4, 19722, 0, 0, 0) Hier ist WCode 0x00D1 , also ist ((WCode >> 14) & 0x03)) == 0) und somit Run_Status[0] = 0x00; und Run_Status[1] = 0x08; . Die Uhrzeit stimmt, da auch Bit 12&13 0 sind, ist die AlarmStartTime/Wtime1 AM. Und die WarnSerNub = 0x0004 und WNum = 0x00 40 8f 00 0c 4d 0a 54 d9 00 03 07 a3: uptime=5:28:42 a_count=12 opcode=64 a_code=143 a_text=Grid undervoltage BBHHHHH: (64, 143, 12, 19722, 21721, 3, 1955) Hier ist WCode 0x408f , also ist ((WCode >> 14) & 0x03)) == 1) und somit Run_Status[0] = 0x00; und Run_Status[1] = 0x03; . Die Uhrzeit stimmt, da auch Bit 12&13 wieder 0 sind ist auch die AlarmStartTime/Wtime1 0x4d0a = 5:28:42h AlarmEndTime/Wtime2 0x54d9 =6:02:01h beide AM. Hier sind AlarmData1/Data1 = 0x0003 und AlarmData2/Data2 = 0x07a3 Und die WarnSerNub = 0x000c und WNum = 0x00 //CurAlarmState -- alarm state type typedef enum { InitState = 0 , //There is a new alarm record HasNewAlarmRecord = 1 , //There is a new wave recording alarm HasNewWaveRecord = 2 , //No new alarm record HasNONewAlarmRecord = 3 , //No new wave recording alarm HasNONewWaveRecord = 4 , // Suspend the alarm AlarmInforUpdate_Server = 10 , //APP state switch AlarmInforUpdate_App = 11 , } AlarmStateType ; extern volatile AlarmStateType CurAlarmState ; typedef union { struct { //dong 20200520 u16 WCode ; u8 Alarm_Id [ 6 ] ; u8 WNum [ 2 ]; u8 WTime1 [ 4 ]; u8 WTime2 [ 4 ]; u8 Data1 [ 2 ]; u8 Data2 [ 2 ]; } Data ; u8 DataMsg [ 22 ]; } AlarmDataType ;","title":"Wie sieht das Device Info Kommando Alarm Data 0x11 / Alarm Update 0x12 aus ?"},{"location":"protocol/#internaldata-0x14","text":"traces 22:06:44.659 > Fetch inverter: 112172615582 22:06:44.659 > 22:06:44.659 > >>> sendCommand: InternalData | 0x014 | 20 22:06:44.664 > 22:06:44.664 > sendEsbPacket 22:06:44.664 > TX 15 72 61 55 82 78 56 34 11 80 14 00 62 E8 32 54 00 00 00 00 00 00 00 00 07 D4 71 22:06:44.713 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 01 00 01 9B 8A 09 F7 08 09 FF FB 00 04 00 00 04 B5 CA 22:06:44.750 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 82 01 4B 03 61 03 61 66 0A 31 22:06:45.712 > RX Period End 22:06:45.713 > Success TX 15 72615582 78563411 80 1400 62E83254 0000 00000000 0000 07D4 71 InternalData 0x14 RX 95 72615582 72615582 01 0001 9B8A 09F7 0809 FFFB 0004 0000 04B5 CA UsartNrf3_Process_DevInform_InternalData() ^^^^--------------------------------------- ??? ^^^^---------------------------------- ^^^^----------------------------- ^^^^------------------------ ^^^^------------------- ^^^^-------------- ^^^^--------- RX 95 72615582 72615582 82 014B 0361 0361 660A 31 ^^^^--------------------------------------- ??? ^^^^---------------------------------- ^^^^-----------------------------","title":"InternalData | 0x14"},{"location":"protocol/#getlossrate-0x15","text":"traces 22:00:39.560 > Fetch inverter: 112172615582 22:00:39.560 > 22:00:39.560 > >>> sendCommand: GetLossRate | 0x15 | 21 22:00:39.566 > 22:00:39.566 > sendEsbPacket 22:00:39.566 > TX 15 72 61 55 82 78 56 34 11 80 15 00 62 E8 30 E7 00 00 00 00 00 00 00 00 3B 54 7D 22:00:39.624 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 81 9B 26 09 30 8F C8 D7 22:00:40.612 > RX Period End 22:00:40.613 > Success Die Information in GetLossRate 0x15 sind m.E. sehr sinnvoll, da hier die RX/TX Statistik des Wechselrichters zu finden ist. TX 15 72615582 78563411 80 1500 62E830E7 0000 00000000 0000 3B54 7D GetLossRate 0x15 RX 95 72615582 72615582 81 9B26 0930 8FC8 D7 UsartNrf3_Process_DevInform_GetLossRate() ^^^^--------------------------------------- MI_CF_Num_Start/End Micro-inverse receive count ^^^^---------------------------------- MI_RF_Num_Start/End Micro-inverse send count Man mu\u00df die Werte auf DTU Seite initialisieren, falls diese (noch) 0 sind. Danach kann man diese Start Werte von den aktuellen Werte (End) abziehen und erh\u00e4lt die aktuelle Differenz. Vielleicht sind diese Z\u00e4hler bei einigen am \u00dcberlaufen ?","title":"GetLossRate | 0x15"},{"location":"protocol/#getselfcheckstate-0x1e","text":"traces 21:57:39.511 > Fetch inverter: 112172615582 21:57:39.512 > 21:57:39.512 > >>> sendCommand: GetSelfCheckState | 0x1E | 30 21:57:39.517 > 21:57:39.517 > sendEsbPacket 21:57:40.568 > TX 15 72 61 55 82 78 56 34 11 80 1E 00 62 E8 30 33 00 00 00 00 00 00 00 00 F5 F1 C9 21:57:40.631 > Interrupt received | > RX OK: 95 72 61 55 82 72 61 55 82 81 00 01 00 00 00 00 00 00 CB 50 8E 21:57:41.614 > RX Period End 21:57:41.614 > Success Die GetSelfCheckState 0x1E Anfrage wird in UsartNrf3_Process_Self_Check_State mit der Hilfsfunktion UsartNrf3_Process_GetDatatoProBuffer in einen pProBuffer kopiert. Erst danach werden die Werte ausgelesen. TX 15 72615582 78563411 80 1E00 62E83033 0000 00000000 0000 F5F1 C9 GetSelfCheckState 0x1E RX 95 72615582 72615582 81 0001 0000 0000 0000 CB50 8E UsartNrf3_Process_Self_Check_State() ^^^^--------------------------------------- ver Data version ^^^^---------------------------------- st Test status (2<=st<=6 Collecting / Collection completed) ^^^^----------------------------- gpf Grid-connected rule file code ^^^^------------------------ gpf_ver Grid-connected rule file version //st 4 to 6 There is no subsequent data ... // 2<=st<=3 //First-level overvoltage self-test test results ^^^^------------------- code ^^^^------------------- dflt_val ^^^^------------------- dflt_tim ^^^^------------------- rslt_val ^^^^------------------- rslt_tim //First-level undervoltage self-test test results ^^^^------------------- code ^^^^------------------- dflt_val ^^^^------------------- dflt_tim ^^^^------------------- rslt_val ^^^^------------------- rslt_tim //Secondary overvoltage self-test test results ^^^^------------------- code ^^^^------------------- dflt_val ^^^^------------------- dflt_tim ^^^^------------------- rslt_val ^^^^------------------- rslt_tim //Secondary undervoltage self-test test results ^^^^------------------- code ^^^^------------------- dflt_val ^^^^------------------- dflt_tim ^^^^------------------- rslt_val ^^^^------------------- rslt_tim //First-level over-frequency self-test test results ^^^^------------------- code ^^^^------------------- dflt_val ^^^^------------------- dflt_tim ^^^^------------------- rslt_val ^^^^------------------- rslt_tim //First-level underfrequency self-test test results ^^^^------------------- code ^^^^------------------- dflt_val ^^^^------------------- dflt_tim ^^^^------------------- rslt_val ^^^^------------------- rslt_tim //Secondary over-frequency self-test test results ^^^^------------------- code ^^^^------------------- dflt_val ^^^^------------------- dflt_tim ^^^^------------------- rslt_val ^^^^------------------- rslt_tim //Secondary underfrequency self-test test results ^^^^------------------- code ^^^^------------------- dflt_val ^^^^------------------- dflt_tim ^^^^------------------- rslt_val ^^^^------------------- rslt_tim","title":"GetSelfCheckState | 0x1E"},{"location":"protocol/#initdatastate-0xff","text":"DevInform 0x15 mit 0xFF als SubCmd ? TX 15 72615582 78563412 FF traces 23:13:06.763 > Fetch inverter: 112172615582 23:13:06.763 > sendCommand: DevInform 23:13:06.766 > >>> Command DevInform <<< 23:13:06.768 > 23:13:06.768 > sendEsbPacket 23:13:06.771 > TX 15 72 61 55 82 78 56 34 12 FF 26 23:13:08.795 > RX Period End 23:13:08.795 > All missing 23:13:08.795 > Nothing received, resend whole request 23:13:08.800 > TX 15 72 61 55 82 78 56 34 12 FF 26 23:13:10.826 > RX Period End 23:13:10.826 > All missing 23:13:10.826 > Nothing received, resend whole request 23:13:10.831 > TX 15 72 61 55 82 78 56 34 12 FF 26 23:13:10.866 > Interrupt received | > RX OK: D1 72 61 55 82 72 61 55 82 81 50 23:13:10.872 > FATAL: (lib/Hoymiles/src/inverters/InverterAbstract.cpp, 51) fragment too short 23:13:12.857 > RX Period End 23:13:12.857 > All missing 23:13:12.857 > Nothing received, resend whole request 23:13:12.862 > TX 15 72 61 55 82 78 56 34 12 FF 26 23:13:14.888 > RX Period End 23:13:14.888 > All missing 23:13:14.888 > Nothing received, resend count exeeded TX 15 72615582 78563412 FF 26 InitDataState 0xFF RX D1 72615582 72615582 81 50 ^^----- ???","title":"InitDataState | 0xFF"},{"location":"protocol/#welche-device-control-devcontrol_all-0x51-sub-kommandos-gibt-es","text":"source code typedef enum { Type_TurnOn = 0 , // 0x00 Type_TurnOff = 1 , // 0x01 Type_Restart = 2 , // 0x02 Type_Lock = 3 , // 0x03 Type_Unlock = 4 , // 0x04 Type_ActivePowerContr = 11 , // 0x0b Type_ReactivePowerContr = 12 , // 0x0c Type_PFSet = 13 , // 0x0d Type_CleanState_LockAndAlarm = 20 , // 0x14 //dong 06-15 Type_SelfInspection = 40 , // 0x28 // self-inspection of grid-connected protection files Type_Init = 0xff , //0xff } DevControlType ; SubCmd = * [x] Type_TurnOn (0x00) Boot * [x] Type_TurnOff (0x01) Shutdown * [x] Type_Restart (0x02) * [ ] Type_Lock (0x03) * [ ] Type_Unlock (0x04) * [x] Type_ActivePowerContr (0x0B) Active Power Limit * [ ] Type_ReactivePowerContr (0x0C) Reactive Power Limit * [ ] Type_PFSet (0x0D) Power Faktor Limit * [ ] Type_CleanState_LockAndAlarm (0x14) Lock Alarm l\u00f6schen * [ ] Type_SelfInspection (0x28) Selbsttest * [ ] Type_Init (0xFF)","title":"Welche Device Control DEVCONTROL_ALL (0x51) Sub Kommandos gibt es"},{"location":"protocol/#wie-sieht-ein-device-control-kommando-aus","text":"7E 51 81101507 81101507 81 00 00 B001 61 7F Type_TurnOn 0x00 7E 51 81101507 81101507 81 01 00 2000 F1 7F Type_TurnOff 0x01 7E 51 81101507 81101507 81 02 00 D000 02 7F Type_Restart 0x02 ^^------------------------------------------ SOF Start of Frame 0x7E ^^--------------------------------------- MainCmd 0x51 DEVCONTROL_ALL ^^^^^^^^------------------------------ WR Serial ID ^^^^^^^^--------------------- DTU Serial ID wird vom NRF24 \u00fcberschrieben, da initial vom Treiber gesetzt ^^------------------ Single Frame ID ^^--------------- SubCmd siehe oben ^^^^^------------ Control Mode ? immer zwei Byte im Gen3 Protokoll ^^^^------- CRC16 / CRC-Modbus \u00fcber die Daten, nach und excl. Frame ID! ^^---- CRC8 ^^- EOF End of Frame 0x7F","title":"Wie sieht ein Device Control Kommando aus ?"},{"location":"protocol/#wie-kann-man-das-passwort-setzen-zurucksetzen","text":"Mit SubCmd 0x03 Type_Lock und 0x04 Type_Unlock kann man ein Passwort (vierstellige Pin) setzen. AdminPasswd [ 4 ] = { 10 , 16 , 50 , 82 }; // = 0x0A 0x10 0x32 0x52 oder 0x0A103252 Nach dem Vergleich mit dem Master / AdminPassword wird das neue Passwort einfach auf 0x00000000 gesetzt und das alte Passwort mit 0xFFFFFFFF \u00fcberschrieben. if ( memcmp (( u8 * ) AdminPasswd , ( u8 * ) Dtu3Detail . Property . LockOldPassword , 4 ) == 0 ) { memset (( u8 * ) Dtu3Detail . Property . LockNewPassword , 0 , 4 ); memset (( u8 * ) Dtu3Detail . Property . LockOldPassword , 0xff , 4 ); memcpy (( u8 * ) MIMajor [ PortNO ]. Property . Pass . PassWordSet . PWO , ( u8 * ) Dtu3Detail . Property . LockOldPassword , 4 ); memcpy (( u8 * ) MIMajor [ PortNO ]. Property . Pass . PassWordSet . PWN , ( u8 * ) Dtu3Detail . Property . LockNewPassword , 4 ); memcpy (( u8 * ) MIMajor [ PortNO ]. Property . Pass . PassWordSet . ATTime , ( u8 * ) Dtu3Detail . Property . Lock_Time , 2 ); }","title":"Wie kann man das Passwort setzen / zur\u00fccksetzen"},{"location":"protocol/#wie-funktioniert-das-active-power-limit-0x0b-sub-kommando","text":"Leistungsreduzierung HM300 \u00b7 Issue #35 \u00b7 tbnobody/OpenDTU https://github.com/tbnobody/OpenDTU/issues/35 Active Power Limit (0x0B) 21:06:33.342 > TX 51 72 61 55 82 78 56 34 12 81 0B 00 00 96 01 00 DC E0 BC 51 74 40 33 29 78 56 34 12 81 0b 00 00 96 01 00 dc e0 56 => 0x96 = dezimal 150, d.h. das sind 15.0 Watt 21:06:33.570 > Interrupt received 21:06:33.570 > 21:06:33.570 > >> RX OK: D1 72 61 55 82 72 61 55 82 81 00 00 0B 00 14 07 48 <0x51> <WR> <DTU> <0x81> <0x0b 0x00> <0x00 0x96> <0x01 0x00> <CRC16/modbus> <crc8> <Cmd> <target> <source> <subcmd> <limit> <?desc?-fix 0x01 0x00> <crc16/modbus> <crc8> Das mit dem 0x0B00 hatte ich irgendwie anders interpretiert, da er den Wert ja mit (u16)(SubCmd << 8) in UsartNrf_Send_DevControlUpdate() \u00fcbergibt und als u16 ControlMode in UsartNrf3_Send_PackDevControl() \u00fcbernimmt. Also wird aus dem SubCmd=0x0b -> Control Mode=0x0b00 . Und das wird dann wiederum als temp_dat[10] = 0x0b und temp_dat[11] = 0x00 an den NRF24 per USART \u00fcbergeben. P_Limit1 is the absolute value of the power limit, the unit is W, with 1 decimal place Dtu3Detail.Property.DRM_Limit_Switch oder Dtu3Detail.Property.SunSpec_Switch dann .Desc[0] = 0x00 .Desc[1] 0x01 Dtu3Detail.Property.Zero_Export_Switch oder Dtu3Detail.Property.Phase_Balance_Switch dann .Desc[0] = 0x00 .Desc[1] 0x00 Vielleicht w\u00e4re es \u00fcbersichtlicher, wenn du Desc[0] und [1] in der Reihenfolge vertauschst, das liest sich besser, so landet es ja am Ende im Befehl, erst [0] dann [1]","title":"Wie funktioniert das Active Power Limit (0x0B) Sub Kommando"},{"location":"protocol/#wie-funktioniert-das-reactive-power-limit-setzen-0x0d-kommando","text":"81 0C 00 00 64 00 0a ^^------------------- SingleFrameID ^^---------------- SubCmd bzw. DevControlType: 0x0C = Type_ReactivePowerContr ^^ ^^------------- Control Mode ^^ ^^------- PowerPFDev.SetValut 0x0064 = 4.0 W ^^ ^^- PowerPFDev.Desc das m\u00fcsste m.W. immer (?) mit 0x00 01 angegeben sein Sollte also 51 74403329 78563412 81 0D00 0000 0000 0601 14 oder sowas sein.... Schreibt halt m.W. einen PowerFactor, aber Du hast glaube ne DTU mit der Du das ggf. korrigieren kannst oder ?","title":"Wie funktioniert das Reactive Power Limit Setzen (0x0D) Kommando"},{"location":"protocol/#wie-funktioniert-das-power-faktor-setzen-0x0d-kommando","text":"81 0D 00 00 64 00 0a ^^------------------- SingleFrameID ^^---------------- SubCmd bzw. DevControlType: 0x0D = Type_PFSet ^^ ^^------------- Control Mode ^^ ^^------- PowerPFDev.SetValut 0x0064 = 4.0 W ^^ ^^- PowerPFDev.Desc das m\u00fcsste m.W. immer (?) mit 0x00 01 angegeben sein Sollte also 51 74403329 78563412 81 0D00 0000 0000 0601 14 oder sowas sein.... Schreibt halt m.W. einen PowerFactor, aber Du hast glaube ne DTU mit der Du das ggf. korrigieren kannst oder ?","title":"Wie funktioniert das Power Faktor Setzen (0x0D) Kommando"},{"location":"protocol/#welche-parameter-setzen-paraset_all-0x52-kommandos-gibt-es","text":"UsartNrf3_Send_PackSetPara() Sowas wie EleEnergySet 0x01 und AntitheftParaSet 0x04 EleEnergySet (0x01) AntitheftParaSet (0x04) Passwort setzen","title":"Welche Parameter Setzen PARASET_ALL (0x52) Kommandos gibt es"},{"location":"protocol/#welche-file-multi-package-kommandos-gibt-es","text":"","title":"Welche File Multi-Package Kommandos gibt es"},{"location":"protocol/#wie-wird-das-down_pro-0x0e-down_dat-0x0a-verwendet","text":"Type_Init ( 0xFF ) Das SubCmd = Type_Init ( 0xFF ) scheint nur bei MainCmd = DOWN_PRO ( 0x0E ) oder DOWN_DAT ( 0x0A ) verwendet zu werden. O&M > Grid Profile Management File Name Alias Device Ver. AT_TOR_Erzeuger_default Gen3 DE_VDE4105_2011 Gen3 DE_VDE4105_2018 Gen3 AT-OVE-E-8001 Gen2 Germany_VDE4105 Gen2 LN_50Hz Gen2 File Name: AT_TOR_Erzeuger_default File Name: DE_VDE4105_2011 File Name: DE_VDE4105_2018 File Name: AT-OVE-E-8001 File Name: Germany_VDE4105 File Name: LN_50Hz","title":"Wie wird das DOWN_PRO (0x0E) / DOWN_DAT (0x0A) verwendet"},{"location":"protocol/#file-name-at_tor_erzeuger_default","text":"SN Name Value Unit Range 1 AT_TOR_Erzeuger_default (?) 2 H/LVRT (?) 3 Nominal Voltage (NV) 230 V ~ 4 Low Voltage 1 (LV1) 184 V 170~184 5 LV1 Maximum Trip Time (MTT) 1.5 s ~ 6 High Voltage 1 (HV1) 255.3 V 253~270 7 HV1 Maximum Trip Time (MTT) 0.1 s ~ 8 Low Voltage 2 (LV2) 57.5 V ~ 9 LV2 Maximum Trip Time (MTT) 0.5 s ~ 10 High Voltage 2 (HV2) 264.5 V 264.5~275 11 HV2 Maximum Trip Time (MTT) 0.08 s ~ 12 10 mins Average High Voltage (AHV) 255.3 V 245~255.3 13 H/LFRT (?) 14 Nominal Frequency 50 Hz ~ 15 Low Frequency 1 (LF1) 47.5 Hz 47.5~49 16 LF1 Maximum Trip Time (MTT) 0.1 s ~ 17 High Frequency 1 (HF1) 51.5 Hz 50.5~51.5 18 HF1 Maximum Trip Time (MTT) 0.1 s ~ 19 Islanding Detection (?) 20 ID Function Activated 1 0~1 21 Reconnection (RT) (?) 22 Reconnect Time (RT) 60 s 10~300 23 Reconnect High Voltage (RHV) 250.7 V 240~250.7 24 Reconnect Low Voltage (RLV) 195.5 V 195.5~210 25 Reconnect High Frequency (RHF) 50.1 s 50.1~50.9 26 Reconnect Low Frequency (RLF) 47.5 s 47.5~49.9 27 Ramp Rates (RR) 28 Normal Ramp up Rate (RUR_NM) 20 Rated%/s 10~100 29 Soft Start Ramp up Rate (RUR_SS) 0.16 Rated%/s 0.1~10 30 Frequency Watt (FW) (?) 31 FW Function Activated 1 0~1 32 Start of Frequency Watt Droop (Fstart) 50.2 Hz 50.2~52 33 FW Droop Slope (Kpower_Freq) 40 Pn%/Hz 16.7~100 34 Recovery Ramp Rate (RRR) 0.16 Pn%/s 0.1~50 35 Volt Watt (VW) (?) 36 VW Function Activated 1 0~1 37 Start of Voltage Watt Droop (Vstart) 253 V ~ 38 End of Voltage Watt Droop (Vend) 257.6 V ~ 39 VW Droop Slope (Kpower_Volt) 21.74 Pn%/Hz ~ 40 Volt Var (VV) (?) 41 VV Function Activated 0 0~1 42 Voltage Set Point V1 211.6 V ~ 43 Reactive Set Point Q1 30 %Pn 0~50 44 Voltage Set Point V2 220.8 V ~ 45 Voltage Set Point V3 241.5 V ~ 46 Voltage Set Point V4 248.4 V ~ 47 Reactive Set Point Q4 30 %Pn 0~50 48 Specified Power Factor (SPF) (?) 49 SPF Function Activated 0 0~1 50 Power Factor (PF) v 0.95 0.9~1 51 Watt Power Factor (WPF) (?) 52 WPF Function Activated 0 0~1 53 Start of Power of WPF (Pstart) 50 %Pn ~ 54 Power Factor ar Rated Power (RFRP) 0.95 0.8~1 55 Active Power Control (APC) (?) 56 APC Function Activated 1 0~1 57 Power Ramp Rate (PRR) 100 Pn%/s 0.33~100 58 Reactive Power Control (RPC) (?) 59 RPC Function Activated 0 0~1 60 Reactive Power (VAR) v 0 %Sn 0~50 Save and generate new profile","title":"File Name: AT_TOR_Erzeuger_default"},{"location":"protocol/#file-name-de_vde4105_2011","text":"SN Name Value Unit Range 1 DE_VDE4105_2011 (?) 2 H/LVRT (?) 3 Nominal Voltage (NV) 230 V ~ 4 Low Voltage 1 (LV1) 184 V 170~184 5 LV1 Maximum Trip Time (MTT) 0.1 s ~ 6 High Voltage 1 (HV1) 264.5 V 264.5~270 7 HV1 Maximum Trip Time (MTT) 0.1 s ~ 8 10 mins Average High Voltage (AHV) 253 V 253~260 9 H/LFRT (?) 10 Nominal Frequency 50 Hz ~ 11 Low Frequency 1 (LF1) 47.5 Hz 47~49.5 12 LF1 Maximum Trip Time (MTT) 0.1 s ~ 13 High Frequency 1 (HF1) 51.5 Hz 50.5~53.5 14 HF1 Maximum Trip Time (MTT) 0.1 s ~ 15 Islanding Detection (?) 16 ID Function Activated 1 0~1 17 Reconnection (RT) (?) 18 Reconnect Time (RT) 65 s 10~300 19 Reconnect High Voltage (RHV) 264.5 V 253~264.5 20 Reconnect Low Voltage (RLV) 184 V 182~210 21 Reconnect High Frequency (RHF) 51.5 V 50.5~52 22 Reconnect Low Frequency (RLF) 47.5 V 47~49.5 23 Short Interruption Reconnect Time (SRT) 8 s ~ 24 Short Interruption Time (SIT) 3 s ~ 25 Ramp Rates (RR) 26 Normal Ramp up Rate (RUR_NM) 20 Rated%/s 10~100 27 Soft Start Ramp up Rate (RUR_SS) 10 Rated%/s 0.1~20 28 Active Power Control (APC) (?) 29 APC Function Activated 1 0~1 Save and generate new profile","title":"File Name: DE_VDE4105_2011"},{"location":"protocol/#file-name-de_vde4105_2018","text":"SN Name Value Unit Range 1 DE_VDE4105_2018 (?) 2 H/LVRT (?) 3 Nominal Voltage (NV) 230 V ~ 4 Low Voltage 1 (LV1) 184 V 160~195.5 5 LV1 Maximum Trip Time (MTT) 3 s 3~3 6 High Voltage 1 (HV1) 287.5 V 270~287.5 7 HV1 Maximum Trip Time (MTT) 0.1 s 0.1~0.1 8 Low Voltage 2 (LV2) 103.5 V 100~150 9 LV2 Maximum Trip Time (MTT) 0.3 s 0.3~0.3 10 10 mins Average High Voltage (AHV) 253 V 250~270 11 H/LFRT (?) 12 Nominal Frequency 50 Hz ~ 13 Low Frequency 1 (LF1) 47.5 Hz 47.5~49.9 14 LF1 Maximum Trip Time (MTT) 0.1 s 0.1~0.1 15 High Frequency 1 (HF1) 51.5 Hz 50.1~51.5 16 HF1 Maximum Trip Time (MTT) 0.1 s 0.1~0.1 17 Islanding Detection (?) 18 ID Function Activated 1 0~1 19 Reconnection (RT) (?) 20 Reconnect Time (RT) 60 s 10~300 21 Reconnect High Voltage (RHV) 253 V 240~253 22 Reconnect Low Voltage (RLV) 195.5 V 195.5~210 23 Reconnect High Frequency (RHF) 50.1 s 50.1~50.9 24 Reconnect Low Frequency (RLF) 47.5 s 47.5~49.9 25 Ramp Rates (RR) 26 Normal Ramp up Rate (RUR_NM) 20 Rated%/s 5~100 27 Soft Start Ramp up Rate (RUR_SS) 0.16 Rated%/s 0.1~10 28 Frequency Watt (FW) (?) 29 FW Function Activated 1 0~1 30 Start of Frequency Watt Droop (Fstart) 50.2 Hz 50.2~52 31 FW Droop Slope (Kpower_Freq) 40 Pn%/Hz 16.7~100 32 Recovery Ramp Rate (RRR) 0.16 Pn%/s 0.1~50 33 Recovery High Frequency (RVHF) 50.2 Hz 50.1~52 34 Recovery Low Frequency (RVLF) 49.8 Hz 49~49.9 35 Active Power Control (APC) (?) 36 APC Function Activated 1 0~1 37 Power Ramp Rate (PRR) 100 Pn%/s 0.33~100 38 Volt Var (VV) (?) 39 VV Function Activated 0 0~1 40 Voltage Set Point V1 213.9 V ~ 41 Reactive Set Point Q1 30 %Pn 0~100 42 Voltage Set Point V2 223.1 V ~ 43 Voltage Set Point V3 236.9 V ~ 44 Voltage Set Point V4 246.1 V ~ 41 Reactive Set Point Q4 30 %Pn 0~100 46 Specified Power Factor (SPF) (?) 47 SPF Function Activated 0 0~1 48 Power Factor (PF) v 0.95 0.9~1 49 Watt Power Factor (WPF) (?) 50 WPF Function Activated 0 0~1 51 Start of Power of WPF (Pstart) 50 %Pn ~ 52 Power Factor ar Rated Power (RFRP) 0.95 0.8~1 53 Reactive Power Control (RPC) (?) 54 RPC Function Activated 0 0~1 55 Reactive Power (VAR) v 0 %Sn 0~50 Save and generate new profile","title":"File Name: DE_VDE4105_2018"},{"location":"protocol/#file-name-at-ove-e-8001","text":"SN Name Value Unit Range 1 Voltage limits and trip time 2 Over voltage limit 264.5 V ~ 3 Under voltage limit 184 V ~ 4 Average over voltage 253.11 V 253~264.5 5 Frequency limits and trip time 6 Over frequency limit 51.5 Hz ~ 7 Under frequency limit 47.5 Hz ~ 8 Reconnect time 9 Short term reconnect time 8 s 5~10 10 Long term reconnect time 65 s 60~300 Save and generate new profile","title":"File Name: AT-OVE-E-8001"},{"location":"protocol/#file-name-germany_vde4105","text":"SN Name Value Unit Range 1 Voltage limits and trip time 2 Over voltage limit 264.5 V ~ 3 Under voltage limit 184 V ~ 4 Average over voltage 253 V 253~260 5 Frequency limits and trip time 6 Over frequency limit 51.5 Hz ~ 7 Under frequency limit 47.5 Hz ~ 8 Reconnect time 9 Short term reconnect time 8 s 5~10 10 Long term reconnect time 65 s 60~300 Save and generate new profile","title":"File Name: Germany_VDE4105"},{"location":"protocol/#file-name-ln_50hz","text":"SN Name Value Unit Range 1 Voltage limits and trip time 2 Over voltage limit 280 V ~ 3 Over voltage limit trip time 0.1 s ~ 4 Over voltage limit (slow) 255 V 240~270 5 Over voltage limit trip time (slow) 0.5 s 0.1~20 6 Under voltage limit 110 V ~ 7 Under voltage limit trip time 0.1 s ~ 8 Under voltage limit (slow) 170 V 170~220 9 Under voltage limit trip time (slow) 0.5 s 0.1~20 10 Frequency limits and trip time 11 Over frequency limit 54 Hz ~ 12 Over frequency limit trip time 0.1 s 0.05~1 13 Over frequency limit (slow) 53 Hz 50.2~54 14 Over frequency limit trip time (slow) 0.5 s 0.1~20 15 Under frequency limit 46 Hz ~ 16 Under frequency limit trip time 0.1 s 0.05~1 17 Under frequency limit (slow) 47 Hz 46~49.5 18 Under frequency limit trip time (slow) 0.5 s 0.1~20 19 Reconnect time 20 Long term reconnect time 180 s 20~800 Save and generate new profile","title":"File Name: LN_50Hz"},{"location":"protocol/#was-bedeutet-die-antwort-answer_exception_multi_one-0xf1-bzw-answer_exception_one_multi-0xff","text":"Das ist ein Fehler bzw. eine Fehlermeldung. #define ANSWER_EXCEPTION_MULTI_ONE 0xF1 #define ANSWER_EXCEPTION_ONE_MULTI 0XFF Fehler ist 0xF1 oder 0xFF je nachdem ob SingleFrame / MultiFrame Anfrage","title":"Was bedeutet die Antwort ANSWER_EXCEPTION_MULTI_ONE 0xF1 bzw. ANSWER_EXCEPTION_ONE_MULTI 0xFF"},{"location":"protocol/#funkverbindung","text":"","title":"Funkverbindung"},{"location":"protocol/#wird-auto-ack-vom-wechselrichter-beim-nrf24l01-unterstutzt","text":"Tatsache ist, es ist sehr unwahrscheinlich, dass der WR antworten wird, wenn er nicht einmal ein ACK sendet.","title":"Wird Auto-ACK vom Wechselrichter beim nRF24L01+ unterst\u00fctzt"},{"location":"protocol/#reverse-engineering","text":"","title":"Reverse Engineering"},{"location":"protocol/#wo-und-wie-kann-das-protokoll-mitgeschnitten-werden","text":"Mit einem Scanner (HackRF oder nRF24L01+) auf der/n Funkfrequenz/en Mit einem Logic Analyzer zwischen MCU und nRF24L01+ eine RX und eine TX Leitung zwischen den beiden Chips (UART). Der Mikrocontroller hat laut Datenblatt ([1], s.o.) genau eine serielle Schnittstelle, bei dem verbauten 32-pin-Geh\u00e4use sollten die hier sein: - P0.4 (Pin 7): RXD - P0.3 (Pin 10): TXD","title":"Wo und wie kann das Protokoll mitgeschnitten werden"},{"location":"protocol/#was-ist-ein-scanner-und-welche-gibt-es","text":"Welche Scanner eingesetzt wurden: ich nutzte die von den Libs RF24 und nrf_hal.","title":"Was ist ein Scanner und welche gibt es"},{"location":"readme-ahoy/","text":"This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License . \ud83d\udd90 Ahoy! This repository offers hardware and software solutions for communicating with Hoymiles inverters via radio. With our system, you can easily obtain real-time values such as power, current, and daily energy. Additionally, you can set parameters like the power limit of your inverter to achieve zero export. You can access these functionalities through our user-friendly web interface, MQTT, or JSON. Whether you're monitoring your solar panel system's performance or fine-tuning its settings, our solutions make it easy to achieve your goals. Table of approaches: Board MI HM HMS/HMT comment HowTo start ESP8266/ESP32, C++ \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2728 \ud83d\udc48 the most effort is spent here create your own DTU Arduino Nano, C++ \u274c \u2714\ufe0f \u274c Raspberry Pi, Python \u274c \u2714\ufe0f \u274c Others, C/C++ \u274c \u2714\ufe0f \u274c Getting Started Guide how to start with a ESP module ESP Webinstaller (Edge / Chrome Browser only) Our Website https://ahoydtu.de Success Stories Getting the data into influxDB and visualize them in a Grafana Dashboard (thx @Carl) Support, Feedback, Information and Discussion Discord Server (~ 3.800 Users) The root of development Development If you run into any issues, please feel free to use the issue tracker here on Github. When describing your issue, please be as detailed and precise as possible, and take a moment to consider whether the issue is related to our software. This will help us to provide more effective solutions to your problem. Contributors are always welcome! Related Projects OpenDTU <- Our sister project \u2728 for Hoymiles HM- and HMS-/HMT-series (for ESP32 only!)","title":"Readme ahoy"},{"location":"readme-ahoy/#ahoy","text":"This repository offers hardware and software solutions for communicating with Hoymiles inverters via radio. With our system, you can easily obtain real-time values such as power, current, and daily energy. Additionally, you can set parameters like the power limit of your inverter to achieve zero export. You can access these functionalities through our user-friendly web interface, MQTT, or JSON. Whether you're monitoring your solar panel system's performance or fine-tuning its settings, our solutions make it easy to achieve your goals. Table of approaches: Board MI HM HMS/HMT comment HowTo start ESP8266/ESP32, C++ \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2728 \ud83d\udc48 the most effort is spent here create your own DTU Arduino Nano, C++ \u274c \u2714\ufe0f \u274c Raspberry Pi, Python \u274c \u2714\ufe0f \u274c Others, C/C++ \u274c \u2714\ufe0f \u274c","title":"\ud83d\udd90 Ahoy!"},{"location":"readme-ahoy/#getting-started","text":"Guide how to start with a ESP module ESP Webinstaller (Edge / Chrome Browser only)","title":"Getting Started"},{"location":"readme-ahoy/#our-website","text":"https://ahoydtu.de","title":"Our Website"},{"location":"readme-ahoy/#success-stories","text":"Getting the data into influxDB and visualize them in a Grafana Dashboard (thx @Carl)","title":"Success Stories"},{"location":"readme-ahoy/#support-feedback-information-and-discussion","text":"Discord Server (~ 3.800 Users) The root of development","title":"Support, Feedback, Information and Discussion"},{"location":"readme-ahoy/#development","text":"If you run into any issues, please feel free to use the issue tracker here on Github. When describing your issue, please be as detailed and precise as possible, and take a moment to consider whether the issue is related to our software. This will help us to provide more effective solutions to your problem. Contributors are always welcome!","title":"Development"},{"location":"readme-ahoy/#related-projects","text":"OpenDTU <- Our sister project \u2728 for Hoymiles HM- and HMS-/HMT-series (for ESP32 only!)","title":"Related Projects"},{"location":"rf-module-cmt2300a/","text":"RF Module CMT2300A Links to Datasheets, etc. here Some Closeup Shots of the Circuitry Some Details about the Software Library CMT2300AW_Quick_Start_Guide-Rev0.8 CMT2300AW_RSSI_Usage_Guideline_EN_V0.9 E49-900M20S-Usermanual_EN Software CMT2300A In order to put the module into operation, it is necessary to configure it before use. Please take the memory table from the datasheet to set the exact desired configuration. To speak to the WR later, a specific configuration must be stored. - The complete information can be found in the \"cmt2300a_params.h\" file. CMT2300AW Register Partition Tab Configuration Bank This bank is used to configure the chip. Address: 0x00\u2013 0x5F They include\uff1a 1. Reserved attributes for internal use 2. System operation 3. RF characteristics 4. FSK demodulation 5. Clock recovery 6. AGC characteristics 7. OOK demodulation 8. Packet format and codec mode 9. Modulation characteristics of TX The value of the register can either come from the RFPDK, or can be changed by the customer in accordance with their own needs in the application process. In general, except that the individual register on the RF frequency or data rate may be configured multiple times in the application, most of the rest of the register only need to be configured one time in the initialization proce. Control Bank 1 Address: 0x60 \u2013 0x6A The bank is used to real-time control the chip. They include: 1. Chip state switch 2. Special function enable 3. Channel switching by hopping manually 4. IO control 5. Interrupt enable 6. FIFO mode configuration 7. Related interrupt control Control bank 1 can be saved in the SLEEP state. As long as the battery is not powered down and the chip is not reset, the configuration content will not be lost. Control Bank 2 Address: 0x6B \u2013 0x71 This bank is provided to the user to control the chip. They include: 1. Packet and FIFO interrupt control 2. FIFO control 3. RSSI read 4. LBD function control The control bank 2 is not saved in the SLEEP state. All the configured values and the values that can be read will disappear. Users need to pay attention to it.","title":"Rf module cmt2300a"},{"location":"rf-module-cmt2300a/#rf-module-cmt2300a","text":"Links to Datasheets, etc. here Some Closeup Shots of the Circuitry Some Details about the Software Library CMT2300AW_Quick_Start_Guide-Rev0.8 CMT2300AW_RSSI_Usage_Guideline_EN_V0.9 E49-900M20S-Usermanual_EN","title":"RF Module CMT2300A"},{"location":"rf-module-cmt2300a/#software","text":"","title":"Software"},{"location":"rf-module-cmt2300a/#cmt2300a","text":"In order to put the module into operation, it is necessary to configure it before use. Please take the memory table from the datasheet to set the exact desired configuration. To speak to the WR later, a specific configuration must be stored. - The complete information can be found in the \"cmt2300a_params.h\" file.","title":"CMT2300A"},{"location":"rf-module-cmt2300a/#cmt2300aw-register-partition-tab","text":"","title":"CMT2300AW Register Partition Tab"},{"location":"rf-module-cmt2300a/#configuration-bank","text":"This bank is used to configure the chip. Address: 0x00\u2013 0x5F They include\uff1a 1. Reserved attributes for internal use 2. System operation 3. RF characteristics 4. FSK demodulation 5. Clock recovery 6. AGC characteristics 7. OOK demodulation 8. Packet format and codec mode 9. Modulation characteristics of TX The value of the register can either come from the RFPDK, or can be changed by the customer in accordance with their own needs in the application process. In general, except that the individual register on the RF frequency or data rate may be configured multiple times in the application, most of the rest of the register only need to be configured one time in the initialization proce.","title":"Configuration Bank"},{"location":"rf-module-cmt2300a/#control-bank-1","text":"Address: 0x60 \u2013 0x6A The bank is used to real-time control the chip. They include: 1. Chip state switch 2. Special function enable 3. Channel switching by hopping manually 4. IO control 5. Interrupt enable 6. FIFO mode configuration 7. Related interrupt control Control bank 1 can be saved in the SLEEP state. As long as the battery is not powered down and the chip is not reset, the configuration content will not be lost.","title":"Control Bank 1"},{"location":"rf-module-cmt2300a/#control-bank-2","text":"Address: 0x6B \u2013 0x71 This bank is provided to the user to control the chip. They include: 1. Packet and FIFO interrupt control 2. FIFO control 3. RSSI read 4. LBD function control The control bank 2 is not saved in the SLEEP state. All the configured values and the values that can be read will disappear. Users need to pay attention to it.","title":"Control Bank 2"},{"location":"user-manual-ahoy/","text":"User Manual AhoyDTU (on ESP8266) Version #{VERSION}# Introduction See the repository README.md Setup Assuming you have a running ahoy-dtu and you can access the setup page. In the initial case or after click \"erase settings\" the fields for the inverter setup are empty. Set at least the serial number and a name for each inverter, check \"reboot after save\" and click the \"Save\" button. MQTT Publish The AhoyDTU will publish on the following topics <TOPIC>/# Topic Example Value Remarks Retained comm_start 1672123767 inverter communication start, based on sunrise, UTC timestamp true comm_stop 1672155709 inverter communication stop, based on sunset, UTC timestamp true device AHOY-DTU configured device name true dis_night_comm true setting if night communication is disabled true free_heap 17784 free heap of ESP in bytes false mqtt connected shows MQTT status true status 1 see table below true sunrise 1672124667 sunrise, UTC timestamp true sunset 1672154809 sunset, UTC timestamp true uptime 73630 uptime in seconds false version 0.5.61 current installed verison of AhoyDTU true wifi_rssi -75 WiFi signal strength false ip_addr 192.168.178.25 WiFi Station IP Address true status code Remarks 0 offline 1 partial 2 online <TOPIC>/<INVERTER_NAME_FROM_SETUP>/# Topic Example Value Remarks Retained available 2 see table below true last_success 1672155690 UTC Timestamp true ack_pwr_limit true fast information if inverter has accepted power limit false status code Remarks 0 off: not available and not producing 1 available but not producing 2 available and producing 3 available and was producing 4 was available <TOPIC>/<INVERTER_NAME_FROM_SETUP>/ch0/# Topic Example Value Remarks U_AC 233.300 actual AC Voltage in Volt I_AC 0.300 actual AC Current in Ampere P_AC 71.000 actual AC Power in Watt Q_AC 21.200 actual AC reactive power in var F_AC 49.990 actual AC Frequency in Hz PF_AC 95.800 actual AC Power factor Temp 19.800 Temperature of inverter in degree Celsius EVT 9.000 Last Event/Alarm Message Index YieldDay 51.000 Energy converted to AC per day in Watt hours (measured on DC) YieldTotal 465.294 Energy converted to AC since reset Watt hours (measured on DC) P_DC 74.600 actual DC Power in Watt Efficiency 95.174 actual ration AC Power over DC Power in percent FWVersion 10012.000 Firmware version eg. 1.00.12 FWBuildYear 2020.000 Firmware build date FWBuildMonthDay 624.000 Firmware build month and day eg. 24th of june HWPartId 100.000 Hardware Id PowerLimit 80.000 actual set point for power limit control AC active power in percent LastAlarmCode 1.000 Last Alarm Code eg. \"inverter start\" <TOPIC>/<INVERTER_NAME_FROM_SETUP>/ch<CHANNEL_NUMBER>/# <CHANNEL_NUMBER> is in the range 1 to 4 depending on the inverter type Topic Example Value Remarks U_DC 38.900 actual DC Voltage in Volt I_DC 0.640 actual DC current in Ampere P_DC 25.000 actual DC power in Watt YieldDay 17.000 Energy converted to AC per day Watt hours per module/channel (measured on DC) YieldTotal 110.819 Energy converted to AC since reset Watt hours per module/channel (measured on DC) Irradiation 5.65 ratio DC Power over set maximum power per module/channel in percent Active Power Limit via Serial / Control Page URL: /serial You can change the setting in the following manner. Decide if you want to set an absolute value in Watt an relative value in percent based on the maximum Power capabilities of the inverter and if this settings shall be persistent not persistent after a power cycle of the inverter (P_DC=0 and P_AC=0 for at least 10 seconds) The user has to ensure correct settings. Remember that for the inverters of 3rd generation the relative active power limit is in the range of 2% up to 100%. Also an absolute active power limit below approx. 30 Watt seems to be not meanful because of the control capabilities and reactive power load. Control via MQTT Generic Information The AhoyDTU subscribes on following topics: <TOPIC>/ctrl/limit/<INVERTER_ID> <TOPIC>/ctrl/restart/<INVERTER_ID> <TOPIC>/setup/set_time \ud83d\udc46 <TOPIC> can be set on setup page, default is inverter . \ud83d\udc46 <INVERTER_ID> is the number of the specific inverter in the setup page. Inverter restart <TOPIC>/ctrl/restart/<INVERTER_ID> Example: inverter/ctrl/restart/0 Power Limit relative (non persistent) [%] <TOPIC>/ctrl/limit/<INVERTER_ID> with a payload [2 .. 100] NOTE: optional a % can be sent as last character Example: inverter/ctrl/limit/0 70 Power Limit absolute (non persistent) [Watts] <TOPIC>/ctrl/limit/<INVERTER_ID> with a payload [0 .. 65535] NOTE: the unit W is necessary to determine an absolute limit Example: inverter/ctrl/limit/0 600W Power Limit persistent This feature was removed. The persisten limit should not be modified cyclic by a script because of potential wearout of the flash inside the inverter. Control via REST API Generic Information The rest API works with JSON POST requests. All the following instructions must be sent to the /api endpoint of the AhoyDTU. \ud83d\udc46 <INVERTER_ID> is the number of the specific inverter in the setup page. Inverter Power (On / Off) { \"id\" : <INVERTER_ID> , \"cmd\" : \"power\" , \"val\" : <VALUE> } The <VALUE> should be set to 1 = ON and 0 = OFF Inverter restart { \"id\" : <INVERTER_ID> , \"cmd\" : \"restart\" } Power Limit relative persistent [%] { \"id\" : <INVERTER_ID> , \"cmd\" : \"limit_persistent_relative\" , \"val\" : <VALUE> } The VALUE represents a percent number in a range of [2 .. 100] Power Limit absolute persistent [Watts] { \"id\" : <INVERTER_ID> , \"cmd\" : \"limit_persistent_absolute\" , \"val\" : <VALUE> } The VALUE represents watts in a range of [0 .. 65535] Power Limit relative non persistent [%] { \"id\" : <INVERTER_ID> , \"cmd\" : \"limit_nonpersistent_relative\" , \"val\" : <VALUE> } The VALUE represents a percent number in a range of [2 .. 100] Power Limit absolute non persistent [Watts] { \"id\" : <INVERTER_ID> , \"cmd\" : \"limit_nonpersistent_absolute\" , \"val\" : <VALUE> } The VALUE represents watts in a range of [0 .. 65535] Developer Information REST API (obsolete) In the same approach as for MQTT any other SubCmd and also MainCmd can be applied and the response payload can be observed in the serial logs. Eg. request the Alarm-Data from the Alarm-Index 5 from inverter 0 will look like this: { \"inverter\" : 0 , \"tx_request\" : 21 , \"cmd\" : 17 , \"payload\" : 5 , \"payload2\" : 0 } Zero Export Control (needs rework) You can use the mqtt topic <TOPIC>/devcontrol/<INVERTER_ID>/11 with a number as payload (eg. 300 -> 300 Watt) to set the power limit to the published number in Watt. (In regular cases the inverter will use the new set point within one intervall period; to verify this see next bullet) You can check the inverter set point for the power limit control on the topic <TOPIC>/<INVERTER_NAME_FROM_SETUP>/ch0/PowerLimit \ud83d\udc46 This value is ALWAYS in percent of the maximum power limit of the inverter. In regular cases this value will be updated within approx. 15 seconds. (depends on request intervall) You can monitor the actual AC power by subscribing to the topic <TOPIC>/<INVERTER_NAME_FROM_SETUP>/ch0/P_AC \ud83d\udc46 This value is ALWAYS in Watt Firmware Version collection Gather user inverter information here to understand what differs between some inverters. To get the information open the URL /api/record/info on your AhoyDTU. The information will only be present once the AhoyDTU was able to communicate with an inverter. Name Inverter Typ Bootloader V. FWVersion FWBuild [YYYY] FWBuild [MM-DD] HWPartId DanielR92 HM-1500 1.0.16 2021 10-12 100 isdor HM-300 1.0.14 2021 12-09 102 aschiffler HM-1500 1.0.12 2020 06-24 100 klahus1 HM-300 1.0.10 2020 07-07 102 roku133 HM-400 1.0.10 2020 07-07 102 eeprom23 HM-1200 0.1.0 1.0.18 2021 12-24 269619201 18:21:00 HWRev 256 eeprom23 HM-1200 2t 0.1.0 1.0.16 2021 10-12 269619207 17:06:00 HWRev 256 fila612 HM-700 1.0.10 2021 11-01 104 tfhcm TSUN-350 1.0.14 2021 12-09 102 Groobi TSOL-M400 1.0.14 2021 12-09 102 setje HM-600 1.0.08 2020 07-10 104 madmartin HM-600 0.1.4 1.0.10 2021 11-01 104 lumapu HM-1200 0.1.0 1.0.12 2020 06-24 chehrlic HM-600 1.0.10 2021 11-01 104 chehrlic TSOL-M800de 1.0.10 2021 11-01 104 B5r1oJ0A9G HM-800 1.0.10 2021 104 B5r1oJ0A9G HM-800 1.0.10 2021 104 tomquist TSOL-M1600 1.0.12 2020 06-24 100 rejoe2 MI-600 236 2018 11-27 17 rejoe2 MI-1500 1.0.12 2020 06-24 100 dragricola HM-1200 1.0.16 2021 10-12 100 dragricola MI-300 230 2017 08-08 1 Developer Information about Command Queue After reboot or startup the ahoy firmware it will enque three commands in the following sequence: Get active power limit in percent ( SystemConfigPara = 5 // 0x05 ) Get firmware version ( InverterDevInform_All = 1 // 0x01 ) Get data ( RealTimeRunData_Debug = 11 // 0x0b ) With the command get data ( RealTimeRunData_Debug = 11 // 0x0b ) the alarm message counter will be updated. In the initial case then aonther command is queued to get the alarm code ( AlarmData = 17 // 0x11 ). This command ( AlarmData = 17 // 0x11 ) will enqued in any operation phase if alarm message counter is raised by one or greater compared to the last request with command get data ( RealTimeRunData_Debug = 11 // 0x0b ) In case all commands are processed ( _commandQueue.empty() == true ) then as a default command the get data ( RealTimeRunData_Debug = 11 // 0x0b ) will be enqueued. In case a Device Control command (Power Limit, Off, On) is requested via MQTT or REST API this request will be send before any other enqueued command. In case of a accepted change in power limit the command get active power limit in percent ( SystemConfigPara = 5 // 0x05 ) will be enqueued. The acceptance is checked by the reponse packets on the devive control commands (tx id 0x51 --> rx id 0xD1) if in byte 12 the requested sub-command (eg. power limit) is present. How To Sunrise & Sunset In order to display the sunrise and sunset on the start page, the location coordinates (latitude and longitude) must be set in decimal in the setup under Sunrise & Sunset. If the coordinates are set, the current sunrise and sunset are calculated and displayed daily. If this is set, you can also tick \"disable night communication\", then sending to the inverter is switched off outside of the day (i.e. at night), this avoids unnecessary communication attempts and thus also the incrementing of \"RX no anwser\". Here you can get easy your GeoLocation: https://www.mapsdirections.info/en/gps-coordinates.html Commands and informations Turn On - turns on the inverter/feeder (LED flashes green if there is no error) Turn Off - switches off the inverter/feeder (LED flashes fast red), can be switched on again with Turn On or by disconnecting and reconnecting the DC voltage Restart - restarts the microcontroller in the inverter, which deletes the error memory and the YieldDay values, feed-in stops briefly and starts with the last persistent limit Send Power Limit: - A limitation of the AC power can be sent in relative (in %) or in absolute (Watt). - It can be set to a different value non-persistently (temporarily) at any time (regardless of what you have set for persistent), this should be normal in order to limit the power (zero feed/battery control) and does not damage the EEPROM in the WR either. - With persistent you send a saving limit (only use it seldom, otherwise the EEPROM in the HM can break!), This is then used as the next switch-on limit when DC comes on, i.e. when the sun comes up early or the WR on batteries is switched on the limit is applied immediately when sending, like any other, but it is stored in the EEPROM of the WR. - A persistent limit is only needed if you want to throttle your inverter permanently or you can use it to set a start value on the battery, which is then always the switch-on limit when switching on, otherwise it would ramp up to 100% without regulation, which is continuous load is not healthy. - You can set a new limit in the turn-off state, which is then used for on (switching on again), otherwise the last limit from before the turn-off is used, but of course this only applies if DC voltage is applied the whole time. - If the DC voltage is missing for a few seconds, the microcontroller in the inverter goes off and forgets everything that was temporary/non-persistent in the RAM: YieldDay, error memory, non-persistent limit. Update your AHOY-DTU Firmware To update your AHOY-DTU, you have to download the latest firmware package. Here are the latest stable releases and latest development builds available for download. As soon as you have downloaded the firmware package, unzip it. On the WebUI, navigate to Update and press on select firmware file. From the unzipped files, select the right .bin file for your hardware and needs. - If you use an ESP8266, select the file ending with esp8266.bin - If you use an ESP8266 with prometheus, select the file ending with esp8266_prometheus.bin - If you use an ESP32, select the file ending with esp32.bin - If you use an ESP32 with prometheus, select the file ending with esp32_prometheus.bin Note: if you want to use prometheus, the usage of an ESP32 is recommended, since the ESP8266 is at its performance limits and therefore can cause stability issues. After selecting the right firmware file, press update. Your AHOY-DTU will now install the new firmware and reboot. Additional Notes MI Inverters AhoyDTU supports MI type inverters as well, since dev. version 0.5.70. MI inverters are known to be delivered with two different generations of firmwares: inverters with serial numbers 10x2 already use the 3rd generation protocol and behave just like the newer HM models, the follwoing remarks do not apply to these . Older MI inverters (#sn 10x1) use a different rf protocol and thus do not deliver exactly the same data. E.g. the AC power value will therefore be calculated by AhoyDTU itself, while other values might not be available at all. Single and dual channel 2nd gen. devices seem not to accept power limiting commands at all, the lower limit for 4-channel MI is 10% (instead of 2% for newer models) 4-channel MI type inverters might work, but code still is untested.","title":"User Manual AhoyDTU (on ESP8266)"},{"location":"user-manual-ahoy/#user-manual-ahoydtu-on-esp8266","text":"Version #{VERSION}#","title":"User Manual AhoyDTU (on ESP8266)"},{"location":"user-manual-ahoy/#introduction","text":"See the repository README.md","title":"Introduction"},{"location":"user-manual-ahoy/#setup","text":"Assuming you have a running ahoy-dtu and you can access the setup page. In the initial case or after click \"erase settings\" the fields for the inverter setup are empty. Set at least the serial number and a name for each inverter, check \"reboot after save\" and click the \"Save\" button.","title":"Setup"},{"location":"user-manual-ahoy/#mqtt-publish","text":"The AhoyDTU will publish on the following topics","title":"MQTT Publish"},{"location":"user-manual-ahoy/#topic","text":"Topic Example Value Remarks Retained comm_start 1672123767 inverter communication start, based on sunrise, UTC timestamp true comm_stop 1672155709 inverter communication stop, based on sunset, UTC timestamp true device AHOY-DTU configured device name true dis_night_comm true setting if night communication is disabled true free_heap 17784 free heap of ESP in bytes false mqtt connected shows MQTT status true status 1 see table below true sunrise 1672124667 sunrise, UTC timestamp true sunset 1672154809 sunset, UTC timestamp true uptime 73630 uptime in seconds false version 0.5.61 current installed verison of AhoyDTU true wifi_rssi -75 WiFi signal strength false ip_addr 192.168.178.25 WiFi Station IP Address true status code Remarks 0 offline 1 partial 2 online","title":"&lt;TOPIC&gt;/#"},{"location":"user-manual-ahoy/#topicinverter_name_from_setup","text":"Topic Example Value Remarks Retained available 2 see table below true last_success 1672155690 UTC Timestamp true ack_pwr_limit true fast information if inverter has accepted power limit false status code Remarks 0 off: not available and not producing 1 available but not producing 2 available and producing 3 available and was producing 4 was available","title":"&lt;TOPIC&gt;/&lt;INVERTER_NAME_FROM_SETUP&gt;/#"},{"location":"user-manual-ahoy/#topicinverter_name_from_setupch0","text":"Topic Example Value Remarks U_AC 233.300 actual AC Voltage in Volt I_AC 0.300 actual AC Current in Ampere P_AC 71.000 actual AC Power in Watt Q_AC 21.200 actual AC reactive power in var F_AC 49.990 actual AC Frequency in Hz PF_AC 95.800 actual AC Power factor Temp 19.800 Temperature of inverter in degree Celsius EVT 9.000 Last Event/Alarm Message Index YieldDay 51.000 Energy converted to AC per day in Watt hours (measured on DC) YieldTotal 465.294 Energy converted to AC since reset Watt hours (measured on DC) P_DC 74.600 actual DC Power in Watt Efficiency 95.174 actual ration AC Power over DC Power in percent FWVersion 10012.000 Firmware version eg. 1.00.12 FWBuildYear 2020.000 Firmware build date FWBuildMonthDay 624.000 Firmware build month and day eg. 24th of june HWPartId 100.000 Hardware Id PowerLimit 80.000 actual set point for power limit control AC active power in percent LastAlarmCode 1.000 Last Alarm Code eg. \"inverter start\"","title":"&lt;TOPIC&gt;/&lt;INVERTER_NAME_FROM_SETUP&gt;/ch0/#"},{"location":"user-manual-ahoy/#topicinverter_name_from_setupchchannel_number","text":"<CHANNEL_NUMBER> is in the range 1 to 4 depending on the inverter type Topic Example Value Remarks U_DC 38.900 actual DC Voltage in Volt I_DC 0.640 actual DC current in Ampere P_DC 25.000 actual DC power in Watt YieldDay 17.000 Energy converted to AC per day Watt hours per module/channel (measured on DC) YieldTotal 110.819 Energy converted to AC since reset Watt hours per module/channel (measured on DC) Irradiation 5.65 ratio DC Power over set maximum power per module/channel in percent","title":"&lt;TOPIC&gt;/&lt;INVERTER_NAME_FROM_SETUP&gt;/ch&lt;CHANNEL_NUMBER&gt;/#"},{"location":"user-manual-ahoy/#active-power-limit-via-serial-control-page","text":"URL: /serial You can change the setting in the following manner. Decide if you want to set an absolute value in Watt an relative value in percent based on the maximum Power capabilities of the inverter and if this settings shall be persistent not persistent after a power cycle of the inverter (P_DC=0 and P_AC=0 for at least 10 seconds) The user has to ensure correct settings. Remember that for the inverters of 3rd generation the relative active power limit is in the range of 2% up to 100%. Also an absolute active power limit below approx. 30 Watt seems to be not meanful because of the control capabilities and reactive power load.","title":"Active Power Limit via Serial / Control Page"},{"location":"user-manual-ahoy/#control-via-mqtt","text":"","title":"Control via MQTT"},{"location":"user-manual-ahoy/#generic-information","text":"The AhoyDTU subscribes on following topics: <TOPIC>/ctrl/limit/<INVERTER_ID> <TOPIC>/ctrl/restart/<INVERTER_ID> <TOPIC>/setup/set_time \ud83d\udc46 <TOPIC> can be set on setup page, default is inverter . \ud83d\udc46 <INVERTER_ID> is the number of the specific inverter in the setup page.","title":"Generic Information"},{"location":"user-manual-ahoy/#inverter-restart","text":"<TOPIC>/ctrl/restart/<INVERTER_ID> Example: inverter/ctrl/restart/0","title":"Inverter restart"},{"location":"user-manual-ahoy/#power-limit-relative-non-persistent","text":"<TOPIC>/ctrl/limit/<INVERTER_ID> with a payload [2 .. 100] NOTE: optional a % can be sent as last character Example: inverter/ctrl/limit/0 70","title":"Power Limit relative (non persistent) [%]"},{"location":"user-manual-ahoy/#power-limit-absolute-non-persistent-watts","text":"<TOPIC>/ctrl/limit/<INVERTER_ID> with a payload [0 .. 65535] NOTE: the unit W is necessary to determine an absolute limit Example: inverter/ctrl/limit/0 600W","title":"Power Limit absolute (non persistent) [Watts]"},{"location":"user-manual-ahoy/#power-limit-persistent","text":"This feature was removed. The persisten limit should not be modified cyclic by a script because of potential wearout of the flash inside the inverter.","title":"Power Limit persistent"},{"location":"user-manual-ahoy/#control-via-rest-api","text":"","title":"Control via REST API"},{"location":"user-manual-ahoy/#generic-information_1","text":"The rest API works with JSON POST requests. All the following instructions must be sent to the /api endpoint of the AhoyDTU. \ud83d\udc46 <INVERTER_ID> is the number of the specific inverter in the setup page.","title":"Generic Information"},{"location":"user-manual-ahoy/#inverter-power-on-off","text":"{ \"id\" : <INVERTER_ID> , \"cmd\" : \"power\" , \"val\" : <VALUE> } The <VALUE> should be set to 1 = ON and 0 = OFF","title":"Inverter Power (On / Off)"},{"location":"user-manual-ahoy/#inverter-restart_1","text":"{ \"id\" : <INVERTER_ID> , \"cmd\" : \"restart\" }","title":"Inverter restart"},{"location":"user-manual-ahoy/#power-limit-relative-persistent","text":"{ \"id\" : <INVERTER_ID> , \"cmd\" : \"limit_persistent_relative\" , \"val\" : <VALUE> } The VALUE represents a percent number in a range of [2 .. 100]","title":"Power Limit relative persistent [%]"},{"location":"user-manual-ahoy/#power-limit-absolute-persistent-watts","text":"{ \"id\" : <INVERTER_ID> , \"cmd\" : \"limit_persistent_absolute\" , \"val\" : <VALUE> } The VALUE represents watts in a range of [0 .. 65535]","title":"Power Limit absolute persistent [Watts]"},{"location":"user-manual-ahoy/#power-limit-relative-non-persistent_1","text":"{ \"id\" : <INVERTER_ID> , \"cmd\" : \"limit_nonpersistent_relative\" , \"val\" : <VALUE> } The VALUE represents a percent number in a range of [2 .. 100]","title":"Power Limit relative non persistent [%]"},{"location":"user-manual-ahoy/#power-limit-absolute-non-persistent-watts_1","text":"{ \"id\" : <INVERTER_ID> , \"cmd\" : \"limit_nonpersistent_absolute\" , \"val\" : <VALUE> } The VALUE represents watts in a range of [0 .. 65535]","title":"Power Limit absolute non persistent [Watts]"},{"location":"user-manual-ahoy/#developer-information-rest-api-obsolete","text":"In the same approach as for MQTT any other SubCmd and also MainCmd can be applied and the response payload can be observed in the serial logs. Eg. request the Alarm-Data from the Alarm-Index 5 from inverter 0 will look like this: { \"inverter\" : 0 , \"tx_request\" : 21 , \"cmd\" : 17 , \"payload\" : 5 , \"payload2\" : 0 }","title":"Developer Information REST API (obsolete)"},{"location":"user-manual-ahoy/#zero-export-control-needs-rework","text":"You can use the mqtt topic <TOPIC>/devcontrol/<INVERTER_ID>/11 with a number as payload (eg. 300 -> 300 Watt) to set the power limit to the published number in Watt. (In regular cases the inverter will use the new set point within one intervall period; to verify this see next bullet) You can check the inverter set point for the power limit control on the topic <TOPIC>/<INVERTER_NAME_FROM_SETUP>/ch0/PowerLimit \ud83d\udc46 This value is ALWAYS in percent of the maximum power limit of the inverter. In regular cases this value will be updated within approx. 15 seconds. (depends on request intervall) You can monitor the actual AC power by subscribing to the topic <TOPIC>/<INVERTER_NAME_FROM_SETUP>/ch0/P_AC \ud83d\udc46 This value is ALWAYS in Watt","title":"Zero Export Control (needs rework)"},{"location":"user-manual-ahoy/#firmware-version-collection","text":"Gather user inverter information here to understand what differs between some inverters. To get the information open the URL /api/record/info on your AhoyDTU. The information will only be present once the AhoyDTU was able to communicate with an inverter. Name Inverter Typ Bootloader V. FWVersion FWBuild [YYYY] FWBuild [MM-DD] HWPartId DanielR92 HM-1500 1.0.16 2021 10-12 100 isdor HM-300 1.0.14 2021 12-09 102 aschiffler HM-1500 1.0.12 2020 06-24 100 klahus1 HM-300 1.0.10 2020 07-07 102 roku133 HM-400 1.0.10 2020 07-07 102 eeprom23 HM-1200 0.1.0 1.0.18 2021 12-24 269619201 18:21:00 HWRev 256 eeprom23 HM-1200 2t 0.1.0 1.0.16 2021 10-12 269619207 17:06:00 HWRev 256 fila612 HM-700 1.0.10 2021 11-01 104 tfhcm TSUN-350 1.0.14 2021 12-09 102 Groobi TSOL-M400 1.0.14 2021 12-09 102 setje HM-600 1.0.08 2020 07-10 104 madmartin HM-600 0.1.4 1.0.10 2021 11-01 104 lumapu HM-1200 0.1.0 1.0.12 2020 06-24 chehrlic HM-600 1.0.10 2021 11-01 104 chehrlic TSOL-M800de 1.0.10 2021 11-01 104 B5r1oJ0A9G HM-800 1.0.10 2021 104 B5r1oJ0A9G HM-800 1.0.10 2021 104 tomquist TSOL-M1600 1.0.12 2020 06-24 100 rejoe2 MI-600 236 2018 11-27 17 rejoe2 MI-1500 1.0.12 2020 06-24 100 dragricola HM-1200 1.0.16 2021 10-12 100 dragricola MI-300 230 2017 08-08 1","title":"Firmware Version collection"},{"location":"user-manual-ahoy/#developer-information-about-command-queue","text":"After reboot or startup the ahoy firmware it will enque three commands in the following sequence: Get active power limit in percent ( SystemConfigPara = 5 // 0x05 ) Get firmware version ( InverterDevInform_All = 1 // 0x01 ) Get data ( RealTimeRunData_Debug = 11 // 0x0b ) With the command get data ( RealTimeRunData_Debug = 11 // 0x0b ) the alarm message counter will be updated. In the initial case then aonther command is queued to get the alarm code ( AlarmData = 17 // 0x11 ). This command ( AlarmData = 17 // 0x11 ) will enqued in any operation phase if alarm message counter is raised by one or greater compared to the last request with command get data ( RealTimeRunData_Debug = 11 // 0x0b ) In case all commands are processed ( _commandQueue.empty() == true ) then as a default command the get data ( RealTimeRunData_Debug = 11 // 0x0b ) will be enqueued. In case a Device Control command (Power Limit, Off, On) is requested via MQTT or REST API this request will be send before any other enqueued command. In case of a accepted change in power limit the command get active power limit in percent ( SystemConfigPara = 5 // 0x05 ) will be enqueued. The acceptance is checked by the reponse packets on the devive control commands (tx id 0x51 --> rx id 0xD1) if in byte 12 the requested sub-command (eg. power limit) is present.","title":"Developer Information about Command Queue"},{"location":"user-manual-ahoy/#how-to","text":"","title":"How To"},{"location":"user-manual-ahoy/#sunrise-sunset","text":"In order to display the sunrise and sunset on the start page, the location coordinates (latitude and longitude) must be set in decimal in the setup under Sunrise & Sunset. If the coordinates are set, the current sunrise and sunset are calculated and displayed daily. If this is set, you can also tick \"disable night communication\", then sending to the inverter is switched off outside of the day (i.e. at night), this avoids unnecessary communication attempts and thus also the incrementing of \"RX no anwser\". Here you can get easy your GeoLocation: https://www.mapsdirections.info/en/gps-coordinates.html","title":"Sunrise &amp; Sunset"},{"location":"user-manual-ahoy/#commands-and-informations","text":"Turn On - turns on the inverter/feeder (LED flashes green if there is no error) Turn Off - switches off the inverter/feeder (LED flashes fast red), can be switched on again with Turn On or by disconnecting and reconnecting the DC voltage Restart - restarts the microcontroller in the inverter, which deletes the error memory and the YieldDay values, feed-in stops briefly and starts with the last persistent limit Send Power Limit: - A limitation of the AC power can be sent in relative (in %) or in absolute (Watt). - It can be set to a different value non-persistently (temporarily) at any time (regardless of what you have set for persistent), this should be normal in order to limit the power (zero feed/battery control) and does not damage the EEPROM in the WR either. - With persistent you send a saving limit (only use it seldom, otherwise the EEPROM in the HM can break!), This is then used as the next switch-on limit when DC comes on, i.e. when the sun comes up early or the WR on batteries is switched on the limit is applied immediately when sending, like any other, but it is stored in the EEPROM of the WR. - A persistent limit is only needed if you want to throttle your inverter permanently or you can use it to set a start value on the battery, which is then always the switch-on limit when switching on, otherwise it would ramp up to 100% without regulation, which is continuous load is not healthy. - You can set a new limit in the turn-off state, which is then used for on (switching on again), otherwise the last limit from before the turn-off is used, but of course this only applies if DC voltage is applied the whole time. - If the DC voltage is missing for a few seconds, the microcontroller in the inverter goes off and forgets everything that was temporary/non-persistent in the RAM: YieldDay, error memory, non-persistent limit.","title":"Commands and informations"},{"location":"user-manual-ahoy/#update-your-ahoy-dtu-firmware","text":"To update your AHOY-DTU, you have to download the latest firmware package. Here are the latest stable releases and latest development builds available for download. As soon as you have downloaded the firmware package, unzip it. On the WebUI, navigate to Update and press on select firmware file. From the unzipped files, select the right .bin file for your hardware and needs. - If you use an ESP8266, select the file ending with esp8266.bin - If you use an ESP8266 with prometheus, select the file ending with esp8266_prometheus.bin - If you use an ESP32, select the file ending with esp32.bin - If you use an ESP32 with prometheus, select the file ending with esp32_prometheus.bin Note: if you want to use prometheus, the usage of an ESP32 is recommended, since the ESP8266 is at its performance limits and therefore can cause stability issues. After selecting the right firmware file, press update. Your AHOY-DTU will now install the new firmware and reboot.","title":"Update your AHOY-DTU Firmware"},{"location":"user-manual-ahoy/#additional-notes","text":"","title":"Additional Notes"},{"location":"user-manual-ahoy/#mi-inverters","text":"AhoyDTU supports MI type inverters as well, since dev. version 0.5.70. MI inverters are known to be delivered with two different generations of firmwares: inverters with serial numbers 10x2 already use the 3rd generation protocol and behave just like the newer HM models, the follwoing remarks do not apply to these . Older MI inverters (#sn 10x1) use a different rf protocol and thus do not deliver exactly the same data. E.g. the AC power value will therefore be calculated by AhoyDTU itself, while other values might not be available at all. Single and dual channel 2nd gen. devices seem not to accept power limiting commands at all, the lower limit for 4-channel MI is 10% (instead of 2% for newer models) 4-channel MI type inverters might work, but code still is untested.","title":"MI Inverters"},{"location":"Hardware/ESP-DTU_Platinenlayout/","text":"Platinenlayout Wemos D1 Mini und NRF24 Gerber_PCB_ESP-DTU.zip","title":"ESP DTU Platinenlayout"},{"location":"Hardware/cmt2300a-breakout-board/","text":"CMT2300A Breakout Board 1 GND 2 VCC +3.3V 3 CSB 4 FCSB 5 CLK 6 SDIO 7 GPIO2 8 GPIO3","title":"Cmt2300a breakout board"},{"location":"Hoymiles/hm-inverter-dtu-pro/","text":"HM-Inverter and DTU Pro","title":"Hm inverter dtu pro"},{"location":"Hoymiles/hm-inverter-dtu-pro/#hm-inverter-and-dtu-pro","text":"","title":"HM-Inverter and DTU Pro"},{"location":"Hoymiles/hms-hmt-inverter-dtu-pro-s/","text":"HMS-/HMT-Inverter and DTU Pro S Details Links to Whitepapers, FCC IDs and HMS-101 Module Details Closeup Photos of the open DTU Pro S and HMS-101 Modules without protective metal sheet Links to several github issues which have so far documented the details CMT2300A RX/TX-Module What is the current process flow (comunication between ARM-Chip and CMT2300A)? After switching on the DTU, the initialization phase starts. This is where configurations in memory are retrieved and sub-areas in the DTU are configured with this information. A CMT2300A chip is installed in the transmitter and receiver unit. This chip takes on various tasks and has its task in receiving data from the WR (inverter) and forwarding it to the ARM chip. Just as well to send data to the WR, for example to carry out a limitation. Hardware Original DTU","title":"Hms hmt inverter dtu pro s"},{"location":"Hoymiles/hms-hmt-inverter-dtu-pro-s/#hms-hmt-inverter-and-dtu-pro-s-details","text":"Links to Whitepapers, FCC IDs and HMS-101 Module Details Closeup Photos of the open DTU Pro S and HMS-101 Modules without protective metal sheet Links to several github issues which have so far documented the details CMT2300A RX/TX-Module","title":"HMS-/HMT-Inverter and DTU Pro S Details"},{"location":"Hoymiles/hms-hmt-inverter-dtu-pro-s/#what-is-the-current-process-flow-comunication-between-arm-chip-and-cmt2300a","text":"After switching on the DTU, the initialization phase starts. This is where configurations in memory are retrieved and sub-areas in the DTU are configured with this information. A CMT2300A chip is installed in the transmitter and receiver unit. This chip takes on various tasks and has its task in receiving data from the WR (inverter) and forwarding it to the ARM chip. Just as well to send data to the WR, for example to carry out a limitation.","title":"What is the current process flow (comunication between ARM-Chip and CMT2300A)?"},{"location":"Hoymiles/hms-hmt-inverter-dtu-pro-s/#hardware","text":"","title":"Hardware"},{"location":"Hoymiles/hms-hmt-inverter-dtu-pro-s/#original-dtu","text":"","title":"Original DTU"},{"location":"Hoymiles/hms-wifi-inverter-dtu-bi/","text":"","title":"Hms wifi inverter dtu bi"},{"location":"Hoymiles/mi-inverter-dtu-wlite/","text":"MI Inverter and DTU WLite","title":"Mi inverter dtu wlite"},{"location":"Hoymiles/mi-inverter-dtu-wlite/#mi-inverter-and-dtu-wlite","text":"","title":"MI Inverter and DTU WLite"}]}